[
  {
    "name": "tca_plugin_pmd_v7_13",
    "display_name": "PMD_v7_13",
    "description": "static analyzer",
    "license": "BSD",
    "libscheme_set": [],
    "task_processes": [
      "analyze",
      "datahandle"
    ],
    "scan_app": "codelint",
    "scm_url": "tca_plugin_pmd_v7_13",
    "run_cmd": "python src/main.py scan",
    "envs": "python_version = 3",
    "build_flag": false,
    "checkrule_set": [
      {
        "display_name": "InvalidDependencyTypes",
        "real_name": "category/pom/errorprone.xml/InvalidDependencyTypes",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "By default, Maven only recognizes the following types: pom, jar, maven-plugin, ejb, war, ear, rar, par.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "If you use an invalid dependency type in the dependency management section, Maven doesn't fail. Instead, the entry is just ignored, which might have the effect, that the wrong version of the dependency is used. The following types are considered valid: pom, jar, maven-plugin, ejb, war, ear, rar, par.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_pom_errorprone.html#invaliddependencytypes\n```\n\n\n<project...>\n  ...\n  <dependencyManagement>\n      ...\n    <dependency>\n      <groupId>org.jboss.arquillian</groupId>\n      <artifactId>arquillian-bom</artifactId>\n      <version>${arquillian.version}</version>\n      <type>bom</type> <!-- not a valid type ! 'pom' is ! -->\n      <scope>import</scope>\n    </dependency>\n    ...\n  </dependencyManagement>\n</project>\n \n        ```"
      },
      {
        "display_name": "ProjectVersionAsDependencyVersion",
        "real_name": "category/pom/errorprone.xml/ProjectVersionAsDependencyVersion",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not use project.version to express a dependency version.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Using that expression in dependency declarations seems like a shortcut, but it can go wrong. By far the most common problem is the use of \\${project.version} in a BOM or parent POM.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_pom_errorprone.html#projectversionasdependencyversion\n```\n\n\n<project...>\n  ...\n  <dependency>\n    ...\n    <version>\\${project.version}</version>\n  </dependency>\n</project>\n\n        ```"
      },
      {
        "display_name": "MistypedCDATASection",
        "real_name": "category/xml/errorprone.xml/MistypedCDATASection",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Potentially mistyped CDATA section with extra [ at beginning or ] at the end.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "An XML CDATA section begins with a <![CDATA[ marker, which has only one [, and ends with a ]]> marker, which has two ].\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_xml_errorprone.html#mistypedcdatasection\n```\n\n\n<root>\n    <child>\n        <![CDATA[[ character data ]]> - this cdata section is valid, but it contains an\n        additional square bracket at the beginning.\n        It should probably be just <![CDATA[ character data ]]>.\n    </child>\n    <child>\n        <![CDATA[ character data ]]]> - this cdata section is valid, but it contains an\n        additional square bracket in the end.\n        It should probably be just <![CDATA[ character data ]]>.\n    </child>\n</root>\n\n        ```"
      },
      {
        "display_name": "MissingEncoding",
        "real_name": "category/xml/bestpractices.xml/MissingEncoding",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Set an explicit XML encoding in the XML declaration to ensure proper parsing",
        "custom": false,
        "rule_param": null,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When the character encoding is missing from the XML declaration, the parser may produce garbled text. This is completely dependent on how the parser is set up and the content of the XML file, so it may be hard to reproduce. Providing an explicit encoding ensures accurate and consistent parsing.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_xml_bestpractices.html#missingencoding\n```\n```"
      },
      {
        "display_name": "UseConcatOnce",
        "real_name": "category/xsl/codestyle.xml/UseConcatOnce",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The xpath concat() function accepts as many arguments as required, you may be able to factorize this expression",
        "custom": false,
        "rule_param": null,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The XPath concat() functions accepts as many arguments as required so you can have \"concat($a,'b',$c)\" rather than \"concat($a,concat('b',$c)\".\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_xsl_codestyle.html#useconcatonce\n```\n\n\n<xsl:variable name=\"var\" select=\"concat(\"Welcome\",concat(\"to you \",$name))\"/>\n<xsl:variable name=\"var\" select=\"concat(\"Welcome\",\"to you \",$name))\">\n\n        ```"
      },
      {
        "display_name": "AvoidAxisNavigation",
        "real_name": "category/xsl/performance.xml/AvoidAxisNavigation",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Axis navigation has the largest impact when writing an XPath query.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "xml"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using the 'following' or 'preceding' axes whenever possible, as these can cut through 100% of the document in the worst case. Also, try to avoid using 'descendant' or 'descendant-or-self' axes, as if you're at the top of the Document, it necessarily means cutting through 100% of the document.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_xsl_performance.html#avoidaxisnavigation\n```\n\n\n<xsl:variable name=\"var\" select=\"//item/descendant::child\"/>\n\n        ```"
      },
      {
        "display_name": "AvoidInlineStyles",
        "real_name": "category/html/bestpractices.xml/AvoidInlineStyles",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid inline styles",
        "custom": false,
        "rule_param": null,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Don't mix content and style. Use separate CSS-files for the style and introduce classes. This helps to reuse common styles.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_html_bestpractices.html#avoidinlinestyles\n```\n\n\n<div style=\"font-size: 12pt;\"></div>\n\n        ```"
      },
      {
        "display_name": "UnnecessaryTypeAttribute",
        "real_name": "category/html/bestpractices.xml/UnnecessaryTypeAttribute",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Type attribute for link and script elements is not needed.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In HTML5 the explicit type attribute for link and script elements is not needed. Modern browsers expect stylesheets to be in CSS and scripts to use JavaScript.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_html_bestpractices.html#unnecessarytypeattribute\n```\n\n            \n<!-- Instead of -->\n<link type=\"text/css\" rel=\"stylesheet\" href=\"css/styles.css\" />\n<script type=\"text/javascript\" src=\"js/scripts.js\"></script>\n\n<!-- Just use -->\n<link rel=\"stylesheet\" href=\"css/styles.css\" />\n<script src=\"js/scripts.js\"></script>\n\n        ```"
      },
      {
        "display_name": "UseAltAttributeForImages",
        "real_name": "category/html/bestpractices.xml/UseAltAttributeForImages",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The image is missing an alternate text.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "html"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Always use an \"alt\" attribute for images. This provides an alternative text and is extensively used by screen readers.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_html_bestpractices.html#usealtattributeforimages\n```\n\n            \n<!-- instead of -->\n<img src=\"house.jpeg\">\n\n<!-- use this -->\n<img src=\"house.jpeg\" alt=\"A house from the 18th century\">\n\n        ```"
      },
      {
        "display_name": "CommentContent",
        "real_name": "category/java/documentation.xml/CommentContent",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Invalid words or phrases found",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A rule for the politically correct... we don't want to offend anyone.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_documentation.html#commentcontent\n```\n\n\n//OMG, this is horrible, Bob is an idiot !!!\n\n        ```"
      },
      {
        "display_name": "CommentRequired",
        "real_name": "category/java/documentation.xml/CommentRequired",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Comment is required",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Denotes whether javadoc (formal) comments are required (or unwanted) for specific language elements.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_documentation.html#commentrequired\n```\n\n\n/**\n*\n*\n* @author Jon Doe\n*/\n\n        ```"
      },
      {
        "display_name": "CommentSize",
        "real_name": "category/java/documentation.xml/CommentSize",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Comment is too large",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Determines whether the dimensions of non-header comments found are within the specified limits.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_documentation.html#commentsize\n```\n\n\n/**\n*\n*   too many lines!\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*\n*/\n\n        ```"
      },
      {
        "display_name": "UncommentedEmptyConstructor",
        "real_name": "category/java/documentation.xml/UncommentedEmptyConstructor",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Document empty constructor",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Uncommented Empty Constructor finds instances where a constructor does not contain statements, but there is no comment. By explicitly commenting empty constructors it is easier to distinguish between intentional (commented) and unintentional empty constructors.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_documentation.html#uncommentedemptyconstructor\n```\n\n\npublic Foo() {\n  // This constructor is intentionally empty. Nothing special is needed here.\n}\n\n        ```"
      },
      {
        "display_name": "UncommentedEmptyMethodBody",
        "real_name": "category/java/documentation.xml/UncommentedEmptyMethodBody",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Document empty method body",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Uncommented Empty Method Body finds instances where a method body does not contain statements, but there is no comment. By explicitly commenting empty method bodies it is easier to distinguish between intentional (commented) and unintentional empty methods.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_documentation.html#uncommentedemptymethodbody\n```\n\n\npublic void doSomething() {\n}\n\n        ```"
      },
      {
        "display_name": "AbstractClassWithoutAnyMethod",
        "real_name": "category/java/design.xml/AbstractClassWithoutAnyMethod",
        "category": "convention",
        "severity": "warning",
        "rule_title": "No abstract method which means that the keyword is most likely used to prevent instantiation. Use a private or protected constructor instead.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "If an abstract class does not provide any methods, it may be acting as a simple data container that is not meant to be instantiated. In this case, it is probably better to use a private or protected constructor in order to prevent instantiation than make the class misleadingly abstract.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#abstractclasswithoutanymethod\n```\n\n\npublic abstract class Example {\n    String field;\n    int otherField;\n}\n\n        ```"
      },
      {
        "display_name": "AvoidCatchingGenericException",
        "real_name": "category/java/design.xml/AvoidCatchingGenericException",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid catching generic exceptions such as NullPointerException, RuntimeException, Exception in try-catch block.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#avoidcatchinggenericexception\n```\n\n\npackage com.igate.primitive;\n\npublic class PrimitiveType {\n\n    public void downCastPrimitiveType() {\n        try {\n            System.out.println(\" i [\" + i + \"]\");\n        } catch(Exception e) {\n            e.printStackTrace();\n        } catch(RuntimeException e) {\n            e.printStackTrace();\n        } catch(NullPointerException e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidDeeplyNestedIfStmts",
        "real_name": "category/java/design.xml/AvoidDeeplyNestedIfStmts",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Deeply nested if..then statements are hard to read",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#avoiddeeplynestedifstmts\n```\n\n\npublic class Foo {\n  public void bar(int x, int y, int z) {\n    if (x>y) {\n      if (y>z) {\n        if (z==x) {\n         // !! too deep\n        }\n      }\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidRethrowingException",
        "real_name": "category/java/design.xml/AvoidRethrowingException",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A catch statement that catches an exception only to rethrow it should be avoided.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Catch blocks that merely rethrow a caught exception only add to code size and runtime complexity.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#avoidrethrowingexception\n```\n\n\npublic void bar() {\n    try {\n        // do something\n    }  catch (SomeException se) {\n       throw se;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidThrowingNewInstanceOfSameException",
        "real_name": "category/java/design.xml/AvoidThrowingNewInstanceOfSameException",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A catch statement that catches an exception only to wrap it in a new instance of the same type of exception and throw it should be avoided",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Catch blocks that merely rethrow a caught exception wrapped inside a new instance of the same type only add to code size and runtime complexity.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#avoidthrowingnewinstanceofsameexception\n```\n\n\npublic void bar() {\n    try {\n        // do something\n    } catch (SomeException se) {\n        // harmless comment\n        throw new SomeException(se);\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidThrowingNullPointerException",
        "real_name": "category/java/design.xml/AvoidThrowingNullPointerException",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid throwing null pointer exceptions.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid throwing NullPointerExceptions manually. These are confusing because most people will assume that the virtual machine threw it. To avoid a method being called with a null parameter, you may consider using an IllegalArgumentException instead, making it clearly seen as a programmer-initiated exception. However, there are better ways to handle this: >*Effective Java, 3rd Edition, Item 72: Favor the use of standard exceptions* > >Arguably, every erroneous method invocation boils down to an illegal argument or state, but other exceptions are standardly used for certain kinds of illegal arguments and states. If a caller passes null in some parameter for which null values are prohibited, convention dictates that NullPointerException be thrown rather than IllegalArgumentException. To implement that, you are encouraged to use `java.util.Objects.requireNonNull()` (introduced in Java 1.7). This method is designed primarily for doing parameter validation in methods and constructors with multiple parameters. Your parameter validation could thus look like the following: ``` public class Foo { private String exampleValue; void setExampleValue(String exampleValue) { // check, throw and assignment in a single standard call this.exampleValue = Objects.requireNonNull(exampleValue, \"exampleValue must not be null!\"); } } ```\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#avoidthrowingnullpointerexception\n```\n\n\npublic class Foo {\n    void bar() {\n        throw new NullPointerException();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidThrowingRawExceptionTypes",
        "real_name": "category/java/design.xml/AvoidThrowingRawExceptionTypes",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid throwing raw exception types.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid throwing certain exception types. Rather than throw a raw RuntimeException, Throwable, Exception, or Error, use a subclassed exception or error instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#avoidthrowingrawexceptiontypes\n```\n\n\npublic class Foo {\n    public void bar() throws Exception {\n        throw new Exception();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidUncheckedExceptionsInSignatures",
        "real_name": "category/java/design.xml/AvoidUncheckedExceptionsInSignatures",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A method or constructor should not explicitly declare unchecked exceptions in its ''throws'' clause",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports unchecked exceptions in the `throws` clause of a method or constructor. Java doesn't force the caller to handle an unchecked exception, so it's unnecessary except for documentation. A better practice is to document the exceptional cases with a `@throws` Javadoc tag, which allows being more descriptive.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#avoiduncheckedexceptionsinsignatures\n```\n\n\npublic void foo() throws RuntimeException {\n}\n\n        ```"
      },
      {
        "display_name": "ClassWithOnlyPrivateConstructorsShouldBeFinal",
        "real_name": "category/java/design.xml/ClassWithOnlyPrivateConstructorsShouldBeFinal",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This class has only private constructors and may be final",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports classes that may be made final because they cannot be extended from outside their compilation unit anyway. This is because all their constructors are private, so a subclass could not call the super constructor.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#classwithonlyprivateconstructorsshouldbefinal\n```\n\n\npublic class Foo {  //Should be final\n    private Foo() { }\n}\n\n        ```"
      },
      {
        "display_name": "CollapsibleIfStatements",
        "real_name": "category/java/design.xml/CollapsibleIfStatements",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This if statement could be combined with its parent",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports nested 'if' statements that can be merged together by joining their conditions with a boolean `&&` operator in between.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#collapsibleifstatements\n```\n\n\nclass Foo {\n\n    void bar() {\n        if (x) {            // original implementation\n            if (y) {\n                // do stuff\n            }\n        }\n    }\n\n    void bar() {\n        if (x && y) {        // clearer implementation\n            // do stuff\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "CouplingBetweenObjects",
        "real_name": "category/java/design.xml/CouplingBetweenObjects",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A value of {0} may denote a high amount of coupling within the class (threshold: {1})",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule counts the number of unique attributes, local variables, and return types within an object. A number higher than the specified threshold can indicate a high degree of coupling.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#couplingbetweenobjects\n```\n\n\nimport com.Blah;\nimport org.Bar;\nimport org.Bardo;\n\npublic class Foo {\n    private Blah var1;\n    private Bar var2;\n\n    //followed by many imports of unique objects\n    ObjectC doWork() {\n        Bardo var55;\n        ObjectA var44;\n        ObjectZ var93;\n        return something();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "CognitiveComplexity",
        "real_name": "category/java/design.xml/CognitiveComplexity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} ''{1}'' has a cognitive complexity of {2}, current threshold is {3}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Methods that are highly complex are difficult to read and more costly to maintain. If you include too much decisional logic within a single method, you make its behavior hard to understand and more difficult to modify. Cognitive complexity is a measure of how difficult it is for humans to read and understand a method. Code that contains a break in the control flow is more complex, whereas the use of language shorthands doesn't increase the level of complexity. Nested control flows can make a method more difficult to understand, with each additional nesting of the control flow leading to an increase in cognitive complexity. Information about Cognitive complexity can be found in the original paper here: <https://www.sonarsource.com/docs/CognitiveComplexity.pdf> By default, this rule reports methods with a complexity of 15 or more. Reported methods should be broken down into less complex components.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#cognitivecomplexity\n```\n\n            \npublic class Foo {\n  // Has a cognitive complexity of 0\n  public void createAccount() {\n    Account account = new Account(\"PMD\");\n    // save account\n  }\n\n  // Has a cognitive complexity of 1\n  public Boolean setPhoneNumberIfNotExisting(Account a, String phone) {\n    if (a.phone == null) {                          // +1\n      a.phone = phone;\n      return true;\n    }\n\n    return false;\n  }\n\n  // Has a cognitive complexity of 4\n  public void updateContacts(List<Contact> contacts) {\n    List<Contact> contactsToUpdate = new ArrayList<Contact>();\n\n    for (Contact contact : contacts) {                           // +1\n      if (contact.department.equals(\"Finance\")) {                // +2 (nesting = 1)\n        contact.title = \"Finance Specialist\";\n        contactsToUpdate.add(contact);\n      } else if (contact.department.equals(\"Sales\")) {           // +1\n        contact.title = \"Sales Specialist\";\n        contactsToUpdate.add(contact);\n      }\n    }\n    // save contacts\n  }\n}\n\n        ```"
      },
      {
        "display_name": "CyclomaticComplexity",
        "real_name": "category/java/design.xml/CyclomaticComplexity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} ''{1}'' has a{2} cyclomatic complexity of {3}.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic in a single method makes its behaviour hard to read and change. Cyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method, plus one for the method entry. Decision points are places where the control flow jumps to another place in the program. As such, they include all control flow statements, such as `if`, `while`, `for`, and `case`. For more details on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#CYCLO %}. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10. Additionally, classes with many methods of moderate complexity get reported as well once the total of their methods' complexities reaches 80, even if none of the methods was directly reported. Reported methods should be broken down into several smaller methods. Reported classes should probably be broken down into subcomponents.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#cyclomaticcomplexity\n```\n\n            \nclass Foo {\n  void baseCyclo() {                // Cyclo = 1\n    highCyclo();\n  }\n\n  void highCyclo() {                // Cyclo = 10: reported!\n    int x = 0, y = 2;\n    boolean a = false, b = true;\n\n    if (a && (y == 1 ? b : true)) { // +3\n      if (y == x) {                 // +1\n        while (true) {              // +1\n          if (x++ < 20) {           // +1\n            break;                  // +1\n          }\n        }\n      } else if (y == t && !d) {    // +2\n        x = a ? y : x;              // +1\n      } else {\n        x = 2;\n      }\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "DataClass",
        "real_name": "category/java/design.xml/DataClass",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The class ''{0}'' is suspected to be a Data Class (WOC={1}, NOPA={2}, NOAM={3}, WMC={4})",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Data Classes are simple data holders, which reveal most of their state, and without complex functionality. The lack of functionality may indicate that their behaviour is defined elsewhere, which is a sign of poor data-behaviour proximity. By directly exposing their internals, Data Classes break encapsulation, and therefore reduce the system's maintainability and understandability. Moreover, classes tend to strongly rely on their data representation, which makes for a brittle design. Refactoring a Data Class should focus on restoring a good data-behaviour proximity. In most cases, that means moving the operations defined on the data back into the class. In some other cases it may make sense to remove entirely the class and move the data into the former client classes. The rule uses metrics to implement its detection strategy. The violation message gives information about the values of these metrics: * WMC: a class complexity measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHED_METHOD_COUNT %} * WOC: a 'non-triviality' measure for a class, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHT_OF_CLASS %} * NOPA: number of public attributes, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_PUBLIC_FIELDS %} * NOAM: number of public accessor methods, see {% jdoc java::lang.java.metrics.JavaMetrics#NUMBER_OF_ACCESSORS %} The rule identifies a god class by looking for classes which have all of the following properties: * High NOPA + NOAM * Low WOC * Low WMC\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#dataclass\n```\n\n\npublic class DataClass {\n\n  // class exposes public attributes\n  public String name = \"\";\n  public int bar = 0;\n  public int na = 0;\n\n  private int bee = 0;\n\n  // and private ones through getters\n  public void setBee(int n) {\n    bee = n;\n  }\n}\n\n        ```"
      },
      {
        "display_name": "DoNotExtendJavaLangError",
        "real_name": "category/java/design.xml/DoNotExtendJavaLangError",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Exceptions should not extend java.lang.Error",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Errors are system exceptions. Do not extend them.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#donotextendjavalangerror\n```\n\n\npublic class Foo extends Error { }\n\n        ```"
      },
      {
        "display_name": "ExceptionAsFlowControl",
        "real_name": "category/java/design.xml/ExceptionAsFlowControl",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Exception thrown at line {0} is caught in this block.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule reports exceptions thrown and caught in an enclosing try statement. This use of exceptions as a form of `goto` statement is discouraged, as that may hide actual exceptions, and obscures control flow, especially when debugging. To fix a violation, add the necessary validation or use an alternate control structure.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#exceptionasflowcontrol\n```\n\n\npublic void bar() {\n    try {\n        try {\n        } catch (Exception e) {\n            throw new WrapperException(e);\n            // this is essentially a GOTO to the WrapperException catch block\n        }\n    } catch (WrapperException e) {\n        // do some more stuff\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ExcessiveImports",
        "real_name": "category/java/design.xml/ExcessiveImports",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A high number of imports can indicate a high degree of coupling within an object.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A high number of imports can indicate a high degree of coupling within an object. This rule counts the number of unique imports and reports a violation if the count is above the user-specified threshold.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#excessiveimports\n```\n\n\nimport blah.blah.Baz;\nimport blah.blah.Bif;\n// 28 others from the same package elided\npublic class Foo {\n    public void doWork() {}\n}\n\n        ```"
      },
      {
        "display_name": "ExcessiveParameterList",
        "real_name": "category/java/design.xml/ExcessiveParameterList",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid long parameter lists.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#excessiveparameterlist\n```\n\n\npublic void addPerson(      // too many arguments liable to be mixed up\n    int birthYear, int birthMonth, int birthDate, int height, int weight, int ssn) {\n\n    . . . .\n}\n\npublic void addPerson(      // preferred approach\n    Date birthdate, BodyMeasurements measurements, int ssn) {\n\n    . . . .\n}\n\n        ```"
      },
      {
        "display_name": "ExcessivePublicCount",
        "real_name": "category/java/design.xml/ExcessivePublicCount",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This class has a bunch of public methods and attributes",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Classes with large numbers of public methods and attributes require disproportionate testing efforts since combinational side effects grow rapidly and increase risk. Refactoring these classes into smaller ones not only increases testability and reliability but also allows new variations to be developed easily.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#excessivepubliccount\n```\n\n\npublic class Foo {\n    public String value;\n    public Bar something;\n    public Variable var;\n    // [... more more public attributes ...]\n\n    public void doWork() {}\n    public void doMoreWork() {}\n    public void doWorkAgain() {}\n    // [... more more public methods ...]\n}\n\n        ```"
      },
      {
        "display_name": "FinalFieldCouldBeStatic",
        "real_name": "category/java/design.xml/FinalFieldCouldBeStatic",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This final field could be made static",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "If a final field is assigned to a compile-time constant, it could be made static, thus saving overhead in each object at runtime.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#finalfieldcouldbestatic\n```\n\n\npublic class Foo {\n  public final int BAR = 42; // this could be static and save some space\n}\n\n        ```"
      },
      {
        "display_name": "GodClass",
        "real_name": "category/java/design.xml/GodClass",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Possible God Class (WMC={0}, ATFD={2}, TCC={1})",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The God Class rule detects the God Class design flaw using metrics. God classes do too many things, are very big and overly complex. They should be split apart to be more object-oriented. The rule uses the detection strategy described in \"Object-Oriented Metrics in Practice\". The violations are reported against the entire class. The rule uses metrics to implement its detection strategy. The violation message gives information about the values of these metrics: * WMC: a class complexity measure, see {% jdoc java::lang.java.metrics.JavaMetrics#WEIGHED_METHOD_COUNT %} * ATFD: a measure of how much data external data the class uses, see {% jdoc java::lang.java.metrics.JavaMetrics#ACCESS_TO_FOREIGN_DATA %} * TCC: a measure of how tightly related the methods are, see {% jdoc java::lang.java.metrics.JavaMetrics#TIGHT_CLASS_COHESION %} The rule identifies a god class by looking for classes which have all of the following properties: * High WMC * High ATFD * Low TCC See also the reference: Michele Lanza and Radu Marinescu. *Object-Oriented Metrics in Practice: Using Software Metrics to Characterize, Evaluate, and Improve the Design of Object-Oriented Systems.* Springer, Berlin, 1 edition, October 2006. Page 80.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#godclass\n```\n```"
      },
      {
        "display_name": "ImmutableField",
        "real_name": "category/java/design.xml/ImmutableField",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Field ''{0}'' may be declared final",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports non-final fields whose value never changes once object initialization ends, and hence may be marked final. Note that this rule does not enforce that the field value be deeply immutable itself. An object can still have mutable state, even if all its member fields are declared final. This is referred to as shallow immutability. For more information on mutability, see *Effective Java, 3rd Edition, Item 17: Minimize mutability*. Limitations: We can only check private fields for now.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#immutablefield\n```\n\n\npublic class Foo {\n  private int x; // could be final\n  public Foo() {\n      x = 7;\n  }\n  public void foo() {\n     int a = x + 2;\n  }\n}\n\n        ```"
      },
      {
        "display_name": "InvalidJavaBean",
        "real_name": "category/java/design.xml/InvalidJavaBean",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The bean ''{0}'' is missing a getter for property ''{1}''.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Identifies beans, that don't follow the [JavaBeans API specification](https://download.oracle.com/otndocs/jcp/7224-javabeans-1.01-fr-spec-oth-JSpec/). Each non-static field should have both a getter and a setter method. If the field is just used internally and is not a bean property, then the field should be marked as `transient`. The rule verifies that the type of the field is the same as the result type of the getter. And that this type matches the type used in the setter. The rule also checks, that there is a no-arg or default constructor available. Optionally the rule also verifies, that the bean implements `java.io.Serializable`. While this is a requirement for the original JavaBeans specification, frameworks nowadays don't strictly require this anymore. In order to avoid many false positives in classes that are not beans, the rule needs to be explicitly enabled by configuring the property `packages`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#invalidjavabean\n```\n\n\npackage org.example.beans;\npublic class MyBean {        // <-- bean is not serializable, missing \"implements Serializable\"\n    private String label;    // <-- missing setter for property \"label\"\n\n    public String getLabel() {\n        return label;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "LawOfDemeter",
        "real_name": "category/java/design.xml/LawOfDemeter",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Potential violation of the law of Demeter ({0})",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The law of Demeter is a simple rule that says \"only talk to friends\". It forbids fetching data from \"too far away\", for some definition of distance, in order to reduce coupling between classes or objects of different levels of abstraction. The rule uses a notion of \"degree\", that quantifies how \"far\" an object is. Expressions with too high degree can only be used in certain ways. The degree of an expression is defined inductively: - The degree of `this` is 0 - The degree of a method parameter is 1 - The degree of a new object created in a method is 1 - The degree of a static variable is 1 - The degree of a field access expression like `expr.field` is the degree of `expr` plus 1 - The degree of a \"getter expression\" like `expr.getFoo()` is the degree of `expr` plus 1 - The degree of a \"transformation expression\" like `expr.withFoo(\"\")` is the degree of `expr` - The degree of a variable is the maximum degree of all the assignments that reach it Intuitively, the more you call getters, the more the degree increases. Eventually the degree reaches the report threshold (property `trustRadius`) and the expression is reported. The details of the calculation are more involved and make room for common patterns, like usage of collections (objects that are in a list or array have the same degree as their container), the builder pattern, and getters that do not appear to break a boundary of abstraction. Be aware that this rule is prone to many false-positives and low-priority warnings. You can increase the `trustRadius` property to reduce them drastically. The default `trustRadius` of 1 corresponds to the original law of Demeter (you're only allowed one getter call on untrusted values). Given some `trustRadius` value: - expressions of degree lower or equal to `trustRadius` are not reported - expressions of degree exactly `trustRadius + 1` are reported, unless they are only returned from the current method, or passed as argument to another method. Without this exception it would not be possible to extract any information from e.g. method parameters. - values of degree strictly greater than `trustRadius + 1` are not reported. The intuition is that to obtain a value of degree `n > 1` then you must use an expression of degree `n - 1`, so if you have `n > trustRadius + 1`, there you're using some value of degree `trustRadius + 1` that will be reported. See also the references: * Andrew Hunt, David Thomas, and Ward Cunningham. The Pragmatic Programmer. From Journeyman to Master. Addison-Wesley Longman, Amsterdam, October 1999.; * K.J. Lieberherr and I.M. Holland. Assuring good style for object-oriented programs. Software, IEEE, 6(5):38–48, 1989.; * <http://www.ccs.neu.edu/home/lieber/LoD.html> * <http://en.wikipedia.org/wiki/Law_of_Demeter>\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#lawofdemeter\n```\n\n\npublic class Foo {\n    /**\n     * This example will result in one violation.\n     */\n    public void example(Bar b) { // b has degree 1\n        // `b.getC()` has degree 2, it's breaking a boundary of abstraction and so is reported.\n        b.getC().doIt();\n        // To respect the law of Demeter, Bar should encapsulate its\n        // C member more properly, eg by exposing a method like this:\n        b.callDoItOnC();\n\n        // a constructor call, not a method call.\n        D d = new D();\n        // this method call is ok, because we have create the new\n        // instance of D locally.\n        d.doSomethingElse();\n    }\n}\n            \n        ```"
      },
      {
        "display_name": "LogicInversion",
        "real_name": "category/java/design.xml/LogicInversion",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Use opposite operator instead of the logic complement operator.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Use opposite operator instead of negating the whole expression with a logic complement operator.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#logicinversion\n```\n\n\npublic boolean bar(int a, int b) {\n\n    if (!(a == b)) { // use !=\n         return false;\n     }\n\n    if (!(a < b)) { // use >=\n         return false;\n    }\n\n    return true;\n}\n\n        ```"
      },
      {
        "display_name": "LoosePackageCoupling",
        "real_name": "category/java/design.xml/LoosePackageCoupling",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Use of ''{0}'' outside of package hierarchy ''{1}'' is not recommended; use recommended classes instead",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using classes from the configured package hierarchy outside of the package hierarchy, except when using one of the configured allowed classes.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#loosepackagecoupling\n```\n\n\npackage some.package;\n\nimport some.other.package.subpackage.subsubpackage.DontUseThisClass;\n\npublic class Bar {\n    DontUseThisClass boo = new DontUseThisClass();\n}\n\n        ```"
      },
      {
        "display_name": "NcssCount",
        "real_name": "category/java/design.xml/NcssCount",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} ''{1}'' has a NCSS line count of {2}.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule uses the NCSS (Non-Commenting Source Statements) metric to determine the number of lines of code in a class, method or constructor. NCSS ignores comments, blank lines, and only counts actual statements. For more details on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#NCSS %}.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#ncsscount\n```\n\n\nimport java.util.Collections;       // +0\nimport java.io.IOException;         // +0\n\nclass Foo {                         // +1, total Ncss = 12\n\n  public void bigMethod()           // +1\n      throws IOException {\n    int x = 0, y = 2;               // +1\n    boolean a = false, b = true;    // +1\n\n    if (a || b) {                   // +1\n      try {                         // +1\n        do {                        // +1\n          x += 2;                   // +1\n        } while (x < 12);\n\n        System.exit(0);             // +1\n      } catch (IOException ioe) {   // +1\n        throw new PatheticFailException(ioe); // +1\n      }\n    } else {\n      assert false;                 // +1\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "NPathComplexity",
        "real_name": "category/java/design.xml/NPathComplexity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} ''{1}'' has an NPath complexity of {2}, current threshold is {3}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The NPath complexity of a method is the number of acyclic execution paths through that method. While cyclomatic complexity counts the number of decision points in a method, NPath counts the number of full paths from the beginning to the end of the block of the method. That metric grows exponentially, as it multiplies the complexity of statements in the same block. For more details on the calculation, see the documentation {% jdoc java::lang.java.metrics.JavaMetrics#NPATH %}. A threshold of 200 is generally considered the point where measures should be taken to reduce complexity and increase readability.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#npathcomplexity\n```\n\n            \npublic class Foo {\n  public static void bar() { // Ncss = 252: reported!\n    boolean a, b = true;\n    try { // 2 * 2 + 2 = 6\n      if (true) { // 2\n        List buz = new ArrayList();\n      }\n\n      for(int i = 0; i < 19; i++) { // * 2\n        List buz = new ArrayList();\n      }\n    } catch(Exception e) {\n      if (true) { // 2\n        e.printStackTrace();\n      }\n    }\n\n    while (j++ < 20) { //  * 2\n      List buz = new ArrayList();\n    }\n\n    switch(j) { // * 7\n      case 1:\n      case 2: break;\n      case 3: j = 5; break;\n      case 4: if (b && a) { bar(); } break;\n      default: break;\n    }\n\n    do { // * 3\n        List buz = new ArrayList();\n    } while (a && j++ < 30);\n  }\n}\n \n        ```"
      },
      {
        "display_name": "SignatureDeclareThrowsException",
        "real_name": "category/java/design.xml/SignatureDeclareThrowsException",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A method/constructor should not explicitly throw java.lang.Exception",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A method/constructor shouldn't explicitly throw the generic java.lang.Exception, since it is unclear which exceptions that can be thrown from the methods. It might be difficult to document and understand such vague interfaces. Use either a class derived from RuntimeException or a checked exception.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#signaturedeclarethrowsexception\n```\n\n\npublic void foo() throws Exception {\n}\n\n        ```"
      },
      {
        "display_name": "SimplifiedTernary",
        "real_name": "category/java/design.xml/SimplifiedTernary",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This conditional expression can be simplified with || or &&",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports ternary expression with the form `condition ? literalBoolean : foo` or `condition ? foo : literalBoolean`. These expressions can be simplified as follows: * `condition ? true : expr` simplifies to `condition || expr` * `condition ? false : expr` simplifies to `!condition && expr` * `condition ? expr : true` simplifies to `!condition || expr` * `condition ? expr : false` simplifies to `condition && expr`\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#simplifiedternary\n```\n\n\npublic class Foo {\n    public boolean test() {\n        return condition ? true : something(); // can be as simple as return condition || something();\n    }\n\n    public void test2() {\n        final boolean value = condition ? false : something(); // can be as simple as value = !condition && something();\n    }\n\n    public boolean test3() {\n        return condition ? something() : true; // can be as simple as return !condition || something();\n    }\n\n    public void test4() {\n        final boolean otherValue = condition ? something() : false; // can be as simple as condition && something();\n    }\n\n    public boolean test5() {\n        return condition ? true : false; // can be as simple as return condition;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "SimplifyBooleanExpressions",
        "real_name": "category/java/design.xml/SimplifyBooleanExpressions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid unnecessary comparisons in boolean expressions",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid unnecessary comparisons in boolean expressions, they serve no purpose and impacts readability.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#simplifybooleanexpressions\n```\n\n\npublic class Bar {\n  // can be simplified to\n  // bar = isFoo();\n  private boolean bar = (isFoo() == true);\n\n  public isFoo() { return false;}\n}\n\n        ```"
      },
      {
        "display_name": "SimplifyBooleanReturns",
        "real_name": "category/java/design.xml/SimplifyBooleanReturns",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This if statement can be replaced by `{0}`",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid unnecessary if-then-else statements when returning a boolean. The result of the conditional test can be returned instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#simplifybooleanreturns\n```\n\n\npublic boolean isBarEqualTo(int x) {\n    if (bar == x) {      // this bit of code...\n        return true;\n    } else {\n        return false;\n    }\n}\n\npublic boolean isBarEqualTo(int x) {\n    return bar == x;    // can be replaced with this\n}\n\n        ```"
      },
      {
        "display_name": "SimplifyConditional",
        "real_name": "category/java/design.xml/SimplifyConditional",
        "category": "convention",
        "severity": "warning",
        "rule_title": "No need to check for null before an instanceof",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "No need to check for null before an instanceof; the instanceof keyword returns false when given a null argument.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#simplifyconditional\n```\n\n\nclass Foo {\n  void bar(Object x) {\n    if (x != null && x instanceof Bar) {\n      // just drop the \"x != null\" check\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "SingularField",
        "real_name": "category/java/design.xml/SingularField",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Perhaps ''{0}'' could be replaced by a local variable.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports fields which may be converted to a local variable. This is so because in every method where the field is used, it is assigned before it is first read. Hence, the value that the field had before the method call may not be observed, so it might as well not be stored in the enclosing object. Limitations: * We can only check private fields for now. * The rule is not aware of threading, so it may cause false positives in concurrent code. Such FPs are best handled by suppression (see also the `ignoredAnnotations` property).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#singularfield\n```\n\n\npublic class Foo {\n    private int x; // this will be reported\n\n    public int foo(int y) {\n       x = y + 5; // assigned before any read\n       return x;\n    }\n\n    public int fooOk(int y) {\n       int z = y + 5; // might as well be a local like here\n       return z;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "SwitchDensity",
        "real_name": "category/java/design.xml/SwitchDensity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A high ratio of statements to labels in a switch statement.  Consider refactoring.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A high ratio of statements to labels in a switch statement implies that the switch statement is overloaded. Consider moving the statements into new methods or creating subclasses based on the switch variable.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#switchdensity\n```\n\n\npublic class Foo {\n  public void bar(int x) {\n    switch (x) {\n      case 1: {\n        // lots of statements\n        break;\n      } case 2: {\n        // lots of statements\n        break;\n      }\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "TooManyFields",
        "real_name": "category/java/design.xml/TooManyFields",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Too many fields",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields, possibly through grouping related fields in new objects. For example, a class with individual city/state/zip fields could park them within a single Address field.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#toomanyfields\n```\n\n\npublic class Person {   // too many separate fields\n   int birthYear;\n   int birthMonth;\n   int birthDate;\n   float height;\n   float weight;\n}\n\npublic class Person {   // this is more manageable\n   Date birthDate;\n   BodyMeasurements measurements;\n}\n\n        ```"
      },
      {
        "display_name": "TooManyMethods",
        "real_name": "category/java/design.xml/TooManyMethods",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This class has too many methods, consider refactoring it.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A class with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#toomanymethods\n```\n```"
      },
      {
        "display_name": "UselessOverridingMethod",
        "real_name": "category/java/design.xml/UselessOverridingMethod",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Overriding method merely calls super",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The overriding method merely calls the same method defined in a superclass.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#uselessoverridingmethod\n```\n\n\npublic void foo(String bar) {\n    super.foo(bar);      // why bother overriding?\n}\n\npublic String foo() {\n    return super.foo();  // why bother overriding?\n}\n\n@Id\npublic Long getId() {\n    return super.getId();  // OK if 'ignoreAnnotations' is false, which is the default behavior\n}\n\n        ```"
      },
      {
        "display_name": "UseObjectForClearerAPI",
        "real_name": "category/java/design.xml/UseObjectForClearerAPI",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Rather than using a lot of String arguments, consider using a container object for those values.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When you write a public method, you should be thinking in terms of an API. If your method is public, it means other class will use it, therefore, you want (or need) to offer a comprehensive and evolutive API. If you pass a lot of information as a simple series of Strings, you may think of using an Object to represent all those information. You'll get a simpler API (such as doWork(Workload workload), rather than a tedious series of Strings) and more importantly, if you need at some point to pass extra data, you'll be able to do so by simply modifying or extending Workload without any modification to your API.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#useobjectforclearerapi\n```\n\n\npublic class MyClass {\n    public void connect(String username,\n        String pssd,\n        String databaseName,\n        String databaseAdress)\n        // Instead of those parameters object\n        // would ensure a cleaner API and permit\n        // to add extra data transparently (no code change):\n        // void connect(UserData data);\n    {\n\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseUtilityClass",
        "real_name": "category/java/design.xml/UseUtilityClass",
        "category": "convention",
        "severity": "warning",
        "rule_title": "All methods are static.  Consider using a utility class instead. Alternatively, you could add a private constructor or make the class abstract to silence this warning.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "For classes that only have static methods, consider making them utility classes. Note that this doesn't apply to abstract classes, since their subclasses may well include non-static methods. Also, if you want this class to be a utility class, remember to add a private constructor to prevent instantiation. (Note, that this use was known before PMD 5.1.0 as UseSingleton).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#useutilityclass\n```\n\n\npublic class MaybeAUtility {\n  public static void foo() {}\n  public static void bar() {}\n}\n\n        ```"
      },
      {
        "display_name": "MutableStaticState",
        "real_name": "category/java/design.xml/MutableStaticState",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Do not use non-final non-private static fields",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Non-private static fields should be made constants (or immutable references) by declaring them final. Non-private non-final static fields break encapsulation and can lead to hard to find bugs, since these fields can be modified from anywhere within the program. Callers can trivially access and modify non-private non-final static fields. Neither accesses nor modifications can be guarded against, and newly set values cannot be validated. If you are using this rule, then you don't need this rule {% rule java/errorprone/AssignmentToNonFinalStatic %}.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_design.html#mutablestaticstate\n```\n\n            \npublic class Greeter { public static Foo foo = new Foo(); ... }       // avoid this\npublic class Greeter { public static final Foo FOO = new Foo(); ... } // use this instead\n\n        ```"
      },
      {
        "display_name": "AtLeastOneConstructor",
        "real_name": "category/java/codestyle.xml/AtLeastOneConstructor",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Each class should declare at least one constructor",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Each non-static class should declare at least one constructor. Classes with solely static members are ignored, refer to [UseUtilityClassRule](pmd_rules_java_design.html#useutilityclass) to detect those.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#atleastoneconstructor\n```\n\n\npublic class Foo {\n   // missing constructor\n  public void doSomething() { ... }\n  public void doOtherThing { ... }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidDollarSigns",
        "real_name": "category/java/codestyle.xml/AvoidDollarSigns",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using dollar signs in variable/method/class/interface names",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using dollar signs in variable/method/class/interface names.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#avoiddollarsigns\n```\n\n\npublic class Fo$o {  // not a recommended name\n}\n\n        ```"
      },
      {
        "display_name": "AvoidProtectedFieldInFinalClass",
        "real_name": "category/java/codestyle.xml/AvoidProtectedFieldInFinalClass",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid protected fields in a final class.  Change to private or package access.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Do not use protected fields in final classes since they cannot be subclassed. Clarify your intent by using private or package access modifiers instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#avoidprotectedfieldinfinalclass\n```\n\n\npublic final class Bar {\n  private int x;\n  protected int y;  // bar cannot be subclassed, so is y really private or package visible?\n  Bar() {}\n}\n\n        ```"
      },
      {
        "display_name": "AvoidProtectedMethodInFinalClassNotExtending",
        "real_name": "category/java/codestyle.xml/AvoidProtectedMethodInFinalClassNotExtending",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid protected methods in a final class that doesn't extend anything other than Object.  Change to private or package access.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Do not use protected methods in most final classes since they cannot be subclassed. This should only be allowed in final classes that extend other classes with protected methods (whose visibility cannot be reduced). Clarify your intent by using private or package access modifiers instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#avoidprotectedmethodinfinalclassnotextending\n```\n\n\npublic final class Foo {\n  private int bar() {}\n  protected int baz() {} // Foo cannot be subclassed, and doesn't extend anything, so is baz() really private or package visible?\n}\n \n        ```"
      },
      {
        "display_name": "AvoidUsingNativeCode",
        "real_name": "category/java/codestyle.xml/AvoidUsingNativeCode",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The use of native code is not recommended.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Unnecessary reliance on Java Native Interface (JNI) calls directly reduces application portability and increases the maintenance burden.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#avoidusingnativecode\n```\n\n\npublic class SomeJNIClass {\n\n     public SomeJNIClass() {\n         System.loadLibrary(\"nativelib\");\n     }\n\n     static {\n         System.loadLibrary(\"nativelib\");\n     }\n\n     public void invalidCallsInMethod() throws SecurityException, NoSuchMethodException {\n         System.loadLibrary(\"nativelib\");\n     }\n}\n\n        ```"
      },
      {
        "display_name": "BooleanGetMethodName",
        "real_name": "category/java/codestyle.xml/BooleanGetMethodName",
        "category": "convention",
        "severity": "info",
        "rule_title": "A 'getX()' method which returns a boolean or Boolean should be named 'isX()'",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Methods that return boolean or Boolean results should be named as predicate statements to denote this. I.e., 'isReady()', 'hasValues()', 'canCommit()', 'willFail()', etc. Avoid the use of the 'get' prefix for these methods.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#booleangetmethodname\n```\n\n            \npublic boolean getFoo();            // bad\npublic Boolean getFoo();            // bad\npublic boolean isFoo();             // ok\npublic Boolean isFoo();             // ok\npublic boolean getFoo(boolean bar); // ok, unless checkParameterizedMethods=true\n\n        ```"
      },
      {
        "display_name": "CallSuperInConstructor",
        "real_name": "category/java/codestyle.xml/CallSuperInConstructor",
        "category": "convention",
        "severity": "warning",
        "rule_title": "It is a good practice to call super() in a constructor",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "It is a good practice to call super() in a constructor. If super() is not called but another constructor (such as an overloaded constructor) is called, this rule will not report it.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#callsuperinconstructor\n```\n\n\npublic class Foo extends Bar{\n  public Foo() {\n   // call the constructor of Bar\n   super();\n  }\n public Foo(int code) {\n  // do something with code\n   this();\n   // no problem with this\n  }\n}\n\n        ```"
      },
      {
        "display_name": "ClassNamingConventions",
        "real_name": "category/java/codestyle.xml/ClassNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for type declarations. This rule reports type declarations which do not match the regex that applies to their specific kind (e.g. enum or interface). Each regex can be configured through properties. By default, this rule uses the standard Java naming convention (Pascal case). The rule can detect utility classes and enforce a different naming convention on those. E.g. setting the property `utilityClassPattern` to `[A-Z][a-zA-Z0-9]+(Utils?|Helper|Constants)` reports any utility class, whose name does not end in \"Util(s)\", \"Helper\" or \"Constants\". For this rule, a utility class is defined as: a concrete class that does not inherit from a super class or implement any interface and only has static fields or methods. This rule detects test classes using the following convention: Test classes are top-level classes, that either inherit from JUnit 3 TestCase or have at least one method annotated with the Test annotations from JUnit4/5 or TestNG.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#classnamingconventions\n```\n\n\n// This is Pascal case, the recommended naming convention in Java\n// Note that the default values of this rule don't allow underscores\n// or accented characters in type names\npublic class FooBar {}\n\n// You may want abstract classes to be named 'AbstractXXX',\n// in which case you can customize the regex for abstract\n// classes to 'Abstract[A-Z]\\w+'\npublic abstract class Thing {}\n\n// This class doesn't respect the convention, and will be flagged\npublic class Éléphant {}\n\n        ```"
      },
      {
        "display_name": "CommentDefaultAccessModifier",
        "real_name": "category/java/codestyle.xml/CommentDefaultAccessModifier",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Missing commented default access modifier on {0} ''{1}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "To avoid mistakes if we want that an Annotation, Class, Enum, Method, Constructor or Field have a default access modifier we must add a comment at the beginning of its declaration. By default, the comment must be `/* default */` or `/* package */`, if you want another, you have to provide a regular expression. This rule ignores by default all cases that have a `@VisibleForTesting` annotation or any JUnit5/TestNG annotation. Use the property \"ignoredAnnotations\" to customize the recognized annotations.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#commentdefaultaccessmodifier\n```\n\n\npublic class Foo {\n    final String stringValue = \"some string\";\n    String getString() {\n       return stringValue;\n    }\n\n    class NestedFoo {\n    }\n}\n\n// should be\npublic class Foo {\n    /* default */ final String stringValue = \"some string\";\n    /* default */ String getString() {\n       return stringValue;\n    }\n\n    /* default */ class NestedFoo {\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ConfusingTernary",
        "real_name": "category/java/codestyle.xml/ConfusingTernary",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid if (x != y) ..; else ..;",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid negation within an \"if\" expression with an \"else\" clause. For example, rephrase: `if (x != y) diff(); else same();` as: `if (x == y) same(); else diff();`. Most \"if (x != y)\" cases without an \"else\" are often return cases, so consistent use of this rule makes the code easier to read. Also, this resolves trivial ordering problems, such as \"does the error case go first?\" or \"does the common case go first?\".\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#confusingternary\n```\n\n\nboolean bar(int x, int y) {\n    return (x != y) ? diff : same;\n}\n\n        ```"
      },
      {
        "display_name": "ControlStatementBraces",
        "real_name": "category/java/codestyle.xml/ControlStatementBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This statement should have braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Enforce a policy for braces on control statements. It is recommended to use braces on 'if ... else' statements and loop statements, even if they are optional. This usually makes the code clearer, and helps prepare the future when you need to add another statement. That said, this rule lets you control which statements are required to have braces via properties. From 6.2.0 on, this rule supersedes WhileLoopMustUseBraces, ForLoopMustUseBraces, IfStmtMustUseBraces, and IfElseStmtMustUseBraces.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#controlstatementbraces\n```\n\n            \nwhile (true)    // not recommended\n  x++;\n\nwhile (true) {  // preferred approach\n  x++;\n}\n\n        ```"
      },
      {
        "display_name": "EmptyMethodInAbstractClassShouldBeAbstract",
        "real_name": "category/java/codestyle.xml/EmptyMethodInAbstractClassShouldBeAbstract",
        "category": "convention",
        "severity": "warning",
        "rule_title": "An empty method in an abstract class should be abstract instead",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty or auto-generated methods in an abstract class should be tagged as abstract. This helps to remove their inapproprate usage by developers who should be implementing their own versions in the concrete subclasses.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#emptymethodinabstractclassshouldbeabstract\n```\n\n\npublic abstract class ShouldBeAbstract {\n    public Object couldBeAbstract() {\n        // Should be abstract method ?\n        return null;\n    }\n\n    public void couldBeAbstract() {\n    }\n}\n\n        ```"
      },
      {
        "display_name": "EmptyControlStatement",
        "real_name": "category/java/codestyle.xml/EmptyControlStatement",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This control statement has an empty branch",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports control statements whose body is empty, as well as empty initializers. The checked code constructs are the following: - bodies of `try` statements - `finally` clauses of `try` statements - `switch` statements - `synchronized` statements - `if` statements - loop statements: `while`, `for`, `do .. while` - initializers - blocks used as statements (for scoping) This rule replaces the rules EmptyFinallyBlock, EmptyIfStmt, EmptyInitializer, EmptyStatementBlock, EmptySwitchStatements, EmptySynchronizedBlock, EmptyTryBlock, and EmptyWhileStmt. Notice that {% rule java/errorprone/EmptyCatchBlock %} is still an independent rule. EmptyStatementNotInLoop is replaced by {% rule java/codestyle/UnnecessarySemicolon %}.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#emptycontrolstatement\n```\n\n\nclass Foo {\n    {\n        if (true); // empty if statement\n        if (true) { // empty as well\n        }\n    }\n\n    {} // empty initializer\n}\n\n        ```"
      },
      {
        "display_name": "ExtendsObject",
        "real_name": "category/java/codestyle.xml/ExtendsObject",
        "category": "convention",
        "severity": "info",
        "rule_title": "No need to explicitly extend Object.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "No need to explicitly extend Object.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#extendsobject\n```\n\n\npublic class Foo extends Object {     // not required\n}\n\n        ```"
      },
      {
        "display_name": "FieldDeclarationsShouldBeAtStartOfClass",
        "real_name": "category/java/codestyle.xml/FieldDeclarationsShouldBeAtStartOfClass",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Fields should be declared at the top of the class, before any method declarations, constructors, initializers or inner classes.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#fielddeclarationsshouldbeatstartofclass\n```\n\n\npublic class HelloWorldBean {\n\n  // Field declared before methods / inner classes - OK\n  private String _thing;\n\n  public String getMessage() {\n    return \"Hello World!\";\n  }\n\n  // Field declared after methods / inner classes - avoid this\n  private String _fieldInWrongLocation;\n}\n\n        ```"
      },
      {
        "display_name": "FieldNamingConventions",
        "real_name": "category/java/codestyle.xml/FieldNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for field declarations. This rule reports variable declarations which do not match the regex that applies to their specific kind ---e.g. constants (static final), enum constant, final field. Each regex can be configured through properties. By default this rule uses the standard Java naming convention (Camel case), and uses the ALL_UPPER convention for constants and enum constants.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#fieldnamingconventions\n```\n\n            \n            class Foo {\n                int myField = 1; // This is in camel case, so it's ok\n                int my_Field = 1; // This contains an underscore, it's not ok by default\n                                  // but you may allow it, or even require the \"my_\" prefix\n\n                final int FinalField = 1; // you may configure a different convention for final fields,\n                                          // e.g. here PascalCase: [A-Z][a-zA-Z0-9]*\n\n                interface Interface {\n                    double PI = 3.14; // interface \"fields\" use the constantPattern property\n                }\n\n                enum AnEnum {\n                    ORG, NET, COM; // These use a separate property but are set to ALL_UPPER by default\n                }\n            }\n            \n        ```"
      },
      {
        "display_name": "FinalParameterInAbstractMethod",
        "real_name": "category/java/codestyle.xml/FinalParameterInAbstractMethod",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Final parameter in abstract method",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Declaring a method parameter as final for an interface method is useless because the implementation may choose to not respect it.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#finalparameterinabstractmethod\n```\n\n            \npublic interface MyInterface {\n  void process(final Object arg); // Avoid using final here\n}\n\n        ```"
      },
      {
        "display_name": "ForLoopShouldBeWhileLoop",
        "real_name": "category/java/codestyle.xml/ForLoopShouldBeWhileLoop",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This for loop could be simplified to a while loop",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Some for loops can be simplified to while loops, this makes them more concise.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#forloopshouldbewhileloop\n```\n\n\npublic class Foo {\n    void bar() {\n        for (;true;) true; // No Init or Update part, may as well be: while (true)\n    }\n}\n\n        ```"
      },
      {
        "display_name": "FormalParameterNamingConventions",
        "real_name": "category/java/codestyle.xml/FormalParameterNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for formal parameters of methods and lambdas. This rule reports formal parameters which do not match the regex that applies to their specific kind (e.g. lambda parameter, or final formal parameter). Each regex can be configured through properties. By default this rule uses the standard Java naming convention (Camel case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#formalparameternamingconventions\n```\n\n            \n            class Foo {\n\n                abstract void bar(int myInt); // This is Camel case, so it's ok\n\n                void bar(int my_i) { // this will be reported\n\n                }\n\n                void lambdas() {\n\n                    // lambdas parameters can be configured separately\n                    Consumer<String> lambda1 = s_str -> { };\n\n                    // lambda parameters with an explicit type can be configured separately\n                    Consumer<String> lambda1 = (String str) -> { };\n\n                }\n\n            }\n            \n        ```"
      },
      {
        "display_name": "GenericsNaming",
        "real_name": "category/java/codestyle.xml/GenericsNaming",
        "category": "convention",
        "severity": "info",
        "rule_title": "Generics names should be a one letter long and upper case.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Names for references to generic values should be limited to a single uppercase letter.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#genericsnaming\n```\n\n\npublic interface GenericDao<E extends BaseModel, K extends Serializable> extends BaseDao {\n    // This is ok...\n}\n\npublic interface GenericDao<E extends BaseModel, K extends Serializable> {\n    // Also this\n}\n\npublic interface GenericDao<e extends BaseModel, K extends Serializable> {\n    // 'e' should be an 'E'\n}\n\npublic interface GenericDao<EF extends BaseModel, K extends Serializable> {\n   // 'EF' is not ok.\n}\n\n        ```"
      },
      {
        "display_name": "IdenticalCatchBranches",
        "real_name": "category/java/codestyle.xml/IdenticalCatchBranches",
        "category": "convention",
        "severity": "warning",
        "rule_title": "''catch'' branch identical to ''{0}'' branch",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Identical `catch` branches use up vertical space and increase the complexity of code without adding functionality. It's better style to collapse identical branches into a single multi-catch branch.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#identicalcatchbranches\n```\n\n            \ntry {\n    // do something\n} catch (IllegalArgumentException e) {\n    throw e;\n} catch (IllegalStateException e) { // Can be collapsed into the previous block\n    throw e;\n}\n\ntry {\n    // do something\n} catch (IllegalArgumentException | IllegalStateException e) { // This is better\n    throw e;\n}\n            \n        ```"
      },
      {
        "display_name": "LambdaCanBeMethodReference",
        "real_name": "category/java/codestyle.xml/LambdaCanBeMethodReference",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Lambda expression could be written as a method reference: `{0}`",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule reports lambda expressions that can be written more succinctly as a method reference. This is the case if the lambda is an expression lambda that only calls one method, passing the entire lambda parameter list in order to the method. For instance: ```java x -> Foo.call(x) // can be Foo::call x -> call(x) // can be this::call, if call is an instance method (x, y, z) -> call(x, y, z) // can be this::call () -> foo.get() // can be foo::get x -> x.foo() // can be XType::foo (where XType is the type of x) ``` In some cases rewriting a lambda to a method reference can change the semantics of the code. For instance in `(x) -> someVar.call(x)`, the invocation of the lambda may produce a NullPointerException (NPE) if `someVar` is null. The method reference `someVar::call` will also NPE if `someVar` is null, but it will do so at the point the method reference is created, while the lambda is created without error and its NPE is only thrown if the lambda is invoked (which may be never). Code should probably not rely on this subtle semantic difference, therefore these potentially problematic lambdas are also reported by default. This behavior can be disabled by setting the property `ignoreIfMayNPE` to `true`. The property `ignoreIfMayNPE` is true by default. By default, calls whose receiver is itself a method call are ignored, because they could cause side effects. This may be changed by setting the property `ignoreIfReceiverIsMethod` to `false`. Scope limitations: - This rule will not report lambdas of the form `x -> new CtorCall().something(x)`, because the semantics of the method reference would be to create a single new object, while the lambda creates one object per invocation. - The rule cannot know if the qualifier of a method call performs side effects. This means `(x) -> sideEffectingMethod().foo(x)` will be reported. Suppress the warning in this case.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#lambdacanbemethodreference\n```\n\n            \n            import java.util.stream.Stream;\n\n            public class LambdaCanBeMethodReference {\n                static {\n                    Stream.of(\"abc\", \"d\")\n                            .mapToInt(s -> s.length()) // could be String::length\n                            .reduce((x, y) -> Integer.sum(x, y)) // could be Integer::sum\n                            .getAsInt();\n                }\n            }\n            \n        ```"
      },
      {
        "display_name": "LinguisticNaming",
        "real_name": "category/java/codestyle.xml/LinguisticNaming",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Linguistics Antipattern - Method name and return type is inconsistent linguistically",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule finds Linguistic Naming Antipatterns. It checks for fields, that are named, as if they should be boolean but have a different type. It also checks for methods, that according to their name, should return a boolean, but don't. Further, it checks, that getters return something and setters won't. Finally, it checks that methods, that start with \"to\" - so called transform methods - actually return something, since according to their name, they should convert or transform one object into another. There is additionally an option, to check for methods that contain \"To\" in their name - which are also transform methods. However, this is disabled by default, since this detection is prone to false positives. For more information, see [Linguistic Antipatterns - What They Are and How Developers Perceive Them](https://doi.org/10.1007/s10664-014-9350-8).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#linguisticnaming\n```\n\n\npublic class LinguisticNaming {\n    int isValid;    // the field name indicates a boolean, but it is an int.\n    boolean isTrue; // correct type of the field\n\n    void myMethod() {\n        int hasMoneyLocal;      // the local variable name indicates a boolean, but it is an int.\n        boolean hasSalaryLocal; // correct naming and type\n    }\n\n    // the name of the method indicates, it is a boolean, but the method returns an int.\n    int isValid() {\n        return 1;\n    }\n    // correct naming and return type\n    boolean isSmall() {\n        return true;\n    }\n\n    // the name indicates, this is a setter, but it returns something\n    int setName() {\n        return 1;\n    }\n\n    // the name indicates, this is a getter, but it doesn't return anything\n    void getName() {\n        // nothing to return?\n    }\n\n    // the name indicates, it transforms an object and should return the result\n    void toDataType() {\n        // nothing to return?\n    }\n    // the name indicates, it transforms an object and should return the result\n    void grapeToWine() {\n        // nothing to return?\n    }\n}\n\n        ```"
      },
      {
        "display_name": "LocalHomeNamingConvention",
        "real_name": "category/java/codestyle.xml/LocalHomeNamingConvention",
        "category": "convention",
        "severity": "info",
        "rule_title": "The Local Home interface of a Session EJB should be suffixed by 'LocalHome'",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The Local Home interface of a Session EJB should be suffixed by 'LocalHome'.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#localhomenamingconvention\n```\n\n\npublic interface MyBeautifulLocalHome extends javax.ejb.EJBLocalHome {} // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBLocalHome {}  // non-standard name\n\n        ```"
      },
      {
        "display_name": "LocalInterfaceSessionNamingConvention",
        "real_name": "category/java/codestyle.xml/LocalInterfaceSessionNamingConvention",
        "category": "convention",
        "severity": "info",
        "rule_title": "The Local Interface of a Session EJB should be suffixed by 'Local'",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The Local Interface of a Session EJB should be suffixed by 'Local'.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#localinterfacesessionnamingconvention\n```\n\n\npublic interface MyLocal extends javax.ejb.EJBLocalObject {}                // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBLocalObject {}    // non-standard name\n\n        ```"
      },
      {
        "display_name": "LocalVariableCouldBeFinal",
        "real_name": "category/java/codestyle.xml/LocalVariableCouldBeFinal",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Local variable ''{0}'' could be declared final",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A local variable assigned only once can be declared final.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#localvariablecouldbefinal\n```\n\n\npublic class Bar {\n    public void foo () {\n    String txtA = \"a\";          // if txtA will not be assigned again it is better to do this:\n    final String txtB = \"b\";\n    }\n}\n\n        ```"
      },
      {
        "display_name": "LocalVariableNamingConventions",
        "real_name": "category/java/codestyle.xml/LocalVariableNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for local variable declarations and other locally-scoped variables. This rule reports variable declarations which do not match the regex that applies to their specific kind (e.g. final variable, or catch-clause parameter). Each regex can be configured through properties. By default this rule uses the standard Java naming convention (Camel case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#localvariablenamingconventions\n```\n\n            \n            class Foo {\n                void bar() {\n                    int localVariable = 1; // This is in camel case, so it's ok\n                    int local_variable = 1; // This will be reported unless you change the regex\n\n                    final int i_var = 1; // final local variables can be configured separately\n\n                    try {\n                        foo();\n                    } catch (IllegalArgumentException e_illegal) {\n                        // exception block parameters can be configured separately\n                    }\n\n                }\n            }\n            \n        ```"
      },
      {
        "display_name": "LongVariable",
        "real_name": "category/java/codestyle.xml/LongVariable",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid excessively long variable names like {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Fields, formal arguments, or local variable names that are too long can make the code difficult to follow.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#longvariable\n```\n\n\npublic class Something {\n    int reallyLongIntName = -3;             // VIOLATION - Field\n    public static void main( String argumentsList[] ) { // VIOLATION - Formal\n        int otherReallyLongName = -5;       // VIOLATION - Local\n        for (int interestingIntIndex = 0;   // VIOLATION - For\n             interestingIntIndex < 10;\n             interestingIntIndex ++ ) {\n    }\n}\n\n        ```"
      },
      {
        "display_name": "MDBAndSessionBeanNamingConvention",
        "real_name": "category/java/codestyle.xml/MDBAndSessionBeanNamingConvention",
        "category": "convention",
        "severity": "info",
        "rule_title": "SessionBean or MessageBean should be suffixed by Bean",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The EJB Specification states that any MessageDrivenBean or SessionBean should be suffixed by 'Bean'.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#mdbandsessionbeannamingconvention\n```\n\n\npublic class SomeBean implements SessionBean{}                  // proper name\n\npublic class MissingTheProperSuffix implements SessionBean {}   // non-standard name\n\n        ```"
      },
      {
        "display_name": "MethodArgumentCouldBeFinal",
        "real_name": "category/java/codestyle.xml/MethodArgumentCouldBeFinal",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Parameter ''{0}'' is not assigned and could be declared final",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports method and constructor parameters that can be made final because they are never reassigned within the body of the method. This rule ignores unused parameters so as not to overlap with the rule {% rule java/bestpractices/UnusedFormalParameter %}. It will also ignore the parameters of abstract methods.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#methodargumentcouldbefinal\n```\n\n\nclass Foo {\n    // reported, parameter can be declared final\n    public String foo1(String param) {\n        return param;\n    }\n    // not reported, parameter is declared final\n    public String foo2(final String param) {\n        return param.trim();\n    }\n    // not reported because param is unused\n    public String unusedParam(String param) {\n        return \"abc\";\n    }\n}\n\n        ```"
      },
      {
        "display_name": "MethodNamingConventions",
        "real_name": "category/java/codestyle.xml/MethodNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for method declarations. This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. JUnit test or native method). Each regex can be configured through properties. By default this rule uses the standard Java naming convention (Camel case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#methodnamingconventions\n```\n\n\npublic class Foo {\n    public void fooStuff() {\n    }\n}\n\n        ```"
      },
      {
        "display_name": "NoPackage",
        "real_name": "category/java/codestyle.xml/NoPackage",
        "category": "convention",
        "severity": "warning",
        "rule_title": "All classes, interfaces, enums and annotations must belong to a named package",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects when a class, interface, enum or annotation does not have a package definition.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#nopackage\n```\n\n\n// no package declaration\npublic class ClassInDefaultPackage {\n}\n\n        ```"
      },
      {
        "display_name": "UseUnderscoresInNumericLiterals",
        "real_name": "category/java/codestyle.xml/UseUnderscoresInNumericLiterals",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Number {0} should separate every third digit with an underscore",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Since Java 1.7, numeric literals can use underscores to separate digits. This rule enforces that numeric literals above a certain length use these underscores to increase readability. The rule only supports decimal (base 10) literals for now. The acceptable length under which literals are not required to have underscores is configurable via a property. Even under that length, underscores that are misplaced (not making groups of 3 digits) are reported.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#useunderscoresinnumericliterals\n```\n\n            \npublic class Foo {\n    private int num = 1000000; // should be 1_000_000\n}\n\n        ```"
      },
      {
        "display_name": "OnlyOneReturn",
        "real_name": "category/java/codestyle.xml/OnlyOneReturn",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A method should have only one exit point, and that should be the last statement in the method",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A method should have only one exit point, and that should be the last statement in the method.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#onlyonereturn\n```\n\n\npublic class OneReturnOnly1 {\n  public String foo(int x) {\n    if (x > 0) {\n      return \"hey\";   // first exit\n    }\n    return \"hi\";    // second exit\n  }\n}\n\n        ```"
      },
      {
        "display_name": "PackageCase",
        "real_name": "category/java/codestyle.xml/PackageCase",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Package name contains upper case characters",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects when a package definition contains uppercase characters.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#packagecase\n```\n\n\npackage com.MyCompany;  // should be lowercase name\n\npublic class SomeClass {\n}\n\n        ```"
      },
      {
        "display_name": "PrematureDeclaration",
        "real_name": "category/java/codestyle.xml/PrematureDeclaration",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Declaration of ''{0}'' can be moved closer to its usages",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Checks for variables that are defined before they might be used. A declaration is deemed to be premature if there are some statements that may return or throw an exception between the time the variable is declared and the time it is first read. Some variables cannot be declared close to their first usage because of side-effects occurring before they're first used. We try to avoid reporting those by considering most method and constructor invocations to be impure. See the second example. Note that this rule is meant to improve code readability but is not an optimization. A smart JIT will not care whether the variable is declared prematurely or not, as it can reorder code.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#prematuredeclaration\n```\n\n\npublic int getLength(String[] strings) {\n\n    int length = 0; // could be moved closer to the loop\n\n    if (strings == null || strings.length == 0) return 0;\n\n    for (String str : strings) {\n        length += str.length();\n    }\n\n    return length;\n}\n\n        ```"
      },
      {
        "display_name": "RemoteInterfaceNamingConvention",
        "real_name": "category/java/codestyle.xml/RemoteInterfaceNamingConvention",
        "category": "convention",
        "severity": "info",
        "rule_title": "Remote Interface of a Session EJB should NOT be suffixed",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Remote Interface of a Session EJB should not have a suffix.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#remoteinterfacenamingconvention\n```\n\n\n/* Poor Session suffix */\npublic interface BadSuffixSession extends javax.ejb.EJBObject {}\n\n/* Poor EJB suffix */\npublic interface BadSuffixEJB extends javax.ejb.EJBObject {}\n\n/* Poor Bean suffix */\npublic interface BadSuffixBean extends javax.ejb.EJBObject {}\n\n        ```"
      },
      {
        "display_name": "RemoteSessionInterfaceNamingConvention",
        "real_name": "category/java/codestyle.xml/RemoteSessionInterfaceNamingConvention",
        "category": "convention",
        "severity": "info",
        "rule_title": "Remote Home interface of a Session EJB should be suffixed by 'Home'",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A Remote Home interface type of a Session EJB should be suffixed by 'Home'.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#remotesessioninterfacenamingconvention\n```\n\n\npublic interface MyBeautifulHome extends javax.ejb.EJBHome {}       // proper name\n\npublic interface MissingProperSuffix extends javax.ejb.EJBHome {}   // non-standard name\n\n        ```"
      },
      {
        "display_name": "ShortClassName",
        "real_name": "category/java/codestyle.xml/ShortClassName",
        "category": "convention",
        "severity": "info",
        "rule_title": "Avoid short class names like {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Short Classnames with fewer than e.g. five characters are not recommended.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#shortclassname\n```\n\n\npublic class Foo {\n}\n\n        ```"
      },
      {
        "display_name": "ShortMethodName",
        "real_name": "category/java/codestyle.xml/ShortMethodName",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using short method names",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Method names that are very short are not helpful to the reader.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#shortmethodname\n```\n\n\npublic class ShortMethod {\n    public void a( int i ) { // Violation\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ShortVariable",
        "real_name": "category/java/codestyle.xml/ShortVariable",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid variables with short names like {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Fields, local variables, enum constant names or parameter names that are very short are not helpful to the reader.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#shortvariable\n```\n\n\npublic class Something {\n    private int q = 15;                         // field - too short\n    public static void main( String as[] ) {    // formal arg - too short\n        int r = 20 + q;                         // local var - too short\n        for (int i = 0; i < 10; i++) {          // not a violation (inside 'for' loop)\n            r += q;\n        }\n        for (Integer i : numbers) {             // not a violation (inside 'for-each' loop)\n            r += q;\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "TooManyStaticImports",
        "real_name": "category/java/codestyle.xml/TooManyStaticImports",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Too many static imports may lead to messy code",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "If you overuse the static import feature, it can make your program unreadable and unmaintainable, polluting its namespace with all the static members you import. Readers of your code (including you, a few months after you wrote it) will not know which class a static member comes from (Sun 1.5 Language Guide).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#toomanystaticimports\n```\n\n\nimport static Lennon;\nimport static Ringo;\nimport static George;\nimport static Paul;\nimport static Yoko; // Too much !\n\n        ```"
      },
      {
        "display_name": "UnnecessaryAnnotationValueElement",
        "real_name": "category/java/codestyle.xml/UnnecessaryAnnotationValueElement",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid the use of value in annotations when it's the only element",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid the use of value in annotations when it's the only element.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessaryannotationvalueelement\n```\n\n            \n@TestClassAnnotation(value = \"TEST\")\npublic class Foo {\n\n    @TestMemberAnnotation(value = \"TEST\")\n    private String y;\n\n    @TestMethodAnnotation(value = \"TEST\")\n    public void bar() {\n        int x = 42;\n        return;\n    }\n}\n\n// should be\n\n@TestClassAnnotation(\"TEST\")\npublic class Foo {\n\n    @TestMemberAnnotation(\"TEST\")\n    private String y;\n\n    @TestMethodAnnotation(\"TEST\")\n    public void bar() {\n        int x = 42;\n        return;\n    }\n}\n\n\n        ```"
      },
      {
        "display_name": "UnnecessaryBoxing",
        "real_name": "category/java/codestyle.xml/UnnecessaryBoxing",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Unnecessary {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports explicit boxing and unboxing conversions that may safely be removed, either because they would be inserted by the compiler automatically, or because they're semantically a noop (eg unboxing a value to rebox it immediately). Note that this only handles boxing and unboxing conversions occurring through calls to `valueOf` or one of the `intValue`, `byteValue`, etc. methods. Casts that command a conversion are reported by {% rule UnnecessaryCast %} instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessaryboxing\n```\n\n{\n        // Instead of\n        Integer integer = Integer.valueOf(2);\n        // you may just write\n        Integer integer = 2;\n\n        int i = integer.intValue(); // similarly for unboxing\n\n        // Instead of\n        int x = Integer.valueOf(\"42\");\n        // you may just write\n        int x = Integer.parseInt(\"42\");\n}\n            \n        ```"
      },
      {
        "display_name": "UnnecessaryCast",
        "real_name": "category/java/codestyle.xml/UnnecessaryCast",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Unnecessary cast ({0})",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects casts which could be removed as the operand of the cast is already suitable for the context type. For instance, in the following: ``` Object context = (Comparable) \"o\"; ``` The cast is unnecessary. This is because `String` already is a subtype of both `Comparable` and `Object`. This will also flag casts that can be avoided because of the autoboxing feature of Java 5. ``` Integer integer = (Integer) 1; ``` The literal would be autoboxed to `Integer` anyway.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessarycast\n```\n\n\nimport java.util.function.Function;\nclass SomeClass {\n   static {\n      Object o; long l; int i; Integer boxedInt;\n\n      // reference conversions\n\n      o = (Object) new SomeClass();      // unnecessary\n      o = (SomeClass) o;                 // necessary (narrowing cast)\n      o = (Comparable<String>) \"string\"; // unnecessary\n\n      // primitive conversions\n\n      l = (long) 2;   // unnecessary\n      l = (long) 2.0; // necessary (narrowing cast)\n      l = (byte) i;   // necessary (narrowing cast)\n\n      // boxing/unboxing casts (since java 5)\n\n      o = (Integer) 3;    // unnecessary (autoboxing would apply)\n      o = (long) 3;       // necessary (would be boxed to Long)\n      l = (int) boxedInt; // necessary (cannot cast Integer to long)\n\n      // casts that give a target type to a lambda/ method ref are necessary\n\n      o = (Function<Integer, String>) Integer::toString; // necessary (no target type)\n   }\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryConstructor",
        "real_name": "category/java/codestyle.xml/UnnecessaryConstructor",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid unnecessary constructors - the compiler will generate these for you",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule detects when a constructor is not necessary; i.e., when there is only one constructor and the constructor is identical to the default constructor. The default constructor should has same access modifier as the declaring class. In an enum type, the default constructor is implicitly private.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessaryconstructor\n```\n\n\npublic class Foo {\n  public Foo() {}\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryFullyQualifiedName",
        "real_name": "category/java/codestyle.xml/UnnecessaryFullyQualifiedName",
        "category": "convention",
        "severity": "info",
        "rule_title": "Unnecessary qualifier ''{0}'': ''{1}'' is already in scope{2}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Import statements allow the use of non-fully qualified names. The use of a fully qualified name which is covered by an import statement is redundant. Consider using the non-fully qualified name.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessaryfullyqualifiedname\n```\n\n\nimport java.util.List;\n\npublic class Foo {\n    private java.util.List list1;   // Unnecessary FQN\n    private List list2;             // More appropriate given import of 'java.util.List'\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryImport",
        "real_name": "category/java/codestyle.xml/UnnecessaryImport",
        "category": "convention",
        "severity": "info",
        "rule_title": "Unnecessary import ''{0}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports import statements that can be removed. They are either unused, duplicated, or the members they import are already implicitly in scope, because they're in java.lang, or the current package. If some imports cannot be resolved, for instance because you run PMD with an incomplete auxiliary classpath, some imports may be conservatively marked as used even if they're not to avoid false positives.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessaryimport\n```\n\n\n            import java.io.File;            // not used, can be removed\n            import java.util.Collections;   // used below\n            import java.util.*;             // so this one is not used\n\n            import java.lang.Object;        // imports from java.lang, unnecessary\n            import java.lang.Object;        // duplicate, unnecessary\n\n            public class Foo {\n                static Object emptyList() {\n                    return Collections.emptyList();\n                }\n            }\n            \n        ```"
      },
      {
        "display_name": "UnnecessaryLocalBeforeReturn",
        "real_name": "category/java/codestyle.xml/UnnecessaryLocalBeforeReturn",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Consider simply returning the value vs storing it in local variable ''{0}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid the creation of unnecessary local variables\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessarylocalbeforereturn\n```\n\n\npublic class Foo {\n   public int foo() {\n     int x = doSomething();\n     return x;  // instead, just 'return doSomething();'\n   }\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryModifier",
        "real_name": "category/java/codestyle.xml/UnnecessaryModifier",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Unnecessary modifier{0} on {1} ''{2}''{3}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Fields in interfaces and annotations are automatically `public static final`, and methods are `public abstract`. Classes, interfaces or annotations nested in an interface or annotation are automatically `public static` (all nested interfaces and annotations are automatically static). Nested enums are automatically `static`. For historical reasons, modifiers which are implied by the context are accepted by the compiler, but are superfluous.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessarymodifier\n```\n\n\npublic @interface Annotation {\n    public abstract void bar();     // both abstract and public are ignored by the compiler\n    public static final int X = 0;  // public, static, and final all ignored\n    public static class Bar {}      // public, static ignored\n    public static interface Baz {}  // ditto\n}\npublic interface Foo {\n    public abstract void bar();     // both abstract and public are ignored by the compiler\n    public static final int X = 0;  // public, static, and final all ignored\n    public static class Bar {}      // public, static ignored\n    public static interface Baz {}  // ditto\n}\npublic class Bar {\n    public static interface Baz {}  // static ignored\n    public static enum FoorBar {    // static ignored\n        FOO;\n    }\n}\npublic class FooClass {\n    static record BarRecord() {}     // static ignored\n}\npublic interface FooInterface {\n    static record BarRecord() {}     // static ignored\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryReturn",
        "real_name": "category/java/codestyle.xml/UnnecessaryReturn",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Unnecessary return statement",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid the use of unnecessary return statements. A return is unnecessary when no instructions follow anyway.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessaryreturn\n```\n\n\npublic class Foo {\n    public void bar() {\n        int x = 42;\n        return;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessarySemicolon",
        "real_name": "category/java/codestyle.xml/UnnecessarySemicolon",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Unnecessary semicolon",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports unnecessary semicolons (so called \"empty statements\" and \"empty declarations\"). These can be removed without changing the program. The Java grammar allows them for historical reasons, but they should be avoided. This rule will not report empty statements that are syntactically required, for instance, because they are the body of a control statement. This rule replaces EmptyStatementNotInLoop.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#unnecessarysemicolon\n```\n\n\nclass Foo {\n    {\n        toString();; // one of these semicolons is unnecessary\n        if (true); // this semicolon is not unnecessary, but it could be an empty block instead (not reported)\n    }\n}; // this semicolon is unnecessary\n\n\n        ```"
      },
      {
        "display_name": "UseDiamondOperator",
        "real_name": "category/java/codestyle.xml/UseDiamondOperator",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Explicit type arguments can be replaced by a diamond: `{0}`",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In some cases, explicit type arguments in a constructor call for a generic type may be replaced by diamond type arguments (`<>`), and be inferred by the compiler. This rule recommends that you use diamond type arguments anywhere possible, since it avoids duplication of the type arguments, and makes the code more concise and readable. This rule is useful when upgrading a codebase to Java 1.7, Java 1.8, or Java 9. The diamond syntax was first introduced in Java 1.7. In Java 8, improvements in Java's type inference made more type arguments redundant. In Java 9, type arguments inference was made possible for anonymous class constructors.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#usediamondoperator\n```\n\n            \n            import java.util.*;\n            class Foo {\n                static {\n                    List<String> strings;\n                    strings = new ArrayList<String>(); // unnecessary duplication of type parameters\n                    strings = new ArrayList<>();       // using diamond type arguments is more concise\n\n                    strings = new ArrayList(); // accidental use of a raw type, you can use ArrayList<> instead\n\n                    strings = new ArrayList<>() {\n                        // for anonymous classes, this is possible since Java 9 only\n                    };\n                }\n            }\n            \n        ```"
      },
      {
        "display_name": "UseExplicitTypes",
        "real_name": "category/java/codestyle.xml/UseExplicitTypes",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Use Explicit Types",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Java 10 introduced the `var` keyword. This reduces the amount of code written because java can infer the type from the initializer of the variable declaration. This is essentially a trade-off: On the one hand, it can make code more readable by eliminating redundant information. On the other hand, it can make code less readable by eliding useful information. There is no blanket rule for when `var` should be used or shouldn't. It may make sense to use `var` when the type is inherently clear upon reading the statement (ie: assignment to either a literal value or a constructor call). Those use cases can be enabled through properties. Notice that lambda parameters are allowed, as they are already inferred by default (the `var` keyword is completely optional). See also [Local Variable Type Inference Style Guidelines](https://openjdk.org/projects/amber/guides/lvti-style-guide).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#useexplicittypes\n```\n```"
      },
      {
        "display_name": "UselessParentheses",
        "real_name": "category/java/codestyle.xml/UselessParentheses",
        "category": "convention",
        "severity": "info",
        "rule_title": "Useless parentheses.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Parenthesized expressions are used to override the default operator precedence rules. Parentheses whose removal would not change the relative nesting of operators are unnecessary, because they don't change the semantics of the enclosing expression. Some parentheses that strictly speaking are unnecessary, may still be considered useful for readability. This rule allows to ignore violations on two kinds of unnecessary parentheses: - \"Clarifying\" parentheses, which separate operators of difference precedence. While unnecessary, they make precedence rules explicit, which may be useful for rarely used operators. For example: ```java (a + b) & c // is equivalent to `a + b & c`, but probably clearer ``` Unset the property `ignoreClarifying` to report them. - \"Balancing\" parentheses, which are unnecessary but visually balance out another pair of parentheses around an equality operator. For example, those two expressions are equivalent: ```java (a == null) != (b == null) a == null != (b == null) ``` The parentheses on the right are required, and the parentheses on the left are just more visually pleasing. Unset the property `ignoreBalancing` to report them.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#uselessparentheses\n```\n\n\npublic class Foo {\n    {\n        int n = 0;\n        n = (n);         // here\n        n = (n * 2) * 3; // and here\n        n = n * (2 * 3); // and here\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UselessQualifiedThis",
        "real_name": "category/java/codestyle.xml/UselessQualifiedThis",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Useless qualified this usage in the same class.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports qualified this usages in the same class.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#uselessqualifiedthis\n```\n\n\npublic class Foo {\n    final Foo otherFoo = Foo.this;  // use \"this\" directly\n\n    public void doSomething() {\n         final Foo anotherFoo = Foo.this;  // use \"this\" directly\n    }\n\n    private ActionListener returnListener() {\n        return new ActionListener() {\n            @Override\n            public void actionPerformed(ActionEvent e) {\n                doSomethingWithQualifiedThis(Foo.this);  // This is fine\n            }\n        };\n    }\n\n    private class Foo3 {\n        final Foo myFoo = Foo.this;  // This is fine\n    }\n\n    private class Foo2 {\n        final Foo2 myFoo2 = Foo2.this;  // Use \"this\" direclty\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseShortArrayInitializer",
        "real_name": "category/java/codestyle.xml/UseShortArrayInitializer",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Array initialization can be written shorter",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When declaring and initializing array fields or variables, it is not necessary to explicitly create a new array using `new`. Instead one can simply define the initial content of the array as a expression in curly braces. E.g. `int[] x = new int[] { 1, 2, 3 };` can be written as `int[] x = { 1, 2, 3 };`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_codestyle.html#useshortarrayinitializer\n```\n\n\nFoo[] x = new Foo[] { ... }; // Overly verbose\nFoo[] x = { ... }; //Equivalent to above line\n\n        ```"
      },
      {
        "display_name": "AddEmptyString",
        "real_name": "category/java/performance.xml/AddEmptyString",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Do not add empty strings",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The conversion of literals to strings by concatenating them with empty strings is inefficient. It is much better to use one of the type-specific `toString()` methods instead or `String.valueOf()`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#addemptystring\n```\n\n\nString s = \"\" + 123;                // inefficient\nString t = Integer.toString(456);   // preferred approach\n\n        ```"
      },
      {
        "display_name": "AppendCharacterWithChar",
        "real_name": "category/java/performance.xml/AppendCharacterWithChar",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid appending characters as strings in StringBuffer.append.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid concatenating characters as strings in StringBuffer/StringBuilder.append methods.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#appendcharacterwithchar\n```\n\n\nStringBuffer sb = new StringBuffer();\nsb.append(\"a\");     // avoid this\n\nStringBuffer sb = new StringBuffer();\nsb.append('a');     // use this instead\n\n        ```"
      },
      {
        "display_name": "AvoidArrayLoops",
        "real_name": "category/java/performance.xml/AvoidArrayLoops",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Arrays.copyOf or System.arraycopy are more efficient",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Instead of manually copying data between two arrays, use the more efficient `Arrays.copyOf` or `System.arraycopy` method instead. To copy only part of the array, use `Arrays.copyOfRange` or `System.arraycopy`. If you want to copy/move elements inside the _same_ array (e.g. shift the elements), use `System.arraycopy`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#avoidarrayloops\n```\n\n\nclass Scratch {\n    void copy_a_to_b() {\n        int[] a = new int[10];\n        int[] b = new int[10];\n        for (int i = 0; i < a.length; i++) {\n            b[i] = a[i];\n        }\n        // equivalent\n        b = Arrays.copyOf(a, a.length);\n        // equivalent\n        System.arraycopy(a, 0, b, 0, a.length);\n\n        int[] c = new int[10];\n        // this will not trigger the rule\n        for (int i = 0; i < c.length; i++) {\n            b[i] = a[c[i]];\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidCalendarDateCreation",
        "real_name": "category/java/performance.xml/AvoidCalendarDateCreation",
        "category": "performance",
        "severity": "warning",
        "rule_title": "A Calendar is used to get the current time, this is expensive.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Problem: `java.util.Calendar` is a heavyweight object and expensive to create. It should only be used, if calendar calculations are needed. Solution: Use `new Date()`, Java 8+ `java.time.LocalDateTime.now()` or `ZonedDateTime.now()`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#avoidcalendardatecreation\n```\n\n            \nimport java.time.LocalDateTime;\nimport java.util.Calendar;\nimport java.util.Date;\n\npublic class DateStuff {\n    private Date bad1() {\n        return Calendar.getInstance().getTime(); // now\n    }\n    private Date good1a() {\n        return new Date(); // now\n    }\n    private LocalDateTime good1b() {\n        return LocalDateTime.now();\n    }\n    private long bad2() {\n        return Calendar.getInstance().getTimeInMillis();\n    }\n    private long good2() {\n        return System.currentTimeMillis();\n    }\n}\n            \n        ```"
      },
      {
        "display_name": "AvoidFileStream",
        "real_name": "category/java/performance.xml/AvoidFileStream",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid instantiating FileInputStream, FileOutputStream, FileReader, or FileWriter",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The FileInputStream and FileOutputStream classes contains a finalizer method which will cause garbage collection pauses. See [JDK-8080225](https://bugs.openjdk.org/browse/JDK-8080225) for details. The FileReader and FileWriter constructors instantiate FileInputStream and FileOutputStream, again causing garbage collection issues while finalizer methods are called. * Use `Files.newInputStream(Paths.get(fileName))` instead of `new FileInputStream(fileName)`. * Use `Files.newOutputStream(Paths.get(fileName))` instead of `new FileOutputStream(fileName)`. * Use `Files.newBufferedReader(Paths.get(fileName))` instead of `new FileReader(fileName)`. * Use `Files.newBufferedWriter(Paths.get(fileName))` instead of `new FileWriter(fileName)`. Please note, that the `java.nio` API does not throw a `FileNotFoundException` anymore, instead it throws a `NoSuchFileException`. If your code dealt explicitly with a `FileNotFoundException`, then this needs to be adjusted. Both exceptions are subclasses of `IOException`, so catching that one covers both.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#avoidfilestream\n```\n\n\n    // these instantiations cause garbage collection pauses, even if properly closed\n\n    FileInputStream fis = new FileInputStream(fileName);\n    FileOutputStream fos = new FileOutputStream(fileName);\n    FileReader fr = new FileReader(fileName);\n    FileWriter fw = new FileWriter(fileName);\n\n    // the following instantiations help prevent Garbage Collection pauses, no finalization\n\n    try(InputStream is = Files.newInputStream(Paths.get(fileName))) {\n    }\n    try(OutputStream os = Files.newOutputStream(Paths.get(fileName))) {\n    }\n    try(BufferedReader br = Files.newBufferedReader(Paths.get(fileName), StandardCharsets.UTF_8)) {\n    }\n    try(BufferedWriter wr = Files.newBufferedWriter(Paths.get(fileName), StandardCharsets.UTF_8)) {\n    }\n\n        ```"
      },
      {
        "display_name": "AvoidInstantiatingObjectsInLoops",
        "real_name": "category/java/performance.xml/AvoidInstantiatingObjectsInLoops",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid instantiating new objects inside loops",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "New objects created within loops should be checked to see if they can created outside them and reused.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#avoidinstantiatingobjectsinloops\n```\n\n\npublic class Something {\n    public static void main( String as[] ) {\n        for (int i = 0; i < 10; i++) {\n            Foo f = new Foo(); // Avoid this whenever you can it's really expensive\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "BigIntegerInstantiation",
        "real_name": "category/java/performance.xml/BigIntegerInstantiation",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Don''t create instances of already existing BigInteger and BigDecimal (ZERO, ONE, TEN)",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Don't create instances of already existing BigInteger (`BigInteger.ZERO`, `BigInteger.ONE`), for Java 1.5 onwards, BigInteger.TEN and BigDecimal (`BigDecimal.ZERO`, `BigDecimal.ONE`, `BigDecimal.TEN`) and for Java 9 onwards `BigInteger.TWO`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#bigintegerinstantiation\n```\n\n\nBigInteger bi1 = new BigInteger(\"1\");    // reference BigInteger.ONE instead\nBigInteger bi2 = new BigInteger(\"0\");    // reference BigInteger.ZERO instead\nBigInteger bi3;\nbi3 = new BigInteger(\"0\");               // reference BigInteger.ZERO instead\n\nBigDecimal bd1 = new BigDecimal(0);      // reference BigDecimal.ZERO instead\nBigDecimal bd2 = new BigDecimal(\"0.\") ;  // reference BigDecimal.ZERO instead\nBigDecimal bd3 = new BigDecimal(10);     // reference BigDecimal.TEN instead\n\n        ```"
      },
      {
        "display_name": "ConsecutiveAppendsShouldReuse",
        "real_name": "category/java/performance.xml/ConsecutiveAppendsShouldReuse",
        "category": "performance",
        "severity": "warning",
        "rule_title": "StringBuffer (or StringBuilder).append is called consecutively without reusing the target variable.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Consecutive calls to StringBuffer/StringBuilder .append should be chained, reusing the target object. This can improve the performance by producing a smaller bytecode, reducing overhead and improving inlining. A complete analysis can be found [here](https://github.com/pmd/pmd/issues/202#issuecomment-274349067)\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#consecutiveappendsshouldreuse\n```\n\n\nString foo = \" \";\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\"); // poor\nbuf.append(foo);\nbuf.append(\"World\");\n\nStringBuffer buf = new StringBuffer();\nbuf.append(\"Hello\").append(foo).append(\"World\"); // good\n\n        ```"
      },
      {
        "display_name": "ConsecutiveLiteralAppends",
        "real_name": "category/java/performance.xml/ConsecutiveLiteralAppends",
        "category": "performance",
        "severity": "warning",
        "rule_title": "StringBuffer (or StringBuilder).append is called {0} consecutive times with literals. Use a single append with a single combined String.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Consecutively calling StringBuffer/StringBuilder.append(...) with literals should be avoided. Since the literals are constants, they can already be combined into a single String literal and this String can be appended in a single method call.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#consecutiveliteralappends\n```\n\n\nStringBuilder buf = new StringBuilder();\nbuf.append(\"Hello\").append(\" \").append(\"World\");    // poor\nbuf.append(\"Hello World\");                          // good\n\nbuf.append('h').append('e').append('l').append('l').append('o'); // poor\nbuf.append(\"hello\");                                             // good\n\nbuf.append(1).append('m');  // poor\nbuf.append(\"1m\");           // good\n\n        ```"
      },
      {
        "display_name": "InefficientEmptyStringCheck",
        "real_name": "category/java/performance.xml/InefficientEmptyStringCheck",
        "category": "performance",
        "severity": "warning",
        "rule_title": "String.trim().length() == 0 / String.trim().isEmpty() is an inefficient way to validate a blank String.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "String.trim().length() == 0 (or String.trim().isEmpty() for the same reason) is an inefficient way to check if a String is really blank, as it creates a new String object just to check its size. Consider creating a static function that loops through a string, checking Character.isWhitespace() on each character and returning false if a non-whitespace character is found. A Smarter code to check for an empty string would be: ```java private boolean checkTrimEmpty(String str) { for(int i = 0; i < str.length(); i++) { if(!Character.isWhitespace(str.charAt(i))) { return false; } } return true; } ``` You can refer to Apache's StringUtils#isBlank (in commons-lang), Spring's StringUtils#hasText (in the Spring framework) or Google's CharMatcher#whitespace (in Guava) for existing implementations (some might include the check for != null).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#inefficientemptystringcheck\n```\n\n\npublic void bar(String string) {\n    if (string != null && string.trim().length() > 0) {\n        doSomething();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "InefficientStringBuffering",
        "real_name": "category/java/performance.xml/InefficientStringBuffering",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid concatenating nonliterals in a StringBuffer/StringBuilder constructor or append().",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid concatenating non-literals in a StringBuffer constructor or append() since intermediate buffers will need to be be created and destroyed by the JVM.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#inefficientstringbuffering\n```\n\n\n// Avoid this, two buffers are actually being created here\nStringBuffer sb = new StringBuffer(\"tmp = \"+System.getProperty(\"java.io.tmpdir\"));\n\n// do this instead\nStringBuffer sb = new StringBuffer(\"tmp = \");\nsb.append(System.getProperty(\"java.io.tmpdir\"));\n\n        ```"
      },
      {
        "display_name": "InsufficientStringBufferDeclaration",
        "real_name": "category/java/performance.xml/InsufficientStringBufferDeclaration",
        "category": "performance",
        "severity": "warning",
        "rule_title": "{0} has been initialized with size {1}, but has at least {2} characters appended.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Failing to pre-size a StringBuffer or StringBuilder properly could cause it to re-size many times during runtime. This rule attempts to determine the total number the characters that are actually passed into StringBuffer.append(), but represents a best guess \"worst case\" scenario. An empty StringBuffer/StringBuilder constructor initializes the object to 16 characters. This default is assumed if the length of the constructor can not be determined.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#insufficientstringbufferdeclaration\n```\n\n\nStringBuilder bad = new StringBuilder();\nbad.append(\"This is a long string that will exceed the default 16 characters\");\n\nStringBuilder good = new StringBuilder(41);\ngood.append(\"This is a long string, which is pre-sized\");\n\n        ```"
      },
      {
        "display_name": "OptimizableToArrayCall",
        "real_name": "category/java/performance.xml/OptimizableToArrayCall",
        "category": "performance",
        "severity": "warning",
        "rule_title": "This call to Collection.toArray() may be optimizable",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Calls to a collection's `toArray(E[])` method should specify a target array of zero size. This allows the JVM to optimize the memory allocation and copying as much as possible. Previous versions of this rule (pre PMD 6.0.0) suggested the opposite, but current JVM implementations perform always better, when they have full control over the target array. And allocation an array via reflection is nowadays as fast as the direct allocation. See also [Arrays of Wisdom of the Ancients](https://shipilev.net/blog/2016/arrays-wisdom-ancients/) Note: If you don't need an array of the correct type, then the simple `toArray()` method without an array is faster, but returns only an array of type `Object[]`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#optimizabletoarraycall\n```\n\n\nList<Foo> foos = getFoos();\n\n// much better; this one allows the jvm to allocate an array of the correct size and effectively skip\n// the zeroing, since each array element will be overridden anyways\nFoo[] fooArray = foos.toArray(new Foo[0]);\n\n// inefficient, the array needs to be zeroed out by the jvm before it is handed over to the toArray method\nFoo[] fooArray = foos.toArray(new Foo[foos.size()]);\n\n        ```"
      },
      {
        "display_name": "RedundantFieldInitializer",
        "real_name": "category/java/performance.xml/RedundantFieldInitializer",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid using redundant field initializer for ''${variableName}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Java will initialize fields with known default values so any explicit initialization of those same defaults is redundant and results in a larger class file (approximately three additional bytecode instructions per field).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#redundantfieldinitializer\n```\n\n\npublic class C {\n    boolean b   = false;    // examples of redundant initializers\n    byte by     = 0;\n    short s     = 0;\n    char c      = 0;\n    int i       = 0;\n    long l      = 0;\n\n    float f     = .0f;    // all possible float literals\n    double d    = 0d;     // all possible double literals\n    Object o    = null;\n\n    MyClass mca[] = null;\n    int i1 = 0, ia1[] = null;\n\n    class Nested {\n        boolean b = false;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "StringInstantiation",
        "real_name": "category/java/performance.xml/StringInstantiation",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid instantiating String objects; this is usually unnecessary.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid instantiating String objects; this is usually unnecessary since they are immutable and can be safely shared.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#stringinstantiation\n```\n\n\nprivate String bar = new String(\"bar\"); // just do a String bar = \"bar\";\n\n        ```"
      },
      {
        "display_name": "StringToString",
        "real_name": "category/java/performance.xml/StringToString",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid calling toString() on String objects; this is unnecessary.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid calling toString() on objects already known to be string instances; this is unnecessary.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#stringtostring\n```\n\n\nprivate String baz() {\n    String bar = \"howdy\";\n    return bar.toString();\n}\n\n        ```"
      },
      {
        "display_name": "TooFewBranchesForSwitch",
        "real_name": "category/java/performance.xml/TooFewBranchesForSwitch",
        "category": "performance",
        "severity": "warning",
        "rule_title": "A switch with less than three branches is inefficient, use a 'if statement' instead.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Switch statements are intended to be used to support complex branching behaviour. Using a switch for only a few cases is ill-advised, since switches are not as easy to understand as if-else statements. In these cases use the if-else statement to increase code readability. Note: This rule was named TooFewBranchesForASwitchStatement before PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#toofewbranchesforswitch\n```\n\n\n// With a minimumNumberCaseForASwitch of 3\npublic class Foo {\n    public void bar(int condition) {\n        switch (condition) {\n            case 1:\n                instruction;\n                break;\n            default:\n                break; // not enough for a 'switch' stmt, a simple 'if' stmt would have been more appropriate\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseArrayListInsteadOfVector",
        "real_name": "category/java/performance.xml/UseArrayListInsteadOfVector",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Use ArrayList instead of Vector",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "ArrayList is a much better Collection implementation than Vector if thread-safe operation is not required.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#usearraylistinsteadofvector\n```\n\n\nimport java.util.*;\npublic class SimpleTest extends TestCase {\n    public void testX() {\n    Collection c1 = new Vector();\n    Collection c2 = new ArrayList();    // achieves the same with much better performance\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseArraysAsList",
        "real_name": "category/java/performance.xml/UseArraysAsList",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Use asList instead of tight loops",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The `java.util.Arrays` class has a `asList()` method that should be used when you want to create a new List from an array of objects. It is faster than executing a loop to copy all the elements of the array one by one. Note that the result of `Arrays.asList()` is backed by the specified array, changes in the returned list will result in the array to be modified. For that reason, it is not possible to add new elements to the returned list of `Arrays.asList()` (UnsupportedOperationException). You must use `new ArrayList<>(Arrays.asList(...))` if that is inconvenient for you (e.g. because of concurrent access).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#usearraysaslist\n```\n\n\npublic class Test {\n    public void foo(Integer[] ints) {\n        // could just use Arrays.asList(ints)\n        List<Integer> l = new ArrayList<>(100);\n        for (int i = 0; i < ints.length; i++) {\n            l.add(ints[i]);\n        }\n\n        List<Integer> anotherList = new ArrayList<>();\n        for (int i = 0; i < ints.length; i++) {\n            anotherList.add(ints[i].toString()); // won't trigger the rule\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseIndexOfChar",
        "real_name": "category/java/performance.xml/UseIndexOfChar",
        "category": "performance",
        "severity": "warning",
        "rule_title": "String.indexOf(char) is faster than String.indexOf(String).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Use String.indexOf(char) when checking for the index of a single character; it executes faster.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#useindexofchar\n```\n\n\nString s = \"hello world\";\n// avoid this\nif (s.indexOf(\"d\") {}\n// instead do this\nif (s.indexOf('d') {}\n\n        ```"
      },
      {
        "display_name": "UseIOStreamsWithApacheCommonsFileItem",
        "real_name": "category/java/performance.xml/UseIOStreamsWithApacheCommonsFileItem",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid memory intensive FileItem.get() or FileItem.getString()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Problem: Use of [FileItem.get()](https://javadoc.io/static/commons-fileupload/commons-fileupload/1.5/org/apache/commons/fileupload/FileItem.html#get--) and [FileItem.getString()](https://javadoc.io/static/commons-fileupload/commons-fileupload/1.5/org/apache/commons/fileupload/FileItem.html#getString--) could exhaust memory since they load the entire file into memory. Solution: Use [FileItem.getInputStream()](https://javadoc.io/static/commons-fileupload/commons-fileupload/1.5/org/apache/commons/fileupload/FileItem.html#getInputStream--) and buffering.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#useiostreamswithapachecommonsfileitem\n```\n\n            \nimport org.apache.commons.fileupload.FileItem;\n\npublic class FileStuff {\n   private String bad(FileItem fileItem) {\n        return fileItem.getString();\n   }\n\n   private InputStream good(FileItem fileItem) {\n        return fileItem.getInputStream();\n   }\n}\n            \n        ```"
      },
      {
        "display_name": "UselessStringValueOf",
        "real_name": "category/java/performance.xml/UselessStringValueOf",
        "category": "performance",
        "severity": "warning",
        "rule_title": "No need to call String.valueOf to append to a string.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "No need to call String.valueOf to append to a string; just use the valueOf() argument directly.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#uselessstringvalueof\n```\n\n\npublic String convert(int i) {\n    String s;\n    s = \"a\" + String.valueOf(i);    // not required\n    s = \"a\" + i;                    // preferred approach\n    return s;\n}\n\n        ```"
      },
      {
        "display_name": "UseStringBufferForStringAppends",
        "real_name": "category/java/performance.xml/UseStringBufferForStringAppends",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Prefer StringBuilder (non-synchronized) or StringBuffer (synchronized) over += for concatenating strings",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The use of the '+=' operator for appending strings causes the JVM to create and use an internal StringBuffer. If a non-trivial number of these concatenations are being used then the explicit use of a StringBuilder or threadsafe StringBuffer is recommended to avoid this.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#usestringbufferforstringappends\n```\n\n\npublic class Foo {\n    String inefficientConcatenation() {\n        String result = \"\";\n        for (int i = 0; i < 10; i++) {\n            // warning: this concatenation will create one new StringBuilder per iteration\n            result += getStringFromSomeWhere(i);\n        }\n        return result;\n    }\n\n    String efficientConcatenation() {\n        // better would be to use one StringBuilder for the entire loop\n        StringBuilder result = new StringBuilder();\n        for (int i = 0; i < 10; i++) {\n            result.append(getStringFromSomeWhere(i));\n        }\n        return result.toString();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseStringBufferLength",
        "real_name": "category/java/performance.xml/UseStringBufferLength",
        "category": "performance",
        "severity": "warning",
        "rule_title": "This is an inefficient use of CharSequence.toString; call CharSequence.length instead.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Use StringBuffer.length() to determine StringBuffer length rather than using StringBuffer.toString().equals(\"\") or StringBuffer.toString().length() == ...\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_performance.html#usestringbufferlength\n```\n\n\nStringBuffer sb = new StringBuffer();\n\nif (sb.toString().equals(\"\")) {}        // inefficient\n\nif (sb.length() == 0) {}                // preferred\n\n        ```"
      },
      {
        "display_name": "HardCodedCryptoKey",
        "real_name": "category/java/security.xml/HardCodedCryptoKey",
        "category": "security",
        "severity": "warning",
        "rule_title": "Do not use hard coded encryption keys",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Do not use hard coded values for cryptographic operations. Please store keys outside of source code.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_security.html#hardcodedcryptokey\n```\n\n\npublic class Foo {\n    void good() {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(Properties.getKey(), \"AES\");\n    }\n\n    void bad() {\n        SecretKeySpec secretKeySpec = new SecretKeySpec(\"my secret here\".getBytes(), \"AES\");\n    }\n}\n\n        ```"
      },
      {
        "display_name": "InsecureCryptoIv",
        "real_name": "category/java/security.xml/InsecureCryptoIv",
        "category": "security",
        "severity": "warning",
        "rule_title": "Do not use hard coded initialization vector in crypto operations",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Do not use hard coded initialization vector in cryptographic operations. Please use a randomly generated IV.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_security.html#insecurecryptoiv\n```\n\n\npublic class Foo {\n    void good() {\n        SecureRandom random = new SecureRandom();\n        byte iv[] = new byte[16];\n        random.nextBytes(bytes);\n    }\n\n    void bad() {\n        byte[] iv = new byte[] { 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, 00, };\n    }\n\n    void alsoBad() {\n        byte[] iv = \"secret iv in here\".getBytes();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AssignmentInOperand",
        "real_name": "category/java/errorprone.xml/AssignmentInOperand",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid assignments in operands",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid assignments in operands; this can make code more complicated and harder to read.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#assignmentinoperand\n```\n\n\npublic void bar() {\n    int x = 2;\n    if ((x = getX()) == 3) {\n      System.out.println(\"3!\");\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AssignmentToNonFinalStatic",
        "real_name": "category/java/errorprone.xml/AssignmentToNonFinalStatic",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Possible unsafe assignment to non-final static field ''{0}'' in a constructor.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Identifies a possible unsafe usage of a static field.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#assignmenttononfinalstatic\n```\n\n\npublic class StaticField {\n   static int x;\n   public FinalFields(int y) {\n    x = y; // unsafe\n   }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidAccessibilityAlteration",
        "real_name": "category/java/errorprone.xml/AvoidAccessibilityAlteration",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "You should not modify visibility of constructors, methods or fields using setAccessible()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Methods such as `getDeclaredConstructors()`, `getDeclaredMethods()`, and `getDeclaredFields()` also return private constructors, methods and fields. These can be made accessible by calling `setAccessible(true)`. This gives access to normally protected data which violates the principle of encapsulation. This rule detects calls to `setAccessible` and finds possible accessibility alterations. If the call to `setAccessible` is wrapped within a `PrivilegedAction`, then the access alteration is assumed to be deliberate and is not reported. Note that with Java 17 the Security Manager, which is used for `PrivilegedAction` execution, is deprecated: [JEP 411: Deprecate the Security Manager for Removal](https://openjdk.org/jeps/411). For future-proof code, deliberate access alteration should be suppressed using the usual suppression methods (e.g. by using `@SuppressWarnings` annotation).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidaccessibilityalteration\n```\n\n\nimport java.lang.reflect.Constructor;\nimport java.lang.reflect.Field;\nimport java.lang.reflect.Method;\nimport java.security.AccessController;\nimport java.security.PrivilegedAction;\n\npublic class Violation {\n    private void invalidSetAccessCalls() throws NoSuchMethodException, SecurityException {\n        Constructor<?> constructor = this.getClass().getDeclaredConstructor(String.class);\n        // call to forbidden setAccessible\n        constructor.setAccessible(true);\n\n        Method privateMethod = this.getClass().getDeclaredMethod(\"aPrivateMethod\");\n        // call to forbidden setAccessible\n        privateMethod.setAccessible(true);\n\n        // deliberate accessibility alteration\n        String privateField = AccessController.doPrivileged(new PrivilegedAction<String>() {\n            @Override\n            public String run() {\n                try {\n                    Field field = Violation.class.getDeclaredField(\"aPrivateField\");\n                    field.setAccessible(true);\n                    return (String) field.get(null);\n                } catch (ReflectiveOperationException | SecurityException e) {\n                    throw new RuntimeException(e);\n                }\n            }\n        });\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidAssertAsIdentifier",
        "real_name": "category/java/errorprone.xml/AvoidAssertAsIdentifier",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using assert as an identifier; it became a reserved word in JDK 1.4",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Use of the term `assert` will conflict with newer versions of Java since it is a reserved word. Since Java 1.4, the token `assert` became a reserved word and using it as an identifier will result in a compilation failure for Java 1.4 and later. This rule is therefore only useful for old Java code before Java 1.4. It can be used to identify problematic code prior to a Java update.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidassertasidentifier\n```\n\n\npublic class A {\n    public class Foo {\n        String assert = \"foo\";\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidBranchingStatementAsLastInLoop",
        "real_name": "category/java/errorprone.xml/AvoidBranchingStatementAsLastInLoop",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using a branching statement as the last in a loop.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Using a branching statement as the last part of a loop may be a bug, and/or is confusing. Ensure that the usage is not a bug, or consider using another approach.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidbranchingstatementaslastinloop\n```\n\n\n// unusual use of branching statement in a loop\nfor (int i = 0; i < 10; i++) {\n    if (i*i <= 25) {\n        continue;\n    }\n    break;\n}\n\n// this makes more sense...\nfor (int i = 0; i < 10; i++) {\n    if (i*i > 25) {\n        break;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidCallingFinalize",
        "real_name": "category/java/errorprone.xml/AvoidCallingFinalize",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid calling finalize() explicitly",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The method Object.finalize() is called by the garbage collector on an object when garbage collection determines that there are no more references to the object. It should not be invoked by application logic. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidcallingfinalize\n```\n\n\nvoid foo() {\n    Bar b = new Bar();\n    b.finalize();\n}\n\n        ```"
      },
      {
        "display_name": "AvoidCatchingNPE",
        "real_name": "category/java/errorprone.xml/AvoidCatchingNPE",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid catching NullPointerException; consider removing the cause of the NPE.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Code should never throw NullPointerExceptions under normal circumstances. A catch block may hide the original error, causing other, more subtle problems later on.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidcatchingnpe\n```\n\n\npublic class Foo {\n    void bar() {\n        try {\n            // do something\n        } catch (NullPointerException npe) {\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidCatchingThrowable",
        "real_name": "category/java/errorprone.xml/AvoidCatchingThrowable",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "A catch statement should never catch throwable since it includes errors.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Catching Throwable errors is not recommended since its scope is very broad. It includes runtime issues such as OutOfMemoryError that should be exposed and managed separately.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidcatchingthrowable\n```\n\n\npublic void bar() {\n    try {\n        // do something\n    } catch (Throwable th) {  // should not catch Throwable\n        th.printStackTrace();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidDecimalLiteralsInBigDecimalConstructor",
        "real_name": "category/java/errorprone.xml/AvoidDecimalLiteralsInBigDecimalConstructor",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid creating BigDecimal with a decimal (float/double) literal. Use a String literal",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "One might assume that the result of \"new BigDecimal(0.1)\" is exactly equal to 0.1, but it is actually equal to .1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or as a binary fraction of any finite length). Thus, the long value that is being passed in to the constructor is not exactly equal to 0.1, appearances notwithstanding. The (String) constructor, on the other hand, is perfectly predictable: 'new BigDecimal(\"0.1\")' is exactly equal to 0.1, as one would expect. Therefore, it is generally recommended that the (String) constructor be used in preference to this one.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoiddecimalliteralsinbigdecimalconstructor\n```\n\n\nBigDecimal bd = new BigDecimal(1.123);       // loss of precision, this would trigger the rule\n\nBigDecimal bd = new BigDecimal(\"1.123\");     // preferred approach\n\nBigDecimal bd = new BigDecimal(12);          // preferred approach, ok for integer values\n\n        ```"
      },
      {
        "display_name": "AvoidDuplicateLiterals",
        "real_name": "category/java/errorprone.xml/AvoidDuplicateLiterals",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The String literal {0} appears {1} times in this file; the first occurrence is on line {2}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Code containing duplicate String literals can usually be improved by declaring the String as a constant field.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidduplicateliterals\n```\n\n\nprivate void bar() {\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n     buz(\"Howdy\");\n}\nprivate void buz(String x) {}\n\n        ```"
      },
      {
        "display_name": "AvoidEnumAsIdentifier",
        "real_name": "category/java/errorprone.xml/AvoidEnumAsIdentifier",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using enum as an identifier; it's a reserved word in JDK 1.5",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Use of the term `enum` will conflict with newer versions of Java since it is a reserved word. Since Java 1.5, the token `enum` became a reserved word and using it as an identifier will result in a compilation failure for Java 1.5 and later. This rule is therefore only useful for old Java code before Java 1.5. It can be used to identify problematic code prior to a Java update.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidenumasidentifier\n```\n\n\npublic class A {\n    public class Foo {\n        String enum = \"foo\";\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidFieldNameMatchingMethodName",
        "real_name": "category/java/errorprone.xml/AvoidFieldNameMatchingMethodName",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Field {0} has the same name as a method",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "It can be confusing to have a field name with the same name as a method. While this is permitted, having information (field) and actions (method) is not clear naming. Developers versed in Smalltalk often prefer this approach as the methods denote accessor methods.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidfieldnamematchingmethodname\n```\n\n\npublic class Foo {\n    Object bar;\n    // bar is data or an action or both?\n    void bar() {\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidFieldNameMatchingTypeName",
        "real_name": "category/java/errorprone.xml/AvoidFieldNameMatchingTypeName",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "It is somewhat confusing to have a field name matching the declaring class name",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "It is somewhat confusing to have a field name matching the declaring type name. This probably means that type and/or field names should be chosen more carefully.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidfieldnamematchingtypename\n```\n\n\npublic class Foo extends Bar {\n    int foo;    // There is probably a better name that can be used\n}\npublic interface Operation {\n    int OPERATION = 1; // There is probably a better name that can be used\n}\n\n        ```"
      },
      {
        "display_name": "AvoidInstanceofChecksInCatchClause",
        "real_name": "category/java/errorprone.xml/AvoidInstanceofChecksInCatchClause",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "An instanceof check is being performed on the caught exception.  Create a separate catch clause for this exception type.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Each caught exception type should be handled in its own catch clause.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidinstanceofchecksincatchclause\n```\n\n\ntry { // Avoid this\n    // do something\n} catch (Exception ee) {\n    if (ee instanceof IOException) {\n        cleanup();\n    }\n}\n\ntry {  // Prefer this:\n    // do something\n} catch (IOException ee) {\n    cleanup();\n}\n\n        ```"
      },
      {
        "display_name": "AvoidLiteralsInIfCondition",
        "real_name": "category/java/errorprone.xml/AvoidLiteralsInIfCondition",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using literals in if statements",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using hard-coded literals in conditional statements. By declaring them as static variables or private members with descriptive names maintainability is enhanced. By default, the literals \"-1\" and \"0\" are ignored. More exceptions can be defined with the property \"ignoreMagicNumbers\". The rule doesn't consider deeper expressions by default, but this can be enabled via the property `ignoreExpressions`. With this property set to false, if-conditions like `i == 1 + 5` are reported as well. Note that in that case, the property ignoreMagicNumbers is not taken into account, if there are multiple literals involved in such an expression.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidliteralsinifcondition\n```\n\n\nprivate static final int MAX_NUMBER_OF_REQUESTS = 10;\n\npublic void checkRequests() {\n\n    if (i == 10) {                        // magic number, buried in a method\n      doSomething();\n    }\n\n    if (i == MAX_NUMBER_OF_REQUESTS) {    // preferred approach\n      doSomething();\n    }\n\n    if (aString.indexOf('.') != -1) {}     // magic number -1, by default ignored\n    if (aString.indexOf('.') >= 0) { }     // alternative approach\n\n    if (aDouble > 0.0) {}                  // magic number 0.0\n    if (aDouble >= Double.MIN_VALUE) {}    // preferred approach\n\n    // with rule property \"ignoreExpressions\" set to \"false\"\n    if (i == pos + 5) {}  // violation: magic number 5 within an (additive) expression\n    if (i == pos + SUFFIX_LENGTH) {} // preferred approach\n    if (i == 5 && \"none\".equals(aString)) {} // 2 violations: magic number 5 and literal \"none\"\n}\n\n        ```"
      },
      {
        "display_name": "AvoidLosingExceptionInformation",
        "real_name": "category/java/errorprone.xml/AvoidLosingExceptionInformation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid statements in a catch block that invoke accessors on the exception without using the information",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Statements in a catch block that invoke accessors on the exception without using the information only add to code size. Either remove the invocation, or use the return result.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidlosingexceptioninformation\n```\n\n\npublic void bar() {\n    try {\n        // do something\n    } catch (SomeException se) {\n        se.getMessage();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidMultipleUnaryOperators",
        "real_name": "category/java/errorprone.xml/AvoidMultipleUnaryOperators",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Using multiple unary operators may be a bug, and/or is confusing.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The use of multiple unary operators may be problematic, and/or confusing. Ensure that the intended usage is not a bug, or consider simplifying the expression.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidmultipleunaryoperators\n```\n\n\n// These are typo bugs, or at best needlessly complex and confusing:\nint i = - -1;\nint j = + - +1;\nint z = ~~2;\nboolean b = !!true;\nboolean c = !!!true;\n\n// These are better:\nint i = 1;\nint j = -1;\nint z = 2;\nboolean b = true;\nboolean c = false;\n\n// And these just make your brain hurt:\nint i = ~-2;\nint j = -~7;\n\n        ```"
      },
      {
        "display_name": "AvoidUsingOctalValues",
        "real_name": "category/java/errorprone.xml/AvoidUsingOctalValues",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not start a literal by 0 unless it's an octal value",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Integer literals should not start with zero since this denotes that the rest of literal will be interpreted as an octal value.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#avoidusingoctalvalues\n```\n\n\nint i = 012;    // set i with 10 not 12\nint j = 010;    // set j with 8 not 10\nk = i * j;      // set k with 80 not 120\n\n        ```"
      },
      {
        "display_name": "BrokenNullCheck",
        "real_name": "category/java/errorprone.xml/BrokenNullCheck",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "This expression will throw a NullPointerException",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The null check is broken since it will throw a NullPointerException itself. It is likely that you used || instead of && or vice versa.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#brokennullcheck\n```\n\n\npublic String bar(String string) {\n  // should be &&\n    if (string!=null || !string.equals(\"\"))\n        return string;\n  // should be ||\n    if (string==null && string.equals(\"\"))\n        return string;\n}\n\n        ```"
      },
      {
        "display_name": "CallSuperFirst",
        "real_name": "category/java/errorprone.xml/CallSuperFirst",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "super should be called at the start of the method",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Super should be called at the start of the method\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#callsuperfirst\n```\n\n\nimport android.app.Activity;\nimport android.os.Bundle;\n\npublic class DummyActivity extends Activity {\n    public void onCreate(Bundle bundle) {\n        // missing call to super.onCreate(bundle)\n        foo();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "CallSuperLast",
        "real_name": "category/java/errorprone.xml/CallSuperLast",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "super should be called at the end of the method",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Super should be called at the end of the method\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#callsuperlast\n```\n\n\nimport android.app.Activity;\n\npublic class DummyActivity extends Activity {\n    public void onPause() {\n        foo();\n        // missing call to super.onPause()\n    }\n}\n\n        ```"
      },
      {
        "display_name": "CheckSkipResult",
        "real_name": "category/java/errorprone.xml/CheckSkipResult",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Check the value returned by the skip() method of an InputStream to see if the requested number of bytes has been skipped.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The skip() method may skip a smaller number of bytes than requested. Check the returned value to find out if it was the case or not.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#checkskipresult\n```\n\n\npublic class Foo {\n\n   private FileInputStream _s = new FileInputStream(\"file\");\n\n   public void skip(int n) throws IOException {\n      _s.skip(n); // You are not sure that exactly n bytes are skipped\n   }\n\n   public void skipExactly(int n) throws IOException {\n      while (n != 0) {\n         long skipped = _s.skip(n);\n         if (skipped == 0)\n            throw new EOFException();\n         n -= skipped;\n      }\n   }\n\n        ```"
      },
      {
        "display_name": "ClassCastExceptionWithToArray",
        "real_name": "category/java/errorprone.xml/ClassCastExceptionWithToArray",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "This usage of the Collection.toArray() method will throw a ClassCastException.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When deriving an array of a specific class from your Collection, one should provide an array of the same class as the parameter of the `toArray()` method. Doing otherwise will result in a `ClassCastException`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#classcastexceptionwithtoarray\n```\n\n\nCollection c = new ArrayList();\nInteger obj = new Integer(1);\nc.add(obj);\n\n    // this would trigger the rule (and throw a ClassCastException if executed)\nInteger[] a = (Integer [])c.toArray();\n\n   // this is fine and will not trigger the rule\nInteger[] b = (Integer [])c.toArray(new Integer[0]);\n\n        ```"
      },
      {
        "display_name": "CloneMethodMustBePublic",
        "real_name": "category/java/errorprone.xml/CloneMethodMustBePublic",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "clone() method must be public if the class implements Cloneable",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The java manual says \"By convention, classes that implement this interface should override Object.clone (which is protected) with a public method.\"\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#clonemethodmustbepublic\n```\n\n\npublic class Foo implements Cloneable {\n    @Override\n    protected Object clone() throws CloneNotSupportedException { // Violation, must be public\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    protected Foo clone() { // Violation, must be public\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Object clone() // Ok\n}\n\n        ```"
      },
      {
        "display_name": "CloneMethodMustImplementCloneable",
        "real_name": "category/java/errorprone.xml/CloneMethodMustImplementCloneable",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "clone() method should be implemented only if implementing Cloneable interface",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The method clone() should only be implemented if the class implements the Cloneable interface with the exception of a final method that only throws CloneNotSupportedException. The rule can also detect, if the class implements or extends a Cloneable class.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#clonemethodmustimplementcloneable\n```\n\n\npublic class MyClass {\n public Object clone() throws CloneNotSupportedException {\n  return foo;\n }\n}\n\n        ```"
      },
      {
        "display_name": "CloneMethodReturnTypeMustMatchClassName",
        "real_name": "category/java/errorprone.xml/CloneMethodReturnTypeMustMatchClassName",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The return type of the clone() method must be the class name when implements Cloneable",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "If a class implements `Cloneable` the return type of the method `clone()` must be the class name. That way, the caller of the clone method doesn't need to cast the returned clone to the correct type. Note: Such a covariant return type is only possible with Java 1.5 or higher.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#clonemethodreturntypemustmatchclassname\n```\n\n\npublic class Foo implements Cloneable {\n    @Override\n    protected Object clone() { // Violation, Object must be Foo\n    }\n}\n\npublic class Foo implements Cloneable {\n    @Override\n    public Foo clone() { //Ok\n    }\n}\n\n        ```"
      },
      {
        "display_name": "CloseResource",
        "real_name": "category/java/errorprone.xml/CloseResource",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Ensure that resources like this {0} object are closed after use",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Ensure that resources (like `java.sql.Connection`, `java.sql.Statement`, and `java.sql.ResultSet` objects and any subtype of `java.lang.AutoCloseable`) are always closed after use. Failing to do so might result in resource leaks. Note: It suffices to configure the super type, e.g. `java.lang.AutoCloseable`, so that this rule automatically triggers on any subtype (e.g. `java.io.FileInputStream`). Additionally specifying `java.sql.Connection` helps in detecting the types, if the type resolution / auxclasspath is not correctly setup. Note: Since PMD 6.16.0 the default value for the property `types` contains `java.lang.AutoCloseable` and detects now cases where the standard `java.io.*Stream` classes are involved. In order to restore the old behaviour, just remove \"AutoCloseable\" from the types.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#closeresource\n```\n\n\npublic class Bar {\n    public void withSQL() {\n        Connection c = pool.getConnection();\n        try {\n            // do stuff\n        } catch (SQLException ex) {\n           // handle exception\n        } finally {\n            // oops, should close the connection using 'close'!\n            // c.close();\n        }\n    }\n\n    public void withFile() {\n        InputStream file = new FileInputStream(new File(\"/tmp/foo\"));\n        try {\n            int c = file.in();\n        } catch (IOException e) {\n            // handle exception\n        } finally {\n            // TODO: close file\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "CompareObjectsWithEquals",
        "real_name": "category/java/errorprone.xml/CompareObjectsWithEquals",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use equals() to compare object references.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Use `equals()` to compare object references; avoid comparing them with `==`. Since comparing objects with named constants is useful in some cases (eg, when defining constants for sentinel values), the rule ignores comparisons against fields with all-caps name (eg `this == SENTINEL`), which is a common naming convention for constant fields. You may allow some types to be compared by reference by listing the exceptions in the `typesThatCompareByReference` property.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#compareobjectswithequals\n```\n\n\nclass Foo {\n  boolean bar(String a, String b) {\n    return a == b;\n  }\n}\n\n\n        ```"
      },
      {
        "display_name": "ComparisonWithNaN",
        "real_name": "category/java/errorprone.xml/ComparisonWithNaN",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Comparisons with NaN always return false",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports comparisons with double and float `NaN` (Not-a-Number) values. These are [specified](https://docs.oracle.com/javase/specs/jls/se8/html/jls-15.html#jls-15.21.1) to have unintuitive behavior: NaN is considered unequal to itself. This means a check like `someDouble == Double.NaN` will always return false, even if `someDouble` is really the NaN value. To test whether a value is the NaN value, one should instead use `Double.isNaN(someDouble)` (or `Float.isNaN`). The `!=` operator should be treated similarly. Finally, comparisons like `someDouble <= Double.NaN` are nonsensical and will always evaluate to false. This rule has been renamed from \"BadComparison\" in PMD 6.36.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#comparisonwithnan\n```\n\n            \nboolean x = (y == Double.NaN);\n\n        ```"
      },
      {
        "display_name": "ConfusingArgumentToVarargsMethod",
        "real_name": "category/java/errorprone.xml/ConfusingArgumentToVarargsMethod",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Unclear if a varargs or non-varargs call is intended. Cast to {0} or {0}[], or pass varargs parameters separately to clarify intent.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports a confusing argument passed to a varargs method. This can occur when an array is passed as a single varargs argument, when the array type is not exactly the type of array that the varargs method expects. If, that array is a subtype of the component type of the expected array type, then it might not be clear what value the called varargs method will receive. For instance if you have: ```java void varargs(Object... parm); ``` and call it like so: ```java varargs(new String[]{\"a\"}); ``` it is not clear whether you intended the method to receive the value `new Object[]{ new String[] {\"a\"} }` or just `new String[] {\"a\"}` (the latter happens). This confusion occurs because `String[]` is both a subtype of `Object[]` and of `Object`. To clarify your intent in this case, use a cast or pass individual elements like so: ```java // varargs call // parm will be `new Object[] { \"a\" }` varargs(\"a\"); // non-varargs call // parm will be `new String[] { \"a\" }` varargs((Object[]) new String[]{\"a\"}); // varargs call // parm will be `new Object[] { new String[] { \"a\" } }` varargs((Object) new String[]{\"a\"}); ``` Another confusing case is when you pass `null` as the varargs argument. Here it is not clear whether you intended to pass an array with a single null element, or a null array (the latter happens). This can similarly be clarified with a cast.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#confusingargumenttovarargsmethod\n```\n\n            import java.util.Arrays;\n\n            abstract class C {\n                abstract void varargs(Object... args);\n                static {\n                    varargs(new String[] { \"a\" });\n                    varargs(null);\n                }\n            }\n            ```"
      },
      {
        "display_name": "ConstructorCallsOverridableMethod",
        "real_name": "category/java/errorprone.xml/ConstructorCallsOverridableMethod",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Overridable {0} called during object construction{1}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports calls to overridable methods on `this` during object initialization. These are invoked on an incompletely constructed object and can be difficult to debug if overridden. This is because the subclass usually assumes that the superclass is completely initialized in all methods. If that is not the case, bugs can appear in the constructor, for instance, some fields that are still null may cause a NullPointerException or be stored somewhere else to blow up later. To avoid this problem, only use methods that are static, private, or final in constructors. Note that those methods also must not call overridable methods transitively to be safe.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#constructorcallsoverridablemethod\n```\n\n\npublic class SeniorClass {\n  public SeniorClass(){\n      toString(); //may throw NullPointerException if overridden\n  }\n  public String toString(){\n    return \"IAmSeniorClass\";\n  }\n}\npublic class JuniorClass extends SeniorClass {\n  private String name;\n  public JuniorClass(){\n    super(); //Automatic call leads to NullPointerException\n    name = \"JuniorClass\";\n  }\n  public String toString(){\n    return name.toUpperCase();\n  }\n}\n\n        ```"
      },
      {
        "display_name": "DetachedTestCase",
        "real_name": "category/java/errorprone.xml/DetachedTestCase",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Probable detached JUnit test case.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The method appears to be a test case since it has public or default visibility, non-static access, no arguments, no return value, has no annotations, but is a member of a class that has one or more JUnit test cases. If it is a utility method, it should likely have private visibility. If it is an ignored test, it should be annotated with @Test and @Ignore.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#detachedtestcase\n```\n\n\npublic class MyTest {\n    @Test\n    public void someTest() {\n    }\n\n    // violation: Not annotated\n    public void someOtherTest () {\n    }\n\n}\n\n        ```"
      },
      {
        "display_name": "DoNotCallGarbageCollectionExplicitly",
        "real_name": "category/java/errorprone.xml/DoNotCallGarbageCollectionExplicitly",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not explicitly trigger a garbage collection.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Calls to `System.gc()`, `Runtime.getRuntime().gc()`, and `System.runFinalization()` are not advised. Code should have the same behavior whether the garbage collection is disabled using the option `-Xdisableexplicitgc` or not. Moreover, \"modern\" JVMs do a very good job handling garbage collections. If memory usage issues unrelated to memory leaks develop within an application, it should be dealt with JVM options rather than within the code itself.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#donotcallgarbagecollectionexplicitly\n```\n\n\npublic class GCCall {\n    public GCCall() {\n        // Explicit gc call !\n        System.gc();\n    }\n\n    public void doSomething() {\n        // Explicit gc call !\n        Runtime.getRuntime().gc();\n    }\n\n    public explicitGCcall() {\n        // Explicit gc call !\n        System.gc();\n    }\n\n    public void doSomething() {\n        // Explicit gc call !\n        Runtime.getRuntime().gc();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "DoNotExtendJavaLangThrowable",
        "real_name": "category/java/errorprone.xml/DoNotExtendJavaLangThrowable",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Exceptions should not extend java.lang.Throwable",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Extend Exception or RuntimeException instead of Throwable.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#donotextendjavalangthrowable\n```\n\n\npublic class Foo extends Throwable { }\n\n        ```"
      },
      {
        "display_name": "DoNotHardCodeSDCard",
        "real_name": "category/java/errorprone.xml/DoNotHardCodeSDCard",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not hardcode /sdcard.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Use Environment.getExternalStorageDirectory() instead of \"/sdcard\"\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#donothardcodesdcard\n```\n\n\npublic class MyActivity extends Activity {\n    protected void foo() {\n        String storageLocation = \"/sdcard/mypackage\";   // hard-coded, poor approach\n\n       storageLocation = Environment.getExternalStorageDirectory() + \"/mypackage\"; // preferred approach\n    }\n}\n\n        ```"
      },
      {
        "display_name": "DoNotTerminateVM",
        "real_name": "category/java/errorprone.xml/DoNotTerminateVM",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "System.exit() should not be used in J2EE/JEE apps",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Web applications should not call `System.exit()`, since only the web container or the application server should stop the JVM. Otherwise a web application would terminate all other applications running on the same application server. This rule also checks for the equivalent calls `Runtime.getRuntime().exit()` and `Runtime.getRuntime().halt()`. This rule has been renamed from \"DoNotCallSystemExit\" in PMD 6.29.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#donotterminatevm\n```\n\n\npublic void bar() {\n    System.exit(0);                 // never call this when running in an application server!\n}\npublic void foo() {\n    Runtime.getRuntime().exit(0);   // never stop the JVM manually, the container will do this.\n}\n\n        ```"
      },
      {
        "display_name": "DoNotThrowExceptionInFinally",
        "real_name": "category/java/errorprone.xml/DoNotThrowExceptionInFinally",
        "category": "correctness",
        "severity": "info",
        "rule_title": "A throw statement in a finally block makes the control flow hard to understand.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Throwing exceptions within a 'finally' block is confusing since they may mask other exceptions or code defects. Note: This is a PMD implementation of the Lint4j rule \"A throw in a finally block\"\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#donotthrowexceptioninfinally\n```\n\n\npublic class Foo {\n    public void bar() {\n        try {\n            // Here do some stuff\n        } catch( Exception e) {\n            // Handling the issue\n        } finally {\n            // is this really a good idea ?\n            throw new Exception();\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "DontImportSun",
        "real_name": "category/java/errorprone.xml/DontImportSun",
        "category": "correctness",
        "severity": "info",
        "rule_title": "Avoid importing anything from the 'sun.*' packages",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid importing anything from the 'sun.*' packages. These packages are not portable and are likely to change. If you find yourself having to depend on Sun APIs, confine this dependency to as small a scope as possible, for instance by writing a stable wrapper class around the unstable API. You can then suppress this rule in the implementation of the wrapper.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#dontimportsun\n```\n\n\nimport sun.misc.foo;\npublic class Foo {}\n\n        ```"
      },
      {
        "display_name": "DontUseFloatTypeForLoopIndices",
        "real_name": "category/java/errorprone.xml/DontUseFloatTypeForLoopIndices",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Don't use floating point for loop indices. If you must use floating point, use double.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Don't use floating point for loop indices. If you must use floating point, use double unless you're certain that float provides enough precision and you have a compelling performance need (space or time).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#dontusefloattypeforloopindices\n```\n\n\npublic class Count {\n  public static void main(String[] args) {\n    final int START = 2000000000;\n    int count = 0;\n    for (float f = START; f < START + 50; f++)\n      count++;\n      //Prints 0 because (float) START == (float) (START + 50).\n      System.out.println(count);\n      //The termination test misbehaves due to floating point granularity.\n    }\n}\n\n        ```"
      },
      {
        "display_name": "EmptyCatchBlock",
        "real_name": "category/java/errorprone.xml/EmptyCatchBlock",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty catch blocks",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#emptycatchblock\n```\n\n\npublic void doSomething() {\n    try {\n        FileInputStream fis = new FileInputStream(\"/tmp/bugger\");\n    } catch (IOException ioe) {\n        // not good\n    }\n}\n\n        ```"
      },
      {
        "display_name": "EmptyFinalizer",
        "real_name": "category/java/errorprone.xml/EmptyFinalizer",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty finalize methods",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty finalize methods serve no purpose and should be removed. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#emptyfinalizer\n```\n\n\npublic class Foo {\n   protected void finalize() {}\n}\n\n        ```"
      },
      {
        "display_name": "EqualsNull",
        "real_name": "category/java/errorprone.xml/EqualsNull",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using equals() to compare against null",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Tests for null should not use the equals() method. The '==' operator should be used instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#equalsnull\n```\n\n\nString x = \"foo\";\n\nif (x.equals(null)) {   // bad form\n    doSomething();\n}\n\nif (x == null) {        // preferred\n    doSomething();\n}\n\n        ```"
      },
      {
        "display_name": "FinalizeDoesNotCallSuperFinalize",
        "real_name": "category/java/errorprone.xml/FinalizeDoesNotCallSuperFinalize",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Last statement in finalize method should be a call to super.finalize()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "If the finalize() is implemented, its last action should be to call super.finalize. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#finalizedoesnotcallsuperfinalize\n```\n\n\nprotected void finalize() {\n    something();\n    // neglected to call super.finalize()\n}\n\n        ```"
      },
      {
        "display_name": "FinalizeOnlyCallsSuperFinalize",
        "real_name": "category/java/errorprone.xml/FinalizeOnlyCallsSuperFinalize",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Finalize should do something besides just calling super.finalize()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "If the finalize() is implemented, it should do something besides just calling super.finalize(). Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#finalizeonlycallssuperfinalize\n```\n\n\nprotected void finalize() {\n    super.finalize();\n}\n\n        ```"
      },
      {
        "display_name": "FinalizeOverloaded",
        "real_name": "category/java/errorprone.xml/FinalizeOverloaded",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Finalize methods should not be overloaded",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Methods named finalize() should not have parameters. It is confusing and most likely an attempt to overload Object.finalize(). It will not be called by the VM. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#finalizeoverloaded\n```\n\n\npublic class Foo {\n    // this is confusing and probably a bug\n    protected void finalize(int a) {\n    }\n}\n\n        ```"
      },
      {
        "display_name": "FinalizeShouldBeProtected",
        "real_name": "category/java/errorprone.xml/FinalizeShouldBeProtected",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "If you override finalize(), make it protected",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When overriding the finalize(), the new method should be set as protected. If made public, other classes may invoke it at inappropriate times. Note that Oracle has declared Object.finalize() as deprecated since JDK 9.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#finalizeshouldbeprotected\n```\n\n\npublic void finalize() {\n    // do something\n}\n\n        ```"
      },
      {
        "display_name": "IdempotentOperations",
        "real_name": "category/java/errorprone.xml/IdempotentOperations",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid idempotent operations (like assigning a variable to itself).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid idempotent operations - they have no effect.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#idempotentoperations\n```\n\n\npublic class Foo {\n public void bar() {\n  int x = 2;\n  x = x;\n }\n}\n\n        ```"
      },
      {
        "display_name": "ImplicitSwitchFallThrough",
        "real_name": "category/java/errorprone.xml/ImplicitSwitchFallThrough",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "This switch case may be reached by fallthrough from the previous case",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Switch statements without break or return statements for each case option may indicate problematic behaviour. Empty cases are ignored as these indicate an intentional fall-through. You can ignore a violation by commenting `// fallthrough` before the case label which is reached by fallthrough, or with `@SuppressWarnings(\"fallthrough\")`. This rule has been renamed from \"MissingBreakInSwitch\" in PMD 6.37.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#implicitswitchfallthrough\n```\n\n\npublic void bar(int status) {\n    switch(status) {\n      case CANCELLED:\n        doCancelled();\n        // break; hm, should this be commented out?\n      case NEW:\n        doNew();\n        // is this really a fall-through?\n        // what happens if you add another case after this one?\n      case REMOVED:\n        doRemoved();\n        // fallthrough - this comment just clarifies that you want a fallthrough\n      case OTHER: // empty case - this is interpreted as an intentional fall-through\n      case ERROR:\n        doErrorHandling();\n        break;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "InstantiationToGetClass",
        "real_name": "category/java/errorprone.xml/InstantiationToGetClass",
        "category": "correctness",
        "severity": "info",
        "rule_title": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid instantiating an object just to call getClass() on it; use the .class public member instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#instantiationtogetclass\n```\n\n\n// replace this\nClass c = new String().getClass();\n\n// with this:\nClass c = String.class;\n\n        ```"
      },
      {
        "display_name": "InvalidLogMessageFormat",
        "real_name": "category/java/errorprone.xml/InvalidLogMessageFormat",
        "category": "correctness",
        "severity": "info",
        "rule_title": "Invalid message format",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Check for messages in slf4j and log4j2 (since 6.19.0) loggers with non matching number of arguments and placeholders. Since 6.32.0 in addition to parameterized message placeholders (`{}`) also format specifiers of string formatted messages are supported (`%s`). This rule has been renamed from \"InvalidSlf4jMessageFormat\" in PMD 6.19.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#invalidlogmessageformat\n```\n\n\nLOGGER.error(\"forget the arg {}\");\nLOGGER.error(\"forget the arg %s\");\nLOGGER.error(\"too many args {}\", \"arg1\", \"arg2\");\nLOGGER.error(\"param {}\", \"arg1\", new IllegalStateException(\"arg\")); //The exception is shown separately, so is correct.\n\n        ```"
      },
      {
        "display_name": "JumbledIncrementer",
        "real_name": "category/java/errorprone.xml/JumbledIncrementer",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid modifying an outer loop incrementer in an inner loop for update expression",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid jumbled loop incrementers - it's usually a mistake, and is confusing even if intentional.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#jumbledincrementer\n```\n\n \npublic class JumbledIncrementerRule1 {\n    public void foo() {\n        for (int i = 0; i < 10; i++) {          // only references 'i'\n            for (int k = 0; k < 20; i++) {      // references both 'i' and 'k'\n                System.out.println(\"Hello\");\n            }\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "JUnitSpelling",
        "real_name": "category/java/errorprone.xml/JUnitSpelling",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "You may have misspelled a JUnit framework method (setUp or tearDown)",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In JUnit 3, the setUp method is used to set up all data entities required in running tests. The tearDown method is used to clean up all data entities required in running tests. You should not misspell method name if you want your test to set up and clean up everything correctly.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#junitspelling\n```\n\n\nimport junit.framework.*;\n\npublic class Foo extends TestCase {\n    public void setup() {}    // oops, should be setUp\n    public void TearDown() {} // oops, should be tearDown\n}\n\n        ```"
      },
      {
        "display_name": "JUnitStaticSuite",
        "real_name": "category/java/errorprone.xml/JUnitStaticSuite",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "You have a suite() method that is not both public and static, so JUnit won't call it to get your TestSuite.  Is that what you wanted to do?",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The suite() method in a JUnit test needs to be both public and static.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#junitstaticsuite\n```\n\n\nimport junit.framework.*;\n\npublic class Foo extends TestCase {\n    public void suite() {}         // oops, should be static\n}\n\n        ```"
      },
      {
        "display_name": "MethodWithSameNameAsEnclosingClass",
        "real_name": "category/java/errorprone.xml/MethodWithSameNameAsEnclosingClass",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "A method should not have the same name as its containing class",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A method should not have the same name as its containing class. This would be confusing as it would look like a constructor.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#methodwithsamenameasenclosingclass\n```\n\n\npublic class MyClass {\n\n    public MyClass() {}         // this is OK because it is a constructor\n\n    public void MyClass() {}    // this is bad because it is a method\n}\n\n        ```"
      },
      {
        "display_name": "MisplacedNullCheck",
        "real_name": "category/java/errorprone.xml/MisplacedNullCheck",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The null check here is misplaced; if the variable ''{0}'' is null there will be a NullPointerException",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The null check here is misplaced. If the variable is null a `NullPointerException` will be thrown. Either the check is useless (the variable will never be `null`) or it is incorrect.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#misplacednullcheck\n```\n\n\npublic class Foo {\n    void bar() {\n        if (a.equals(baz) && a != null) {} // a could be null, misplaced null check\n\n        if (a != null && a.equals(baz)) {} // correct null check\n    }\n}\n\n        ```"
      },
      {
        "display_name": "MissingSerialVersionUID",
        "real_name": "category/java/errorprone.xml/MissingSerialVersionUID",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Classes implementing Serializable should set a serialVersionUID",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Serializable classes should provide a serialVersionUID field. The serialVersionUID field is also needed for abstract base classes. Each individual class in the inheritance chain needs an own serialVersionUID field. See also [Should an abstract class have a serialVersionUID](https://stackoverflow.com/questions/893259/should-an-abstract-class-have-a-serialversionuid).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#missingserialversionuid\n```\n\n\npublic class Foo implements java.io.Serializable {\n    String name;\n    // Define serialization id to avoid serialization related bugs\n    // i.e., public static final long serialVersionUID = 4328743;\n}\n\n        ```"
      },
      {
        "display_name": "MissingStaticMethodInNonInstantiatableClass",
        "real_name": "category/java/errorprone.xml/MissingStaticMethodInNonInstantiatableClass",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Class cannot be instantiated and does not provide any static methods or fields",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A class that has private constructors and does not have any static methods or fields cannot be used. When one of the private constructors is annotated with one of the annotations, then the class is not considered non-instantiatable anymore and no violation will be reported. See the property `annotations`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#missingstaticmethodinnoninstantiatableclass\n```\n\n\n// This class is unusable, since it cannot be\n// instantiated (private constructor),\n// and no static method can be called.\n\npublic class Foo {\n  private Foo() {}\n  void foo() {}\n}\n\n\n        ```"
      },
      {
        "display_name": "MoreThanOneLogger",
        "real_name": "category/java/errorprone.xml/MoreThanOneLogger",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Class contains more than one logger.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Normally only one logger is used in each class. This rule supports slf4j, log4j, Java Util Logging and log4j2 (since 6.19.0).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#morethanonelogger\n```\n\n\npublic class Foo {\n    Logger log = Logger.getLogger(Foo.class.getName());\n    // It is very rare to see two loggers on a class, normally\n    // log information is multiplexed by levels\n    Logger log2= Logger.getLogger(Foo.class.getName());\n}\n\n        ```"
      },
      {
        "display_name": "NonCaseLabelInSwitch",
        "real_name": "category/java/errorprone.xml/NonCaseLabelInSwitch",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "A non-case label was present in a switch statement or expression",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A non-case label (e.g. a named break/continue label) was present in a switch statement or switch expression. This is legal, but confusing. It is easy to mix up the case labels and the non-case labels. Note: This rule was renamed from `NonCaseLabelInSwitchStatement` with PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#noncaselabelinswitch\n```\n\n\npublic class Foo {\n  void bar(int a) {\n   switch (a) {\n     case 1:\n       // do something\n     mylabel: // this is legal, but confusing!\n       break;\n     default:\n       break;\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "NonSerializableClass",
        "real_name": "category/java/errorprone.xml/NonSerializableClass",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The field ''{0}'' of serializable class ''{1}'' is of non-serializable type ''{2}''.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "If a class is marked as `Serializable`, then all fields need to be serializable as well. In order to exclude a field, it can be marked as transient. Static fields are not considered. This rule reports all fields, that are not serializable. If a class implements the methods to perform manual serialization (`writeObject`, `readObject`) or uses a replacement object (`writeReplace`, `readResolve`) then this class is ignored. Note: This rule has been revamped with PMD 6.52.0. It was previously called \"BeanMembersShouldSerialize\". The property `prefix` has been deprecated, since in a serializable class all fields have to be serializable regardless of the name.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#nonserializableclass\n```\n\n            \nclass Buzz implements java.io.Serializable {\n    private static final long serialVersionUID = 1L;\n\n    private transient int someFoo;          // good, it's transient\n    private static int otherFoo;            // also OK, it's static\n    private java.io.FileInputStream stream; // bad - FileInputStream is not serializable\n\n    public void setStream(FileInputStream stream) {\n        this.stream = stream;\n    }\n\n    public int getSomeFoo() {\n          return this.someFoo;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "NonStaticInitializer",
        "real_name": "category/java/errorprone.xml/NonStaticInitializer",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Non-static initializers are confusing",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A non-static initializer block will be called any time a constructor is invoked (just prior to invoking the constructor). While this is a valid language construct, it is rarely used and is confusing.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#nonstaticinitializer\n```\n\n\npublic class MyClass {\n  // this block gets run before any call to a constructor\n  {\n    System.out.println(\"I am about to construct myself\");\n  }\n}\n\n        ```"
      },
      {
        "display_name": "NullAssignment",
        "real_name": "category/java/errorprone.xml/NullAssignment",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Assigning an Object to null is a code smell.  Consider refactoring.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Assigning a \"null\" to a variable (outside of its declaration) is usually bad form. Sometimes, this type of assignment is an indication that the programmer doesn't completely understand what is going on in the code. NOTE: This sort of assignment may used in some cases to dereference objects and encourage garbage collection.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#nullassignment\n```\n\n \npublic void bar() {\n  Object x = null; // this is OK\n  x = new Object();\n     // big, complex piece of code here\n  x = null; // this is not required\n     // big, complex piece of code here\n}\n\n        ```"
      },
      {
        "display_name": "OverrideBothEqualsAndHashcode",
        "real_name": "category/java/errorprone.xml/OverrideBothEqualsAndHashcode",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Ensure you override both equals() and hashCode()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#overridebothequalsandhashcode\n```\n\n\npublic class Bar {        // poor, missing a hashcode() method\n    public boolean equals(Object o) {\n      // do some comparison\n    }\n}\n\npublic class Baz {        // poor, missing an equals() method\n    public int hashCode() {\n      // return some hash value\n    }\n}\n\npublic class Foo {        // perfect, both methods provided\n    public boolean equals(Object other) {\n      // do some comparison\n    }\n    public int hashCode() {\n      // return some hash value\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ProperCloneImplementation",
        "real_name": "category/java/errorprone.xml/ProperCloneImplementation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Object clone() should be implemented with super.clone()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Object clone() should be implemented with super.clone().\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#propercloneimplementation\n```\n\n\nclass Foo{\n    public Object clone(){\n        return new Foo(); // This is bad\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ProperLogger",
        "real_name": "category/java/errorprone.xml/ProperLogger",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Logger should be defined private static final and have the correct class",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A logger should normally be defined private static final and be associated with the correct class. `private final Log log;` is also allowed for rare cases where loggers need to be passed around, with the restriction that the logger needs to be passed into the constructor.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#properlogger\n```\n\n \npublic class Foo {\n\n    private static final Log LOG = LogFactory.getLog(Foo.class);    // proper way\n\n    protected Log LOG = LogFactory.getLog(Testclass.class);         // wrong approach\n}\n\n        ```"
      },
      {
        "display_name": "ReturnEmptyCollectionRatherThanNull",
        "real_name": "category/java/errorprone.xml/ReturnEmptyCollectionRatherThanNull",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Return an empty collection rather than 'null'.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "For any method that returns an collection (such as an array, Collection or Map), it is better to return an empty one rather than a null reference. This removes the need for null checking all results and avoids inadvertent NullPointerExceptions. See Effective Java, 3rd Edition, Item 54: Return empty collections or arrays instead of null\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#returnemptycollectionratherthannull\n```\n\n\npublic class Example {\n    // Not a good idea...\n    public int[] badBehavior() {\n        // ...\n        return null;\n    }\n\n    // Good behavior\n    public String[] bonnePratique() {\n        //...\n        return new String[0];\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ReturnFromFinallyBlock",
        "real_name": "category/java/errorprone.xml/ReturnFromFinallyBlock",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid returning from a finally block",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid returning from a finally block, this can discard exceptions.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#returnfromfinallyblock\n```\n\n\npublic class Bar {\n    public String foo() {\n        try {\n            throw new Exception( \"My Exception\" );\n        } catch (Exception e) {\n            throw e;\n        } finally {\n            return \"A. O. K.\"; // return not recommended here\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "SimpleDateFormatNeedsLocale",
        "real_name": "category/java/errorprone.xml/SimpleDateFormatNeedsLocale",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "When instantiating a SimpleDateFormat object, specify a Locale",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Be sure to specify a Locale when creating SimpleDateFormat instances to ensure that locale-appropriate formatting is used.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#simpledateformatneedslocale\n```\n\n\npublic class Foo {\n  // Should specify Locale.US (or whatever)\n  private SimpleDateFormat sdf = new SimpleDateFormat(\"pattern\");\n}\n\n        ```"
      },
      {
        "display_name": "SingleMethodSingleton",
        "real_name": "category/java/errorprone.xml/SingleMethodSingleton",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Class contains multiple getInstance methods. Please review.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Some classes contain overloaded getInstance. The problem with overloaded getInstance methods is that the instance created using the overloaded method is not cached and so, for each call and new objects will be created for every invocation.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#singlemethodsingleton\n```\n\n\npublic class Singleton {\n\n    private static Singleton singleton = new Singleton( );\n\n    private Singleton(){ }\n\n    public static Singleton getInstance( ) {\n        return singleton;\n    }\n\n    public static Singleton getInstance(Object obj){\n        Singleton singleton = (Singleton) obj;\n        return singleton;           //violation\n    }\n}\n\n        ```"
      },
      {
        "display_name": "SingletonClassReturningNewInstance",
        "real_name": "category/java/errorprone.xml/SingletonClassReturningNewInstance",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "getInstance method always creates a new object and hence does not comply to Singleton Design Pattern behaviour. Please review",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A singleton class should only ever have one instance. Failure to check whether an instance has already been created may result in multiple instances being created.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#singletonclassreturningnewinstance\n```\n\n\nclass Singleton {\n    private static Singleton instance = null;\n    public static Singleton getInstance() {\n        synchronized(Singleton.class) {\n            return new Singleton(); // this should be assigned to the field\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "StaticEJBFieldShouldBeFinal",
        "real_name": "category/java/errorprone.xml/StaticEJBFieldShouldBeFinal",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "EJB's shouldn't have non-final static fields",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "According to the J2EE specification, an EJB should not have any static fields with write access. However, static read-only fields are allowed. This ensures proper behavior especially when instances are distributed by the container on several JREs.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#staticejbfieldshouldbefinal\n```\n\n\npublic class SomeEJB extends EJBObject implements EJBLocalHome {\n\n    private static int CountA;          // poor, field can be edited\n\n    private static final int CountB;    // preferred, read-only access\n}\n\n        ```"
      },
      {
        "display_name": "StringBufferInstantiationWithChar",
        "real_name": "category/java/errorprone.xml/StringBufferInstantiationWithChar",
        "category": "correctness",
        "severity": "info",
        "rule_title": "Argument to `new StringBuilder()` or `new StringBuffer()` is implicitly converted from char to int",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Individual character values provided as initialization arguments will be converted into integers. This can lead to internal buffer sizes that are larger than expected. Some examples: ``` new StringBuffer() // 16 new StringBuffer(6) // 6 new StringBuffer(\"hello world\") // 11 + 16 = 27 new StringBuffer('A') // chr(A) = 65 new StringBuffer(\"A\") // 1 + 16 = 17 new StringBuilder() // 16 new StringBuilder(6) // 6 new StringBuilder(\"hello world\") // 11 + 16 = 27 new StringBuilder('C') // chr(C) = 67 new StringBuilder(\"A\") // 1 + 16 = 17 ```\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#stringbufferinstantiationwithchar\n```\n\n\n// misleading instantiation, these buffers\n// are actually sized to 99 characters long\nStringBuffer  sb1 = new StringBuffer('c');\nStringBuilder sb2 = new StringBuilder('c');\n\n// in these forms, just single characters are allocated\nStringBuffer  sb3 = new StringBuffer(\"c\");\nStringBuilder sb4 = new StringBuilder(\"c\");\n\n        ```"
      },
      {
        "display_name": "SuspiciousEqualsMethodName",
        "real_name": "category/java/errorprone.xml/SuspiciousEqualsMethodName",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The method name and parameter number are suspiciously close to equals(Object)",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The method name and parameter number are suspiciously close to `Object.equals`, which can denote an intention to override it. However, the method does not override `Object.equals`, but overloads it instead. Overloading `Object.equals` method is confusing for other programmers, error-prone and hard to maintain, especially when using inheritance, because `@Override` annotations used in subclasses can provide a false sense of security. For more information on `Object.equals` method, see Effective Java, 3rd Edition, Item 10: Obey the general contract when overriding equals.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#suspiciousequalsmethodname\n```\n\n\npublic class Foo {\n   public int equals(Object o) {\n     // oops, this probably was supposed to be boolean equals\n   }\n   public boolean equals(String s) {\n     // oops, this probably was supposed to be equals(Object)\n   }\n   public boolean equals(Object o1, Object o2) {\n     // oops, this probably was supposed to be equals(Object)\n   }\n}\n\n        ```"
      },
      {
        "display_name": "SuspiciousHashcodeMethodName",
        "real_name": "category/java/errorprone.xml/SuspiciousHashcodeMethodName",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The method name and return type are suspiciously close to hashCode()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The method name and return type are suspiciously close to hashCode(), which may denote an intention to override the hashCode() method.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#suspicioushashcodemethodname\n```\n\n\npublic class Foo {\n    public int hashcode() { // oops, this probably was supposed to be 'hashCode'\n    }\n}\n\n        ```"
      },
      {
        "display_name": "SuspiciousOctalEscape",
        "real_name": "category/java/errorprone.xml/SuspiciousOctalEscape",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Suspicious decimal characters following octal escape in string literal: {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A suspicious octal escape sequence was found inside a String literal. The Java language specification (section 3.10.6) says an octal escape sequence inside a literal String shall consist of a backslash followed by: OctalDigit | OctalDigit OctalDigit | ZeroToThree OctalDigit OctalDigit Any octal escape sequence followed by non-octal digits can be confusing, e.g. \"\\038\" is interpreted as the octal escape sequence \"\\03\" followed by the literal character \"8\".\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#suspiciousoctalescape\n```\n\n\npublic void foo() {\n  // interpreted as octal 12, followed by character '8'\n  System.out.println(\"suspicious: \\128\");\n}\n\n        ```"
      },
      {
        "display_name": "TestClassWithoutTestCases",
        "real_name": "category/java/errorprone.xml/TestClassWithoutTestCases",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The class ''{0}'' might be a test class, but it contains no test cases.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Test classes typically end with the suffix \"Test\", \"Tests\" or \"TestCase\". Having a non-test class with that name is not a good practice, since most people will assume it is a test case. Test classes have test methods named \"testXXX\" (JUnit3) or use annotations (e.g. `@Test`). The suffix can be configured using the property `testClassPattern`. To disable the detection of possible test classes by name, set this property to an empty string.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#testclasswithouttestcases\n```\n\n\n//Consider changing the name of the class if it is not a test\n//Consider adding test methods if it is a test\npublic class CarTest {\n   public static void main(String[] args) {\n    // do something\n   }\n   // code\n}\n\n        ```"
      },
      {
        "display_name": "UnconditionalIfStatement",
        "real_name": "category/java/errorprone.xml/UnconditionalIfStatement",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not use 'if' statements that are always true or always false",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Do not use \"if\" statements whose conditionals are always true or always false.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#unconditionalifstatement\n```\n\n\npublic class Foo {\n    public void close() {\n        if (true) {        // fixed conditional, not recommended\n            // ...\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryBooleanAssertion",
        "real_name": "category/java/errorprone.xml/UnnecessaryBooleanAssertion",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "assertTrue(true) or similar statements are unnecessary",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A JUnit test assertion with a boolean literal is unnecessary since it always will evaluate to the same thing. Consider using flow control (in case of `assertTrue(false)` or similar) or simply removing statements like `assertTrue(true)` and `assertFalse(false)`. If you just want a test to halt after finding an error, use the `fail()` method and provide an indication message of why it did.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#unnecessarybooleanassertion\n```\n\n\npublic class SimpleTest extends TestCase {\n    public void testX() {\n        assertTrue(true);            // serves no real purpose - remove it\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryCaseChange",
        "real_name": "category/java/errorprone.xml/UnnecessaryCaseChange",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Using equalsIgnoreCase() is cleaner than using toUpperCase/toLowerCase().equals().",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Using equalsIgnoreCase() is faster than using toUpperCase/toLowerCase().equals()\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#unnecessarycasechange\n```\n\n\nboolean answer1 = buz.toUpperCase().equals(\"BAZ\");              // should be buz.equalsIgnoreCase(\"BAZ\")\n\nboolean answer2 = buz.toUpperCase().equalsIgnoreCase(\"BAZ\");    // another unnecessary toUpperCase()\n\n        ```"
      },
      {
        "display_name": "UnnecessaryConversionTemporary",
        "real_name": "category/java/errorprone.xml/UnnecessaryConversionTemporary",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid unnecessary temporaries when converting primitives to Strings",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid the use temporary objects when converting primitives to Strings. Use the static conversion methods on the wrapper classes instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#unnecessaryconversiontemporary\n```\n\n\npublic String convert(int x) {\n    String foo = new Integer(x).toString(); // this wastes an object\n\n    return Integer.toString(x);             // preferred approach\n}\n\n        ```"
      },
      {
        "display_name": "UnusedNullCheckInEquals",
        "real_name": "category/java/errorprone.xml/UnusedNullCheckInEquals",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Invoke equals() on the object you''ve already ensured is not null",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "After checking an object reference for null, you should invoke equals() on that object rather than passing it to another object's equals() method.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#unusednullcheckinequals\n```\n\n\npublic class Test {\n\n    public String method1() { return \"ok\";}\n    public String method2() { return null;}\n\n    public void method(String a) {\n        String b;\n        // I don't know it method1() can be \"null\"\n        // but I know \"a\" is not null..\n        // I'd better write a.equals(method1())\n\n        if (a!=null && method1().equals(a)) { // will trigger the rule\n            //whatever\n        }\n\n        if (method1().equals(a) && a != null) { // won't trigger the rule\n            //whatever\n        }\n\n        if (a!=null && method1().equals(b)) { // won't trigger the rule\n            //whatever\n        }\n\n        if (a!=null && \"LITERAL\".equals(a)) { // won't trigger the rule\n            //whatever\n        }\n\n        if (a!=null && !a.equals(\"go\")) { // won't trigger the rule\n            a=method2();\n            if (method1().equals(a)) {\n                //whatever\n            }\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseCorrectExceptionLogging",
        "real_name": "category/java/errorprone.xml/UseCorrectExceptionLogging",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use the correct logging statement for logging exceptions",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "To make sure the full stacktrace is printed out, use the logging statement with two arguments: a String and a Throwable. This rule only applies to [Apache Commons Logging](https://commons.apache.org/proper/commons-logging/).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#usecorrectexceptionlogging\n```\n\n\npublic class Main {\n    private static final Log _LOG = LogFactory.getLog( Main.class );\n    void bar() {\n        try {\n        } catch( Exception e ) {\n            _LOG.error( e ); //Wrong!\n        } catch( OtherException oe ) {\n            _LOG.error( oe.getMessage(), oe ); //Correct\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseEqualsToCompareStrings",
        "real_name": "category/java/errorprone.xml/UseEqualsToCompareStrings",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use equals() to compare strings instead of ''=='' or ''!=''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Using '==' or '!=' to compare strings is only reliable if the interned string (`String#intern()`) is used on both sides. Use the `equals()` method instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#useequalstocomparestrings\n```\n\n\npublic boolean test(String s) {\n    if (s == \"one\") return true;        // unreliable\n    if (\"two\".equals(s)) return true;   // better\n    return false;\n}\n\n        ```"
      },
      {
        "display_name": "UselessOperationOnImmutable",
        "real_name": "category/java/errorprone.xml/UselessOperationOnImmutable",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The result of an operation on an immutable object is ignored",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "An operation on an immutable object will not change the object itself since the result of the operation is a new object. Therefore, ignoring the result of such an operation is likely a mistake. The operation can probably be removed. This rule recognizes the types `String`, `BigDecimal`, `BigInteger` or any type from `java.time.*` as immutable.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#uselessoperationonimmutable\n```\n\n\nimport java.math.*;\n\nclass Test {\n    void method1() {\n        BigDecimal bd=new BigDecimal(10);\n        bd.add(new BigDecimal(5));      // this will trigger the rule\n    }\n    void method2() {\n        BigDecimal bd=new BigDecimal(10);\n        bd = bd.add(new BigDecimal(5)); // this won't trigger the rule\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseLocaleWithCaseConversions",
        "real_name": "category/java/errorprone.xml/UseLocaleWithCaseConversions",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "When doing a String.toLowerCase()/toUpperCase() call, use a Locale",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When doing `String::toLowerCase()/toUpperCase()` conversions, use an explicit locale argument to specify the case transformation rules. Using `String::toLowerCase()` without arguments implicitly uses `Locale::getDefault()`. The problem is that the default locale depends on the current JVM setup (and usually on the system in which it is running). Using the system default may be exactly what you want (e.g. if you are manipulating strings you got through standard input), but it may as well not be the case (e.g. if you are getting the string over the network or a file, and the encoding is well-defined and independent of the environment). In the latter case, using the default locale makes the case transformation brittle, as it may yield unexpected results on a machine whose locale has other case translation rules. For example, in Turkish, the uppercase form of `i` is `İ` (U+0130, not ASCII) and not `I` (U+0049) as in English. The rule is intended to *force* developers to think about locales when dealing with strings. By taking a conscious decision about the choice of locale at the time of writing, you reduce the risk of surprising behaviour down the line, and communicate your intent to future readers.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#uselocalewithcaseconversions\n```\n\n\n// violation - implicitly system-dependent conversion\nif (x.toLowerCase().equals(\"list\")) {}\n\n// The above will not match \"LIST\" on a system with a Turkish locale.\n// It could be replaced with\nif (x.toLowerCase(Locale.US).equals(\"list\")) { }\n// or simply\nif (x.equalsIgnoreCase(\"list\")) { }\n\n// ok - system independent conversion\nString z = a.toLowerCase(Locale.ROOT);\n\n// ok - explicit system-dependent conversion\nString z2 = a.toLowerCase(Locale.getDefault());\n\n        ```"
      },
      {
        "display_name": "UseProperClassLoader",
        "real_name": "category/java/errorprone.xml/UseProperClassLoader",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "In J2EE, getClassLoader() might not work as expected.  Use Thread.currentThread().getContextClassLoader() instead.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In J2EE, the getClassLoader() method might not work as expected. Use Thread.currentThread().getContextClassLoader() instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_errorprone.html#useproperclassloader\n```\n\n\npublic class Foo {\n    ClassLoader cl = Bar.class.getClassLoader();\n}\n\n        ```"
      },
      {
        "display_name": "AbstractClassWithoutAbstractMethod",
        "real_name": "category/java/bestpractices.xml/AbstractClassWithoutAbstractMethod",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "This abstract class does not have any abstract methods",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The abstract class does not contain any abstract methods. An abstract class suggests an incomplete implementation, which is to be completed by subclasses implementing the abstract methods. If the class is intended to be used as a base class only (not to be instantiated directly) a protected constructor can be provided to prevent direct instantiation.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#abstractclasswithoutabstractmethod\n```\n\n\npublic abstract class Foo {\n  void int method1() { ... }\n  void int method2() { ... }\n  // consider using abstract methods or removing\n  // the abstract modifier and adding protected constructors\n}\n\n        ```"
      },
      {
        "display_name": "AccessorClassGeneration",
        "real_name": "category/java/bestpractices.xml/AccessorClassGeneration",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid instantiation through private constructors from outside of the constructor's class.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Instantiation by way of private constructors from outside the constructor's class often causes the generation of an accessor. A factory method, or non-privatization of the constructor can eliminate this situation. The generated class file is actually an interface. It gives the accessing class the ability to invoke a new hidden package scope constructor that takes the interface as a supplementary parameter. This turns a private constructor effectively into one with package scope, and is challenging to discern. _Note:_ This rule is only executed for Java 10 or lower. Since Java 11, [JEP 181: Nest-Based Access Control](https://openjdk.org/jeps/181) has been implemented. This means that in Java 11 and above accessor classes are not generated anymore.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#accessorclassgeneration\n```\n\n\npublic class Outer {\n void method(){\n  Inner ic = new Inner();//Causes generation of accessor class\n }\n public class Inner {\n  private Inner(){}\n }\n}\n\n        ```"
      },
      {
        "display_name": "AccessorMethodGeneration",
        "real_name": "category/java/bestpractices.xml/AccessorMethodGeneration",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Consider giving this member package visibility to access it from {0} without a synthetic accessor method",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When accessing private fields / methods from another class, the Java compiler will generate accessor methods with package-private visibility. This adds overhead, and to the dex method count on Android. This situation can be avoided by changing the visibility of the field / method from private to package-private. _Note:_ This rule is only executed for Java 10 or lower. Since Java 11, [JEP 181: Nest-Based Access Control](https://openjdk.org/jeps/181) has been implemented. This means that in Java 11 and above accessor classes are not generated anymore.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#accessormethodgeneration\n```\n\n\npublic class OuterClass {\n    private int counter;\n    /* package */ int id;\n\n    public class InnerClass {\n        InnerClass() {\n            OuterClass.this.counter++; // wrong accessor method will be generated\n        }\n\n        public int getOuterClassId() {\n            return OuterClass.this.id; // id is package-private, no accessor method needed\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ArrayIsStoredDirectly",
        "real_name": "category/java/bestpractices.xml/ArrayIsStoredDirectly",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The user-supplied array ''{0}'' is stored directly.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Constructors and methods receiving arrays should clone objects and store the copy. This prevents future changes from the user from affecting the original array.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#arrayisstoreddirectly\n```\n\n\npublic class Foo {\n    private String [] x;\n        public void foo (String [] param) {\n        // Don't do this, make a copy of the array at least\n        this.x=param;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidMessageDigestField",
        "real_name": "category/java/bestpractices.xml/AvoidMessageDigestField",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "You shouldn't declare field of MessageDigest type, because unsynchronized access could cause problems",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Declaring a MessageDigest instance as a field make this instance directly available to multiple threads. Such sharing of MessageDigest instances should be avoided if possible since it leads to wrong results if the access is not synchronized correctly. Just create a new instance and use it locally, where you need it. Creating a new instance is easier than synchronizing access to a shared instance.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#avoidmessagedigestfield\n```\n\n            \nimport java.security.MessageDigest;\npublic class AvoidMessageDigestFieldExample {\n    private final MessageDigest sharedMd;\n    public AvoidMessageDigestFieldExample() throws Exception {\n        sharedMd = MessageDigest.getInstance(\"SHA-256\");\n    }\n    public byte[] calculateHashShared(byte[] data) {\n        // sharing a MessageDigest like this without synchronizing access\n        // might lead to wrong results\n        sharedMd.reset();\n        sharedMd.update(data);\n        return sharedMd.digest();\n    }\n\n    // better\n    public byte[] calculateHash(byte[] data) throws Exception {\n        MessageDigest md = MessageDigest.getInstance(\"SHA-256\");\n        md.update(data);\n        return md.digest();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidPrintStackTrace",
        "real_name": "category/java/bestpractices.xml/AvoidPrintStackTrace",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid printStackTrace(); use a logger call instead.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid printStackTrace(); use a logger call instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#avoidprintstacktrace\n```\n\n\nclass Foo {\n    void bar() {\n        try {\n            // do something\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidReassigningCatchVariables",
        "real_name": "category/java/bestpractices.xml/AvoidReassigningCatchVariables",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid reassigning caught exception ''{0}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reassigning exception variables caught in a catch statement should be avoided because of: 1) If it is needed, multi catch can be easily added and code will still compile. 2) Following the principle of least surprise we want to make sure that a variable caught in a catch statement is always the one thrown in a try block.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#avoidreassigningcatchvariables\n```\n\npublic class Foo {\n    public void foo() {\n        try {\n            // do something\n        } catch (Exception e) {\n            e = new NullPointerException(); // not recommended\n        }\n\n        try {\n            // do something\n        } catch (MyException | ServerException e) {\n            e = new RuntimeException(); // won't compile\n        }\n    }\n}\n        ```"
      },
      {
        "display_name": "AvoidReassigningLoopVariables",
        "real_name": "category/java/bestpractices.xml/AvoidReassigningLoopVariables",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid reassigning the loop control variable ''{0}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reassigning loop variables can lead to hard-to-find bugs. Prevent or limit how these variables can be changed. In foreach-loops, configured by the `foreachReassign` property: - `deny`: Report any reassignment of the loop variable in the loop body. _This is the default._ - `allow`: Don't check the loop variable. - `firstOnly`: Report any reassignments of the loop variable, except as the first statement in the loop body. _This is useful if some kind of normalization or clean-up of the value before using is permitted, but any other change of the variable is not._ In for-loops, configured by the `forReassign` property: - `deny`: Report any reassignment of the control variable in the loop body. _This is the default._ - `allow`: Don't check the control variable. - `skip`: Report any reassignments of the control variable, except conditional increments/decrements (`++`, `--`, `+=`, `-=`). _This prevents accidental reassignments or unconditional increments of the control variable._\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#avoidreassigningloopvariables\n```\n\n\npublic class Foo {\n  private void foo() {\n    for (String s : listOfStrings()) {\n      s = s.trim(); // OK, when foreachReassign is \"firstOnly\" or \"allow\"\n      doSomethingWith(s);\n\n      s = s.toUpper(); // OK, when foreachReassign is \"allow\"\n      doSomethingElseWith(s);\n    }\n\n    for (int i=0; i < 10; i++) {\n      if (check(i)) {\n        i++; // OK, when forReassign is \"skip\" or \"allow\"\n      }\n\n      i = 5;  // OK, when forReassign is \"allow\"\n\n      doSomethingWith(i);\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidReassigningParameters",
        "real_name": "category/java/bestpractices.xml/AvoidReassigningParameters",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid reassigning parameters such as ''{0}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reassigning values to incoming parameters of a method or constructor is not recommended, as this can make the code more difficult to understand. The code is often read with the assumption that parameter values don't change and an assignment violates therefore the principle of least astonishment. This is especially a problem if the parameter is documented e.g. in the method's javadoc and the new content differs from the original documented content. Use temporary local variables instead. This allows you to assign a new name, which makes the code better understandable. Note that this rule considers both methods and constructors. If there are multiple assignments for a formal parameter, then only the first assignment is reported.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#avoidreassigningparameters\n```\n\n\npublic class Hello {\n  private void greet(String name) {\n    name = name.trim();\n    System.out.println(\"Hello \" + name);\n\n    // preferred\n    String trimmedName = name.trim();\n    System.out.println(\"Hello \" + trimmedName);\n  }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidStringBufferField",
        "real_name": "category/java/bestpractices.xml/AvoidStringBufferField",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "StringBuffers can grow quite a lot, and so may become a source of memory leak (if the owning class has a long life time).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "StringBuffers/StringBuilders can grow considerably, and so may become a source of memory leaks if held within objects with long lifetimes.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#avoidstringbufferfield\n```\n\n\npublic class Foo {\n    private StringBuffer buffer;    // potential memory leak as an instance variable;\n}\n\n        ```"
      },
      {
        "display_name": "AvoidUsingHardCodedIP",
        "real_name": "category/java/bestpractices.xml/AvoidUsingHardCodedIP",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not hard code the IP address ${variableName}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Application with hard-coded IP addresses can become impossible to deploy in some cases. Externalizing IP adresses is preferable.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#avoidusinghardcodedip\n```\n\n\npublic class Foo {\n    private String ip = \"127.0.0.1\";     // not recommended\n}\n\n        ```"
      },
      {
        "display_name": "CheckResultSet",
        "real_name": "category/java/bestpractices.xml/CheckResultSet",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Always check the return of one of the navigation method (next,previous,first,last) of a ResultSet.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Always check the return values of navigation methods (next, previous, first, last) of a ResultSet. If the value return is 'false', it should be handled properly.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#checkresultset\n```\n\n\nStatement stat = conn.createStatement();\nResultSet rst = stat.executeQuery(\"SELECT name FROM person\");\nrst.next();     // what if it returns false? bad form\nString firstName = rst.getString(1);\n\nStatement stat = conn.createStatement();\nResultSet rst = stat.executeQuery(\"SELECT name FROM person\");\nif (rst.next()) {    // result is properly examined and used\n    String firstName = rst.getString(1);\n    } else  {\n        // handle missing data\n}\n\n        ```"
      },
      {
        "display_name": "ConstantsInInterface",
        "real_name": "category/java/bestpractices.xml/ConstantsInInterface",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Using constants in interfaces is a bad practice.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Using constants in interfaces is a bad practice. Interfaces define types, constants are implementation details better placed in classes or enums. If the constants are best viewed as members of an enumerated type, you should export them with an enum type. For other scenarios, consider using a utility class. See Effective Java's 'Use interfaces only to define types'.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#constantsininterface\n```\n\n\npublic interface ConstantInterface {\n    public static final int CONST1 = 1; // violation, no fields allowed in interface!\n    static final int CONST2 = 1;        // violation, no fields allowed in interface!\n    final int CONST3 = 1;               // violation, no fields allowed in interface!\n    int CONST4 = 1;                     // violation, no fields allowed in interface!\n}\n\n// with ignoreIfHasMethods = false\npublic interface AnotherConstantInterface {\n    public static final int CONST1 = 1; // violation, no fields allowed in interface!\n\n    int anyMethod();\n}\n\n// with ignoreIfHasMethods = true\npublic interface YetAnotherConstantInterface {\n    public static final int CONST1 = 1; // no violation\n\n    int anyMethod();\n}\n \n        ```"
      },
      {
        "display_name": "DefaultLabelNotLastInSwitch",
        "real_name": "category/java/bestpractices.xml/DefaultLabelNotLastInSwitch",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The default label should be the last label in a switch statement or expression",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "By convention, the default label should be the last label in a switch statement or switch expression. Note: This rule has been renamed from \"DefaultLabelNotLastInSwitchStmt\" with PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#defaultlabelnotlastinswitch\n```\n\n\npublic class Foo {\n  void bar(int a) {\n   switch (a) {\n    case 1:  // do something\n       break;\n    default:  // the default case should be last, by convention\n       break;\n    case 2:\n       break;\n   }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "DoubleBraceInitialization",
        "real_name": "category/java/bestpractices.xml/DoubleBraceInitialization",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Double-brace initialization should be avoided",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Double brace initialisation is a pattern to initialise eg collections concisely. But it implicitly generates a new .class file, and the object holds a strong reference to the enclosing object. For those reasons, it is preferable to initialize the object normally, even though it's verbose. This rule counts any anonymous class which only has a single initializer as an instance of double-brace initialization. There is currently no way to find out whether a method called in the initializer is not accessible from outside the anonymous class, and those legit cases should be suppressed for the time being.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#doublebraceinitialization\n```\n\n// this is double-brace initialization\nreturn new ArrayList<String>(){{\n    add(\"a\");\n    add(\"b\");\n    add(\"c\");\n}};\n\n// the better way is to not create an anonymous class:\nList<String> a = new ArrayList<>();\na.add(\"a\");\na.add(\"b\");\na.add(\"c\");\nreturn a;\n\n        ```"
      },
      {
        "display_name": "ExhaustiveSwitchHasDefault",
        "real_name": "category/java/bestpractices.xml/ExhaustiveSwitchHasDefault",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The switch block is exhaustive even without the default case",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When switching over an enum or sealed class, the compiler will ensure that all possible cases are covered. If a case is missing, this will result in a compilation error. But if a default case is added, this compiler check is not performed anymore, leading to difficulties in noticing bugs at runtime. Not using a default case makes sure, a compiler error is introduced whenever a new enum constant or a new subclass to the sealed class hierarchy is added. We will discover this problem at compile time rather than at runtime (if at all). Note: The fix it not necessarily just removing the default case. Maybe a case is missing which needs to be implemented.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#exhaustiveswitchhasdefault\n```\n\n\nclass Foo {\n    enum MyEnum { A, B };\n\n    void doSomething(MyEnum e) {\n        switch(e) {\n            case A -> System.out.println(\"a\");\n            case B -> System.out.println(\"b\");\n            default -> System.out.println(\"unnecessary default\");\n        };\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ForLoopCanBeForeach",
        "real_name": "category/java/bestpractices.xml/ForLoopCanBeForeach",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "This 'for' loop can be replaced by a 'foreach' loop",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports loops that can be safely replaced with the foreach syntax. The rule considers loops over lists, arrays and iterators. A loop is safe to replace if it only uses the index variable to access an element of the list or array, only has one update statement, and loops through *every* element of the list or array left to right.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#forloopcanbeforeach\n```\n\n\npublic class MyClass {\n  void loop(List<String> l) {\n    for (int i = 0; i < l.size(); i++) { // pre Java 1.5\n      System.out.println(l.get(i));\n    }\n\n    for (String s : l) {        // post Java 1.5\n      System.out.println(s);\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "ForLoopVariableCount",
        "real_name": "category/java/bestpractices.xml/ForLoopVariableCount",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Too many control variables in the 'for' statement",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Having a lot of control variables in a 'for' loop makes it harder to see what range of values the loop iterates over. By default this rule allows a regular 'for' loop with only one variable.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#forloopvariablecount\n```\n\n\n// this will be reported with the default setting of at most one control variable in a for loop\nfor (int i = 0, j = 0; i < 10; i++, j += 2) {\n   foo();\n\n        ```"
      },
      {
        "display_name": "GuardLogStatement",
        "real_name": "category/java/bestpractices.xml/GuardLogStatement",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Logger calls should be surrounded by log level guards.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Whenever using a log level, one should check if it is actually enabled, or otherwise skip the associate String creation and manipulation, as well as any method calls. An alternative to checking the log level are substituting parameters, formatters or lazy logging with lambdas. The available alternatives depend on the actual logging framework.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#guardlogstatement\n```\n\n\n// Add this for performance - avoid manipulating strings if the logger may drop it\nif (log.isDebugEnabled()) {\n    log.debug(\"log something\" + param1 + \" and \" + param2 + \"concat strings\");\n}\n\n// Avoid the guarding if statement with substituting parameters\nlog.debug(\"log something {} and {}\", param1, param2);\n\n// Avoid the guarding if statement with formatters\nlog.debug(\"log something %s and %s\", param1, param2);\n\n// This is still an issue, method invocations may be expensive / have side-effects\nlog.debug(\"log something expensive: {}\", calculateExpensiveLoggingText());\n\n// Avoid the guarding if statement with lazy logging and lambdas\nlog.debug(\"log something expensive: {}\", () -> calculateExpensiveLoggingText());\n\n// … alternatively use method references\nlog.debug(\"log something expensive: {}\", this::calculateExpensiveLoggingText);\n\n        ```"
      },
      {
        "display_name": "ImplicitFunctionalInterface",
        "real_name": "category/java/bestpractices.xml/ImplicitFunctionalInterface",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Annotate this interface with @FunctionalInterface or with @SuppressWarnings(\"PMD.ImplicitFunctionalInterface\") to clarify your intent.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports functional interfaces that were not explicitly declared as such with the annotation `@FunctionalInterface`. If an interface is accidentally a functional interface, then it should bear a `@SuppressWarnings(\"PMD.ImplicitFunctionalInterface\")` annotation to make this clear.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#implicitfunctionalinterface\n```\n\n            \n            // The intent on this declaration is unclear, and the rule will report it.\n            public interface MyInterface {\n                void doSomething();\n            }\n\n            // This is clearly intended as a functional interface.\n            @FunctionalInterface\n            public interface MyInterface {\n                void doSomething();\n            }\n\n            // This is clearly NOT intended as a functional interface.\n            @SuppressWarnings(\"PMD.ImplicitFunctionalInterface\")\n            public interface MyInterface {\n                void doSomething();\n            }\n            \n        ```"
      },
      {
        "display_name": "JUnit4SuitesShouldUseSuiteAnnotation",
        "real_name": "category/java/bestpractices.xml/JUnit4SuitesShouldUseSuiteAnnotation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "JUnit 4 indicates test suites via annotations, not the suite method.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In JUnit 3, test suites are indicated by the suite() method. In JUnit 4, suites are indicated through the @RunWith(Suite.class) annotation.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#junit4suitesshouldusesuiteannotation\n```\n\n\npublic class BadExample extends TestCase{\n\n    public static Test suite(){\n        return new Suite();\n    }\n}\n\n@RunWith(Suite.class)\n@SuiteClasses( { TestOne.class, TestTwo.class })\npublic class GoodTest {\n}\n\n        ```"
      },
      {
        "display_name": "JUnit5TestShouldBePackagePrivate",
        "real_name": "category/java/bestpractices.xml/JUnit5TestShouldBePackagePrivate",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "JUnit 5 tests should be package-private.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports JUnit 5 test classes and methods that are not package-private. Contrary to JUnit 4 tests, which required public visibility to be run by the engine, JUnit 5 tests can also be run if they're package-private. Marking them as such is a good practice to limit their visibility. Test methods are identified as those which use `@Test`, `@RepeatedTest`, `@TestFactory`, `@TestTemplate` or `@ParameterizedTest`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#junit5testshouldbepackageprivate\n```\n\n            \nclass MyTest { // not public, that's fine\n    @Test\n    public void testBad() { } // should not have a public modifier\n\n    @Test\n    protected void testAlsoBad() { } // should not have a protected modifier\n\n    @Test\n    private void testNoRun() { } // should not have a private modifier\n\n    @Test\n    void testGood() { } // package private as expected\n}\n\n        ```"
      },
      {
        "display_name": "JUnitUseExpected",
        "real_name": "category/java/bestpractices.xml/JUnitUseExpected",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In JUnit4, use the @Test(expected) annotation to denote tests that should throw exceptions.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#junituseexpected\n```\n\n\npublic class MyTest {\n    @Test\n    public void testBad() {\n        try {\n            doSomething();\n            fail(\"should have thrown an exception\");\n        } catch (Exception e) {\n        }\n    }\n\n    @Test(expected=Exception.class)\n    public void testGood() {\n        doSomething();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "LiteralsFirstInComparisons",
        "real_name": "category/java/bestpractices.xml/LiteralsFirstInComparisons",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Position literals first in String comparisons",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Position literals first in all String comparisons, if the second argument is null then NullPointerExceptions can be avoided, they will just return false. Note that switching literal positions for compareTo and compareToIgnoreCase may change the result, see examples. Note that compile-time constant strings are treated like literals. This is because they are inlined into the class file, are necessarily non-null, and therefore cannot cause an NPE at runtime.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#literalsfirstincomparisons\n```\n\n            \nclass Foo {\n    boolean bar(String x) {\n        return x.equals(\"2\"); // should be \"2\".equals(x)\n    }\n    boolean bar(String x) {\n        return x.equalsIgnoreCase(\"2\"); // should be \"2\".equalsIgnoreCase(x)\n    }\n    boolean bar(String x) {\n        return (x.compareTo(\"bar\") > 0); // should be: \"bar\".compareTo(x) < 0\n    }\n    boolean bar(String x) {\n        return (x.compareToIgnoreCase(\"bar\") > 0); // should be: \"bar\".compareToIgnoreCase(x) < 0\n    }\n    boolean bar(String x) {\n        return x.contentEquals(\"bar\"); // should be \"bar\".contentEquals(x)\n    }\n\n    static final String CONSTANT = \"const\";\n    {\n        CONSTANT.equals(\"literal\"); // not reported, this is effectively the same as writing \"const\".equals(\"foo\")\n    }\n}\n\n        ```"
      },
      {
        "display_name": "LooseCoupling",
        "real_name": "category/java/bestpractices.xml/LooseCoupling",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using implementation types like ''{0}''; use the interface instead",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Excessive coupling to implementation types (e.g., `HashSet`) limits your ability to use alternate implementations in the future as requirements change. Whenever available, declare variables and parameters using a more general type (e.g, `Set`). This rule reports uses of concrete collection types. User-defined types that should be treated the same as interfaces can be configured with the property `allowedTypes`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#loosecoupling\n```\n\n\nimport java.util.ArrayList;\nimport java.util.HashSet;\n\npublic class Bar {\n    // sub-optimal approach\n    private ArrayList<SomeType> list = new ArrayList<>();\n\n    public HashSet<SomeType> getFoo() {\n        return new HashSet<SomeType>();\n    }\n\n    // preferred approach\n    private List<SomeType> list = new ArrayList<>();\n\n    public Set<SomeType> getFoo() {\n        return new HashSet<SomeType>();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "MethodReturnsInternalArray",
        "real_name": "category/java/bestpractices.xml/MethodReturnsInternalArray",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Returning ''{0}'' may expose an internal array.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Exposing internal arrays to the caller violates object encapsulation since elements can be removed or replaced outside of the object that owns it. It is safer to return a copy of the array.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#methodreturnsinternalarray\n```\n\n\npublic class SecureSystem {\n    UserData [] ud;\n    public UserData [] getUserData() {\n        // Don't return directly the internal array, return a copy\n        return ud;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "MissingOverride",
        "real_name": "category/java/bestpractices.xml/MissingOverride",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The method ''{0}'' is missing an @Override annotation.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Annotating overridden methods with @Override ensures at compile time that the method really overrides one, which helps refactoring and clarifies intent.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#missingoverride\n```\n\n            \n            public class Foo implements Runnable {\n                // This method is overridden, and should have an @Override annotation\n                public void run() {\n\n                }\n            }\n            \n        ```"
      },
      {
        "display_name": "NonExhaustiveSwitch",
        "real_name": "category/java/bestpractices.xml/NonExhaustiveSwitch",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Switch statements or expressions should be exhaustive, add a default case (or missing enum branches)",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Switch statements should be exhaustive, to make their control flow easier to follow. This can be achieved by adding a `default` case, or, if the switch is on an enum type, by ensuring there is one switch branch for each enum constant. This rule doesn't consider Switch Statements, that use Pattern Matching, since for these the compiler already ensures that all cases are covered. The same is true for Switch Expressions, which are also not considered by this rule.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#nonexhaustiveswitch\n```\n\n            \nclass Foo {{\n    int x = 2;\n    switch (x) {\n      case 1: int j = 6;\n      case 2: int j = 8;\n      // missing default: here\n    }\n}}\n\n        ```"
      },
      {
        "display_name": "OneDeclarationPerLine",
        "real_name": "category/java/bestpractices.xml/OneDeclarationPerLine",
        "category": "correctness",
        "severity": "info",
        "rule_title": "Use one line for each declaration, it enhances code readability.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Java allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#onedeclarationperline\n```\n\n\nString name;            // separate declarations\nString lastname;\n\nString name, lastname;  // combined declaration, a violation\n\nString name,\n       lastname;        // combined declaration on multiple lines, no violation by default.\n                        // Set property strictMode to true to mark this as violation.\n\n        ```"
      },
      {
        "display_name": "PreserveStackTrace",
        "real_name": "category/java/bestpractices.xml/PreserveStackTrace",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Thrown exception does not preserve the stack trace of exception ''{0}'' on all code paths",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports exceptions that are thrown from within a catch block, yet don't refer to the exception parameter declared by that catch block. The stack trace of the original exception could be lost, which makes the thrown exception less informative. To preserve the stack trace, the original exception may be used as the cause of the new exception, using `Throwable#initCause`, or passed as a constructor argument to the new exception. It may also be preserved using `Throwable#addSuppressed`. The rule actually assumes that any method or constructor that takes the original exception as argument preserves the original stack trace. The rule allows `InvocationTargetException` and `PrivilegedActionException` to be replaced by their cause exception. The discarded part of the stack trace is in those cases only JDK-internal code, which is not very useful. The rule also ignores exceptions whose name starts with `ignored`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#preservestacktrace\n```\n\n\npublic class Foo {\n    void good() {\n        try{\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            throw new Exception(e); // Ok, this initializes the cause of the new exception\n        }\n        try {\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            throw (IllegalStateException)new IllegalStateException().initCause(e); // second possibility to create exception chain.\n        }\n    }\n    void wrong() {\n        try{\n            Integer.parseInt(\"a\");\n        } catch (Exception e) {\n            // Violation: this only preserves the message and not the stack trace\n            throw new Exception(e.getMessage());\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "PrimitiveWrapperInstantiation",
        "real_name": "category/java/bestpractices.xml/PrimitiveWrapperInstantiation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not use `new {0}(...)`, prefer `{0}.valueOf(...)`",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports usages of primitive wrapper constructors. They are deprecated since Java 9 and should not be used. Even before Java 9, they can be replaced with usage of the corresponding static `valueOf` factory method (which may be automatically inserted by the compiler since Java 1.5). This has the advantage that it may reuse common instances instead of creating a new instance each time. Note that for `Boolean`, the named constants `Boolean.TRUE` and `Boolean.FALSE` are preferred instead of `Boolean.valueOf`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#primitivewrapperinstantiation\n```\n\n\n            public class Foo {\n                private Integer ZERO = new Integer(0);      // violation\n                private Integer ZERO1 = Integer.valueOf(0); // better\n                private Integer ZERO1 = 0;                  // even better\n            }\n            \n        ```"
      },
      {
        "display_name": "ReplaceEnumerationWithIterator",
        "real_name": "category/java/bestpractices.xml/ReplaceEnumerationWithIterator",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Consider replacing this Enumeration with the newer java.util.Iterator",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Consider replacing Enumeration usages with the newer java.util.Iterator\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#replaceenumerationwithiterator\n```\n\n\npublic class Foo implements Enumeration {\n    private int x = 42;\n    public boolean hasMoreElements() {\n        return true;\n    }\n    public Object nextElement() {\n        return String.valueOf(i++);\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ReplaceHashtableWithMap",
        "real_name": "category/java/bestpractices.xml/ReplaceHashtableWithMap",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Consider replacing this Hashtable with the newer java.util.Map",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Consider replacing Hashtable usage with the newer java.util.Map if thread safety is not required.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#replacehashtablewithmap\n```\n\n\npublic class Foo {\n    void bar() {\n        Hashtable h = new Hashtable();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ReplaceVectorWithList",
        "real_name": "category/java/bestpractices.xml/ReplaceVectorWithList",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Consider replacing this Vector with the newer java.util.List",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Consider replacing Vector usages with the newer java.util.ArrayList if expensive thread-safe operations are not required.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#replacevectorwithlist\n```\n\n\nimport java.util.Vector;\npublic class Foo {\n    void bar() {\n        Vector v = new Vector();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "SimplifiableTestAssertion",
        "real_name": "category/java/bestpractices.xml/SimplifiableTestAssertion",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Assertion may be simplified using {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports test assertions that may be simplified using a more specific assertion method. This enables better error messages, and makes the assertions more readable.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#simplifiabletestassertion\n```\n\n\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\nclass SomeTestClass {\n    Object a,b;\n    @Test\n    void testMethod() {\n        assertTrue(a.equals(b)); // could be assertEquals(a, b);\n        assertTrue(!a.equals(b)); // could be assertNotEquals(a, b);\n\n        assertTrue(!something); // could be assertFalse(something);\n        assertFalse(!something); // could be assertTrue(something);\n\n        assertTrue(a == b); // could be assertSame(a, b);\n        assertTrue(a != b); // could be assertNotSame(a, b);\n\n        assertTrue(a == null); // could be assertNull(a);\n        assertTrue(a != null); // could be assertNotNull(a);\n    }\n}\n            \n        ```"
      },
      {
        "display_name": "SystemPrintln",
        "real_name": "category/java/bestpractices.xml/SystemPrintln",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Usage of System.out/err",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "References to System.(out|err).print are usually intended for debugging purposes and can remain in the codebase even in production code. By using a logger one can enable/disable this behaviour at will (and by priority) and avoid clogging the Standard out log.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#systemprintln\n```\n\n \nclass Foo{\n    Logger log = Logger.getLogger(Foo.class.getName());\n    public void testA () {\n        System.out.println(\"Entering test\");\n        // Better use this\n        log.fine(\"Entering test\");\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnitTestAssertionsShouldIncludeMessage",
        "real_name": "category/java/bestpractices.xml/UnitTestAssertionsShouldIncludeMessage",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Unit test assertions should include a message",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Unit assertions should include an informative message - i.e., use the three-argument version of `assertEquals()`, not the two-argument version. This rule supports tests using JUnit (3, 4 and 5) and TestNG. Note: This rule was named JUnitAssertionsShouldIncludeMessage before PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unittestassertionsshouldincludemessage\n```\n\n            \npublic class Foo {\n    @Test\n    public void testSomething() {\n        assertEquals(\"foo\", \"bar\");\n        // Use the form:\n        // assertEquals(\"Foo does not equals bar\", \"foo\", \"bar\");\n        // instead\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnitTestContainsTooManyAsserts",
        "real_name": "category/java/bestpractices.xml/UnitTestContainsTooManyAsserts",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Unit tests should not contain more than ${maximumAsserts} assert(s).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Unit tests should not contain too many asserts. Many asserts are indicative of a complex test, for which it is harder to verify correctness. Consider breaking the test scenario into multiple, shorter test scenarios. Customize the maximum number of assertions used by this Rule to suit your needs. This rule checks for JUnit (3, 4 and 5) and TestNG Tests. Note: This rule was named JUnitTestContainsTooManyAsserts before PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unittestcontainstoomanyasserts\n```\n\n            \npublic class MyTestCase {\n    // Ok\n    @Test\n    public void testMyCaseWithOneAssert() {\n        boolean myVar = false;\n        assertFalse(\"should be false\", myVar);\n    }\n\n    // Bad, too many asserts (assuming max=1)\n    @Test\n    public void testMyCaseWithMoreAsserts() {\n        boolean myVar = false;\n        assertFalse(\"myVar should be false\", myVar);\n        assertEquals(\"should equals false\", false, myVar);\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnitTestShouldIncludeAssert",
        "real_name": "category/java/bestpractices.xml/UnitTestShouldIncludeAssert",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "This unit test should include assert() or fail()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Unit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does. This rule checks for JUnit (3, 4 and 5) and TestNG Tests. Note: This rule was named JUnitTestsShouldIncludeAssert before PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unittestshouldincludeassert\n```\n\n            \npublic class Foo {\n   @Test\n   public void testSomething() {\n      Bar b = findBar();\n      // This is better than having a NullPointerException\n      // assertNotNull(\"bar not found\", b);\n      b.work();\n   }\n}\n\n        ```"
      },
      {
        "display_name": "UnitTestShouldUseAfterAnnotation",
        "real_name": "category/java/bestpractices.xml/UnitTestShouldUseAfterAnnotation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Apply the correct annotation if this method is used to clean up the tests",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule detects methods called `tearDown()` that are not properly annotated as a cleanup method. This is primarily intended to assist in upgrading from JUnit 3, where tear down methods were required to be called `tearDown()`. To a lesser extent, this may help detect omissions even under newer JUnit versions or under TestNG, as long as you are following this convention to name the methods. * JUnit 4 will only execute methods annotated with `@After` after running each test. * JUnit 5 introduced `@AfterEach` and `@AfterAll` annotations to execute methods after each test or after all tests in the class, respectively. * TestNG provides the annotations `@AfterMethod` and `@AfterClass` to execute methods after each test or after tests in the class, respectively. Note: This rule was named JUnit4TestShouldUseAfterAnnotation before PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unittestshoulduseafterannotation\n```\n\n\npublic class MyTest {\n    public void tearDown() {\n        bad();\n    }\n}\npublic class MyTest2 {\n    @After public void tearDown() {\n        good();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnitTestShouldUseBeforeAnnotation",
        "real_name": "category/java/bestpractices.xml/UnitTestShouldUseBeforeAnnotation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Apply the correct annotation if this method is used to set up the tests",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule detects methods called `setUp()` that are not properly annotated as a setup method. This is primarily intended to assist in upgrading from JUnit 3, where setup methods were required to be called `setUp()`. To a lesser extent, this may help detect omissions even under newer JUnit versions or under TestNG, as long as you are following this convention to name the methods. * JUnit 4 will only execute methods annotated with `@Before` before all tests. * JUnit 5 introduced `@BeforeEach` and `@BeforeAll` annotations to execute methods before each test or before all tests in the class, respectively. * TestNG provides the annotations `@BeforeMethod` and `@BeforeClass` to execute methods before each test or before tests in the class, respectively. Note: This rule was named JUnit4TestShouldUseBeforeAnnotation before PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unittestshouldusebeforeannotation\n```\n\n            \npublic class MyTest {\n    public void setUp() {\n        bad();\n    }\n}\npublic class MyTest2 {\n    @Before public void setUp() {\n        good();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnitTestShouldUseTestAnnotation",
        "real_name": "category/java/bestpractices.xml/UnitTestShouldUseTestAnnotation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Unit tests should use the @Test annotation or won't be run. In case of JUnit 5, test methods might use @RepeatedTest, @TestFactory, @TestTemplate or @ParameterizedTest annotations instead.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The rule will detect any test method starting with \"test\" that is not properly annotated, and will therefore not be run. In JUnit 4, only methods annotated with the `@Test` annotation are executed. In JUnit 5, one of the following annotations should be used for tests: `@Test`, `@RepeatedTest`, `@TestFactory`, `@TestTemplate` or `@ParameterizedTest`. In TestNG, only methods annotated with the `@Test` annotation are executed. Note: This rule was named JUnit4TestShouldUseTestAnnotation before PMD 7.7.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unittestshouldusetestannotation\n```\n\n            \npublic class MyTest {\n    public void testBad() {\n        doSomething();\n    }\n\n    @Test\n    public void testGood() {\n        doSomething();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryVarargsArrayCreation",
        "real_name": "category/java/bestpractices.xml/UnnecessaryVarargsArrayCreation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Unnecessary explicit array creation for varargs method call",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports explicit array creation when a varargs is expected. For instance: ```java Arrays.asList(new String[] { \"foo\", \"bar\", }); ``` can be replaced by: ```java Arrays.asList(\"foo\", \"bar\"); ```\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unnecessaryvarargsarraycreation\n```\n\nimport java.util.Arrays;\n\nclass C {\n    static {\n        Arrays.asList(new String[]{\"foo\", \"bar\",});\n        // should be\n        Arrays.asList(\"foo\", \"bar\");\n    }\n}\n            ```"
      },
      {
        "display_name": "UnusedAssignment",
        "real_name": "category/java/bestpractices.xml/UnusedAssignment",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The value assigned to this variable is never used or always overwritten",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports assignments to variables that are never used before the variable is overwritten, or goes out of scope. Unused assignments are those for which 1. The variable is never read after the assignment, or 2. The assigned value is always overwritten by other assignments before the next read of the variable. The rule tracks assignements to fields of `this`, and static fields of the current class. This may cause some false positives in timing-sensitive concurrent code, which the rule cannot detect. The rule may be suppressed with the standard `@SuppressWarnings(\"unused\")` tag. The rule subsumes {% rule \"UnusedLocalVariable\" %}, and {% rule \"UnusedFormalParameter\" %}. Those violations are filtered out by default, in case you already have enabled those rules, but may be enabled with the property `reportUnusedVariables`. Variables whose name starts with `ignored` or `unused` are filtered out, as is standard practice for exceptions. Limitations: * The rule currently cannot know which method calls throw exceptions, or which exceptions they throw. In the body of a try block, every method or constructor call is assumed to throw. This may cause false-negatives. The only other language construct that is assumed to throw is the `throw` statement, in particular, things like `assert` statements, or NullPointerExceptions on dereference are ignored. * The rule cannot resolve assignments across constructors, when they're called with the special `this(...)` syntax. This may cause false-negatives. Both of those limitations may be partly relaxed in PMD 7.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unusedassignment\n```\n\n            \n            class A {\n                // this field initializer is redundant,\n                // it is always overwritten in the constructor\n                int f = 1;\n\n                A(int f) {\n                    this.f = f;\n                }\n            }\n        \n        ```"
      },
      {
        "display_name": "UnusedFormalParameter",
        "real_name": "category/java/bestpractices.xml/UnusedFormalParameter",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid unused {0} parameters such as ''{1}''.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports parameters of methods and constructors that are not referenced them in the method body. Parameters whose name starts with `ignored` or `unused` are filtered out. Removing unused formal parameters from public methods could cause a ripple effect through the code base. Hence, by default, this rule only considers private methods. To include non-private methods, set the `checkAll` property to `true`.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unusedformalparameter\n```\n\n\npublic class Foo {\n    private void bar(String howdy) {\n        // howdy is not used\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnusedLocalVariable",
        "real_name": "category/java/bestpractices.xml/UnusedLocalVariable",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid unused local variables such as ''{0}''.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects when a local variable is declared and/or assigned, but not used. Variables whose name starts with `ignored` or `unused` are filtered out.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unusedlocalvariable\n```\n\n\npublic class Foo {\n    public void doSomething() {\n        int i = 5; // Unused\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnusedPrivateField",
        "real_name": "category/java/bestpractices.xml/UnusedPrivateField",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid unused private fields such as ''{0}''.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects when a private field is declared and/or assigned a value, but not used. Since PMD 6.50.0 private fields are ignored, if the fields are annotated with any annotation or the enclosing class has any annotation. Annotations often enable a framework (such as dependency injection, mocking or e.g. Lombok) which use the fields by reflection or other means. This usage can't be detected by static code analysis. Previously these frameworks where explicitly allowed by listing their annotations in the property \"ignoredAnnotations\", but that turned out to be prone of false positive for any not explicitly considered framework.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unusedprivatefield\n```\n\n\npublic class Something {\n    private static int FOO = 2; // Unused\n    private int i = 5; // Unused\n    private int j = 6;\n    public int addOne() {\n        return j++;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnusedPrivateMethod",
        "real_name": "category/java/bestpractices.xml/UnusedPrivateMethod",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid unused private methods such as ''{0}''.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Unused Private Method detects when a private method is declared but is unused.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#unusedprivatemethod\n```\n\n\npublic class Something {\n    private void foo() {} // unused\n}\n\n        ```"
      },
      {
        "display_name": "UseCollectionIsEmpty",
        "real_name": "category/java/bestpractices.xml/UseCollectionIsEmpty",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Substitute calls to size() == 0 (or size() != 0, size() > 0, size() < 1) with calls to isEmpty()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The isEmpty() method on java.util.Collection is provided to determine if a collection has any elements. Comparing the value of size() to 0 does not convey intent as well as the isEmpty() method.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#usecollectionisempty\n```\n\n\npublic class Foo {\n    void good() {\n        List foo = getList();\n        if (foo.isEmpty()) {\n            // blah\n        }\n    }\n\n    void bad() {\n        List foo = getList();\n        if (foo.size() == 0) {\n            // blah\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseEnumCollections",
        "real_name": "category/java/bestpractices.xml/UseEnumCollections",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "This collection could be an {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Wherever possible, use `EnumSet` or `EnumMap` instead of `HashSet` and `HashMap` when the keys are of an enum type. The specialized enum collections are more space- and time-efficient. This rule reports constructor expressions for hash sets or maps whose key type is an enum type.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#useenumcollections\n```\n\n\n            import java.util.EnumMap;\n            import java.util.HashSet;\n\n            enum Example {\n                A, B, C;\n\n                public static Set<Example> newSet() {\n                    return new HashSet<>(); // Could be EnumSet.noneOf(Example.class)\n                }\n\n                public static <V> Map<Example, V> newMap() {\n                    return new HashMap<>(); // Could be new EnumMap<>(Example.class)\n                }\n            }\n            \n        ```"
      },
      {
        "display_name": "UseStandardCharsets",
        "real_name": "category/java/bestpractices.xml/UseStandardCharsets",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Please use StandardCharsets constants",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Starting with Java 7, StandardCharsets provides constants for common Charset objects, such as UTF-8. Using the constants is less error prone, and can provide a small performance advantage compared to `Charset.forName(...)` since no scan across the internal `Charset` caches is needed.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#usestandardcharsets\n```\n\n\npublic class UseStandardCharsets {\n    public void run() {\n\n        // looking up the charset dynamically\n        try (OutputStreamWriter osw = new OutputStreamWriter(out, Charset.forName(\"UTF-8\"))) {\n            osw.write(\"test\");\n        }\n\n        // best to use StandardCharsets\n        try (OutputStreamWriter osw = new OutputStreamWriter(out, StandardCharsets.UTF_8)) {\n            osw.write(\"test\");\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseTryWithResources",
        "real_name": "category/java/bestpractices.xml/UseTryWithResources",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Consider using a try-with-resources statement instead of explicitly closing the resource",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Java 7 introduced the try-with-resources statement. This statement ensures that each resource is closed at the end of the statement. It avoids the need of explicitly closing the resources in a finally block. Additionally exceptions are better handled: If an exception occurred both in the `try` block and `finally` block, then the exception from the try block was suppressed. With the `try`-with-resources statement, the exception thrown from the try-block is preserved.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#usetrywithresources\n```\n\n\npublic class TryWithResources {\n    public void run() {\n        InputStream in = null;\n        try {\n            in = openInputStream();\n            int i = in.read();\n        } catch (IOException e) {\n            e.printStackTrace();\n        } finally {\n            try {\n                if (in != null) in.close();\n            } catch (IOException ignored) {\n                // ignored\n            }\n        }\n\n        // better use try-with-resources\n        try (InputStream in2 = openInputStream()) {\n            int i = in2.read();\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseVarargs",
        "real_name": "category/java/bestpractices.xml/UseVarargs",
        "category": "correctness",
        "severity": "info",
        "rule_title": "Consider using varargs for methods or constructors which take an array the last parameter.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Java 5 introduced the varargs parameter declaration for methods and constructors. This syntactic sugar provides flexibility for users of these methods and constructors, allowing them to avoid having to deal with the creation of an array. Byte arrays in any method and String arrays in `public static void main(String[])` methods are ignored.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#usevarargs\n```\n\n\npublic class Foo {\n    public void foo(String s, Object[] args) {\n        // Do something here...\n    }\n\n    public void bar(String s, Object... args) {\n        // Ahh, varargs tastes much better...\n    }\n}\n\n        ```"
      },
      {
        "display_name": "WhileLoopWithLiteralBoolean",
        "real_name": "category/java/bestpractices.xml/WhileLoopWithLiteralBoolean",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The loop can be simplified.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "`do {} while (true);` requires reading the end of the statement before it is apparent that it loops forever, whereas `while (true) {}` is easier to understand. `do {} while (false);` is redundant, and if an inner variable scope is required, a block `{}` is sufficient. `while (false) {}` will never execute the block and can be removed in its entirety.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_bestpractices.html#whileloopwithliteralboolean\n```\n\n\npublic class Example {\n  {\n    while (true) { } // allowed\n    while (false) { } // disallowed\n    do { } while (true); // disallowed\n    do { } while (false); // disallowed\n    do { } while (false | false); // disallowed\n    do { } while (false || false); // disallowed\n  }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidSynchronizedAtMethodLevel",
        "real_name": "category/java/multithreading.xml/AvoidSynchronizedAtMethodLevel",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use block level locking rather than method level synchronization",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Method-level synchronization will pin virtual threads and can cause performance problems. Additionally, it can cause problems when new code is added to the method. Block-level ReentrantLock helps to ensure that only the code that needs mutual exclusion will be locked.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#avoidsynchronizedatmethodlevel\n```\n\n\npublic class Foo {\n    // Try to avoid this:\n    synchronized void foo() {\n        // code, that doesn't need synchronization\n        // ...\n        // code, that requires synchronization\n        if (!sharedData.has(\"bar\")) {\n            sharedData.add(\"bar\");\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n    // Prefer this:\n    Lock instanceLock = new ReentrantLock();\n\n    void bar() {\n        // code, that doesn't need synchronization\n        // ...\n        try {\n            instanceLock.lock();  // or instanceLock.tryLock(long time, TimeUnit unit)\n            if (!sharedData.has(\"bar\")) {\n                sharedData.add(\"bar\");\n            }\n        } finally {\n            instanceLock.unlock();\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n\n    // Try to avoid this for static methods:\n    static synchronized void fooStatic() {\n    }\n\n    // Prefer this:\n    private static Lock CLASS_LOCK = new ReentrantLock();\n\n    static void barStatic() {\n        // code, that doesn't need synchronization\n        // ...\n        try {\n            CLASS_LOCK.lock();\n            // code, that requires synchronization\n        } finally {\n            CLASS_LOCK.unlock();\n        }\n        // more code, that doesn't need synchronization\n        // ...\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidSynchronizedStatement",
        "real_name": "category/java/multithreading.xml/AvoidSynchronizedStatement",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use ReentrantLock rather than synchronization",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Synchronization will pin virtual threads and can cause performance problems.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#avoidsynchronizedstatement\n```\n\n      \npublic class Foo {\n    // Try to avoid this:\n    void foo() {\n        // code that doesn't need mutual exclusion\n        synchronized(this) {\n            // code that requires mutual exclusion\n        }\n        // more code that doesn't need mutual exclusion\n    }\n    // Prefer this:\n    Lock instanceLock = new ReentrantLock();\n\n    void foo() {\n        // code that doesn't need mutual exclusion\n        try {\n            instanceLock.lock();  // or instanceLock.tryLock(long time, TimeUnit unit)\n            // code that requires mutual exclusion\n        } finally {\n            instanceLock.unlock();\n        }\n        // more code that doesn't need mutual exclusion\n    }\n}\n\n    ```"
      },
      {
        "display_name": "AvoidThreadGroup",
        "real_name": "category/java/multithreading.xml/AvoidThreadGroup",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using java.lang.ThreadGroup; it is not thread safe",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using java.lang.ThreadGroup; although it is intended to be used in a threaded environment it contains methods that are not thread-safe.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#avoidthreadgroup\n```\n\n\npublic class Bar {\n    void buz() {\n        ThreadGroup tg = new ThreadGroup(\"My threadgroup\");\n        tg = new ThreadGroup(tg, \"my thread group\");\n        tg = Thread.currentThread().getThreadGroup();\n        tg = System.getSecurityManager().getThreadGroup();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidUsingVolatile",
        "real_name": "category/java/multithreading.xml/AvoidUsingVolatile",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use of modifier volatile is not recommended.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Use of the keyword 'volatile' is generally used to fine tune a Java application, and therefore, requires a good expertise of the Java Memory Model. Moreover, its range of action is somewhat misknown. Therefore, the volatile keyword should not be used for maintenance purpose and portability.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#avoidusingvolatile\n```\n\n\npublic class ThrDeux {\n  private volatile String var1; // not suggested\n  private          String var2; // preferred\n}\n\n        ```"
      },
      {
        "display_name": "DoNotUseThreads",
        "real_name": "category/java/multithreading.xml/DoNotUseThreads",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "To be compliant to J2EE, a webapp should not use any thread.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The J2EE specification explicitly forbids the use of threads. Threads are resources, that should be managed and monitored by the J2EE server. If the application creates threads on its own or uses own custom thread pools, then these threads are not managed, which could lead to resource exhaustion. Also, EJBs might be moved between machines in a cluster and only managed resources can be moved along.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#donotusethreads\n```\n\n\n// This is not allowed\npublic class UsingThread extends Thread {\n\n}\n\n// Neither this,\npublic class UsingExecutorService {\n\n    public void methodX() {\n        ExecutorService executorService = Executors.newFixedThreadPool(5);\n    }\n}\n\n// Nor this,\npublic class Example implements ExecutorService {\n\n}\n\n// Nor this,\npublic class Example extends AbstractExecutorService {\n\n}\n\n// Nor this\npublic class UsingExecutors {\n\n    public void methodX() {\n        Executors.newSingleThreadExecutor().submit(() -> System.out.println(\"Hello!\"));\n    }\n}\n\n        ```"
      },
      {
        "display_name": "DontCallThreadRun",
        "real_name": "category/java/multithreading.xml/DontCallThreadRun",
        "category": "correctness",
        "severity": "info",
        "rule_title": "Don't call Thread.run() explicitly, use Thread.start()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Explicitly calling Thread.run() method will execute in the caller's thread of control. Instead, call Thread.start() for the intended behavior.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#dontcallthreadrun\n```\n\n\nThread t = new Thread();\nt.run();            // use t.start() instead\nnew Thread().run(); // same violation\n\n        ```"
      },
      {
        "display_name": "DoubleCheckedLocking",
        "real_name": "category/java/multithreading.xml/DoubleCheckedLocking",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Double checked locking is not thread safe in Java.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Partially created objects can be returned by the Double Checked Locking pattern when used in Java. An optimizing JRE may assign a reference to the baz variable before it calls the constructor of the object the reference points to. Note: With Java 5, you can make Double checked locking work, if you declare the variable to be `volatile`. For more details refer to: <http://www.javaworld.com/javaworld/jw-02-2001/jw-0209-double.html> or <http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html>\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#doublecheckedlocking\n```\n\n\npublic class Foo {\n    /*volatile */ Object baz = null; // fix for Java5 and later: volatile\n    Object bar() {\n        if (baz == null) { // baz may be non-null yet not fully created\n            synchronized(this) {\n                if (baz == null) {\n                    baz = new Object();\n                }\n              }\n        }\n        return baz;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "NonThreadSafeSingleton",
        "real_name": "category/java/multithreading.xml/NonThreadSafeSingleton",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Singleton is not thread safe",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Non-thread safe singletons can result in bad state changes. Eliminate static singletons if possible by instantiating the object directly. Static singletons are usually not needed as only a single instance exists anyway. Other possible fixes are to synchronize the entire method or to use an [initialize-on-demand holder class](https://en.wikipedia.org/wiki/Initialization-on-demand_holder_idiom). Refrain from using the double-checked locking pattern. The Java Memory Model doesn't guarantee it to work unless the variable is declared as `volatile`, adding an uneeded performance penalty. [Reference](http://www.cs.umd.edu/~pugh/java/memoryModel/DoubleCheckedLocking.html) See Effective Java, item 48.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#nonthreadsafesingleton\n```\n\n\nprivate static Foo foo = null;\n\n//multiple simultaneous callers may see partially initialized objects\npublic static Foo getFoo() {\n    if (foo==null) {\n        foo = new Foo();\n    }\n    return foo;\n}\n\n        ```"
      },
      {
        "display_name": "UnsynchronizedStaticFormatter",
        "real_name": "category/java/multithreading.xml/UnsynchronizedStaticFormatter",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Static Formatter objects should be accessed in a synchronized manner",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Instances of `java.text.Format` are generally not synchronized. Sun recommends using separate format instances for each thread. If multiple threads must access a static formatter, the formatter must be synchronized on block level.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#unsynchronizedstaticformatter\n```\n\n\npublic class Foo {\n    private static final SimpleDateFormat sdf = new SimpleDateFormat();\n    void bar() {\n        sdf.format(); // poor, no thread-safety\n    }\n    void foo() {\n        synchronized (sdf) { // preferred\n            sdf.format();\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UseConcurrentHashMap",
        "real_name": "category/java/multithreading.xml/UseConcurrentHashMap",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "If you run in Java5 or newer and have concurrent access, you should use the ConcurrentHashMap implementation",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Since Java5 brought a new implementation of the Map designed for multi-threaded access, you can perform efficient map reads without blocking other threads.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#useconcurrenthashmap\n```\n\n\npublic class ConcurrentApp {\n  public void getMyInstance() {\n    Map map1 = new HashMap();           // fine for single-threaded access\n    Map map2 = new ConcurrentHashMap(); // preferred for use with multiple threads\n\n    // the following case will be ignored by this rule\n    Map map3 = someModule.methodThatReturnMap(); // might be OK, if the returned map is already thread-safe\n  }\n}\n\n        ```"
      },
      {
        "display_name": "UseNotifyAllInsteadOfNotify",
        "real_name": "category/java/multithreading.xml/UseNotifyAllInsteadOfNotify",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Call Thread.notifyAll() rather than Thread.notify()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Thread.notify() awakens a thread monitoring the object. If more than one thread is monitoring, then only one is chosen. The thread chosen is arbitrary; thus it's usually safer to call notifyAll() instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_java_multithreading.html#usenotifyallinsteadofnotify\n```\n\n\n  void bar() {\n    x.notify();\n    // If many threads are monitoring x, only one (and you won't know which) will be notified.\n    // use instead:\n    x.notifyAll();\n  }\n\n        ```"
      },
      {
        "display_name": "ClassStartNameEqualsEndName",
        "real_name": "category/modelica/bestpractices.xml/ClassStartNameEqualsEndName",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Class ends with an end clause with a different name",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Having a class starting with some name and some *different* name in its end clause is an error.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_modelica_bestpractices.html#classstartnameequalsendname\n```\n\n\nmodel SomeName\n  Real x;\nequation\n  x = 1;\nend SomeOtherName /* should be SomeName */;\n\n        ```"
      },
      {
        "display_name": "ConnectUsingNonConnector",
        "real_name": "category/modelica/bestpractices.xml/ConnectUsingNonConnector",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Arguments passed to `connect` should be connectors, not `{0}`",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Modelica specification requires passing connectors to the `connect` clause, while some implementations tolerate using it on plain variables, etc..\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_modelica_bestpractices.html#connectusingnonconnector\n```\n\n\npackage Example\n  connector Conn\n    Real x;\n    Real y;\n  end Conn;\n\n  model Test\n    input Conn c1;\n    output Conn c2;\n    input Real x1;\n    output Real x2;\n  equation\n    connect(c1, c2); // OK\n    connect(x1, x2); // error, x1 and x2 are not (both) connectors\n    // x1 = x2; // OK\n  end Test;\nend Example;\n\n        ```"
      },
      {
        "display_name": "AmbiguousResolution",
        "real_name": "category/modelica/bestpractices.xml/AmbiguousResolution",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Type resolution is ambiguous: {0}",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "There is multiple candidates for this type resolution. While generally this is not an error, this may indicate a bug.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_modelica_bestpractices.html#ambiguousresolution\n```\n\n\npackage Test\n  package Inc1\n    model X\n    end X;\n    model Y\n    end Y;\n  end Inc1;\n  package Inc2\n    model Y\n    end Y;\n    model Z\n    end Z;\n  end Inc2;\n  model B\n    import Test.Inc1.*;\n    import Test.Inc2.*;\n    Y y; // Class Y is imported twice\n  end B;\nend Test;\n\n        ```"
      },
      {
        "display_name": "OverrideBothEqualsAndHashcode",
        "real_name": "category/kotlin/errorprone.xml/OverrideBothEqualsAndHashcode",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Ensure you override both equals() and hashCode()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Override both public boolean Object.equals(Object other), and public int Object.hashCode(), or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_kotlin_errorprone.html#overridebothequalsandhashcode\n```\n\n\nclass Bar {        // poor, missing a hashCode() method\n    override fun equals(o: Any?): Boolean {\n      // do some comparison\n    }\n}\n\nclass Baz {        // poor, missing an equals() method\n    override fun hashCode(): Int {\n      // return some hash value\n    }\n}\n\nclass Foo {        // perfect, both methods provided\n    override fun equals(other: Any?): Boolean {\n      // do some comparison\n    }\n    override fun hashCode(): Int {\n      // return some hash value\n    }\n}\n\n        ```"
      },
      {
        "display_name": "FunctionNameTooShort",
        "real_name": "category/kotlin/bestpractices.xml/FunctionNameTooShort",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Function names should have non-cryptic and clear names.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "kotlin"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Function names should be easy to understand and describe the intention. Makes developers happy.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_kotlin_bestpractices.html#functionnametooshort\n```\n\n            \nfun cl() {} // violation, no unavailable attribute added to the function declaration\n\nfun calculateLayout() // no violation\n\n        ```"
      },
      {
        "display_name": "AssignmentInOperand",
        "real_name": "category/ecmascript/codestyle.xml/AssignmentInOperand",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid assignments in operands",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid assignments in operands; this can make code more complicated and harder to read. This is sometime indicative of the bug where the assignment operator '=' was used instead of the equality operator '=='.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#assignmentinoperand\n```\n\n\nvar x = 2;\n// Bad\nif ((x = getX()) == 3) {\n    alert('3!');\n}\n\nfunction getX() {\n    return 3;\n}\n\n        ```"
      },
      {
        "display_name": "ForLoopsMustUseBraces",
        "real_name": "category/ecmascript/codestyle.xml/ForLoopsMustUseBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using 'for' statements without curly braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using 'for' statements without using curly braces.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#forloopsmustusebraces\n```\n\n\n// Ok\nfor (var i = 0; i < 42; i++) {\n    foo();\n}\n\n// Bad\nfor (var i = 0; i < 42; i++)\n    foo();\n\n        ```"
      },
      {
        "display_name": "IfElseStmtsMustUseBraces",
        "real_name": "category/ecmascript/codestyle.xml/IfElseStmtsMustUseBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using 'if...else' statements without curly braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using if..else statements without using curly braces.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#ifelsestmtsmustusebraces\n```\n\n\n// Ok\nif (foo) {\n    x++;\n} else {\n    y++;\n}\n\n// Bad\nif (foo)\n    x++;\nelse\n    y++;\n\n        ```"
      },
      {
        "display_name": "IfStmtsMustUseBraces",
        "real_name": "category/ecmascript/codestyle.xml/IfStmtsMustUseBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using if statements without curly braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using if statements without using curly braces.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#ifstmtsmustusebraces\n```\n\n\n// Ok\nif (foo) {\n    x++;\n}\n\n// Bad\nif (foo)\n    x++;\n\n        ```"
      },
      {
        "display_name": "NoElseReturn",
        "real_name": "category/ecmascript/codestyle.xml/NoElseReturn",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The else block is unnecessary",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The else block in a if-else-construct is unnecessary if the `if` block contains a return. Then the content of the else block can be put outside. See also: <http://eslint.org/docs/rules/no-else-return>\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#noelsereturn\n```\n\n\n// Bad:\nif (x) {\n    return y;\n} else {\n    return z;\n}\n\n// Good:\nif (x) {\n    return y;\n}\nreturn z;\n\n        ```"
      },
      {
        "display_name": "UnnecessaryBlock",
        "real_name": "category/ecmascript/codestyle.xml/UnnecessaryBlock",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Unnecessary block.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "An unnecessary Block is present. Such Blocks are often used in other languages to introduce a new variable scope. Blocks do not behave like this in ECMAScipt, and using them can be misleading. Considering removing this unnecessary Block.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#unnecessaryblock\n```\n\n\nif (foo) {\n    // Ok\n}\nif (bar) {\n    {\n        // Bad\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnnecessaryParentheses",
        "real_name": "category/ecmascript/codestyle.xml/UnnecessaryParentheses",
        "category": "convention",
        "severity": "info",
        "rule_title": "Unnecessary parentheses.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Unnecessary parentheses should be removed.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#unnecessaryparentheses\n```\n\n\nvar x = 1; // Ok\nvar y = (1 + 1); // Ok\nvar z = ((1 + 1)); // Bad\n\n        ```"
      },
      {
        "display_name": "UnreachableCode",
        "real_name": "category/ecmascript/codestyle.xml/UnreachableCode",
        "category": "convention",
        "severity": "warning",
        "rule_title": "A ''return'', ''break'', ''continue'', or ''throw'' statement should be the last in a block.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A 'return', 'break', 'continue', or 'throw' statement should be the last in a block. Statements after these will never execute. This is a bug, or extremely poor style.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#unreachablecode\n```\n\n\n// Ok\nfunction foo() {\n   return 1;\n}\n// Bad\nfunction bar() {\n   var x = 1;\n   return x;\n   x = 2;\n}\n\n        ```"
      },
      {
        "display_name": "WhileLoopsMustUseBraces",
        "real_name": "category/ecmascript/codestyle.xml/WhileLoopsMustUseBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using 'while' statements without curly braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using 'while' statements without using curly braces.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_codestyle.html#whileloopsmustusebraces\n```\n\n\n// Ok\nwhile (true) {\n    x++;\n}\n\n// Bad\nwhile (true)\n    x++;\n\n        ```"
      },
      {
        "display_name": "AvoidConsoleStatements",
        "real_name": "category/ecmascript/performance.xml/AvoidConsoleStatements",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid console statements since they negatively impact performance",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Using the console for logging in production might negatively impact performance. In addition, logging could expose sensitive data.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_performance.html#avoidconsolestatements\n```\n\nvar myObj = getData();\nconsole.log(myObj); // bad\nconsole.debug(\"myObj:\", myObj); // bad\n```"
      },
      {
        "display_name": "AvoidTrailingComma",
        "real_name": "category/ecmascript/errorprone.xml/AvoidTrailingComma",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid trailing commas in object or array literals",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule helps improve code portability due to differences in browser treatment of trailing commas in object or array literals.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_errorprone.html#avoidtrailingcomma\n```\n\n\nfunction(arg) {\n    var obj1 = { a : 1 };   // Ok\n    var arr1 = [ 1, 2 ];    // Ok\n\n    var obj2 = { a : 1, };  // Syntax error in some browsers!\n    var arr2 = [ 1, 2, ];   // Length 2 or 3 depending on the browser!\n}\n\n        ```"
      },
      {
        "display_name": "EqualComparison",
        "real_name": "category/ecmascript/errorprone.xml/EqualComparison",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use '==='/'!==' to compare with true/false or Numbers",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Using == in condition may lead to unexpected results, as the variables are automatically casted to be of the same type. The === operator avoids the casting.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_errorprone.html#equalcomparison\n```\n\n\n// Ok\nif (someVar === true) {\n  ...\n}\n// Ok\nif (someVar !== 3) {\n  ...\n}\n// Bad\nif (someVar == true) {\n  ...\n}\n// Bad\nif (someVar != 3) {\n  ...\n}\n\n        ```"
      },
      {
        "display_name": "InaccurateNumericLiteral",
        "real_name": "category/ecmascript/errorprone.xml/InaccurateNumericLiteral",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The numeric literal ''{0}'' will have at different value at runtime.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The numeric literal will have a different value at runtime, which can happen if you provide too much precision in a floating point number. This may result in numeric calculations being in error. [Numbers](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number) in JavaScript are represented by 64bit double-precision floating point numbers internally and that's why there are some limits to the available precision of the number. See [Number.isSafeInteger()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/isSafeInteger) and [Number.EPSILON](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/EPSILON). Note: This rule was named InnaccurateNumericLiteral before PMD 7.4.0.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_errorprone.html#inaccuratenumericliteral\n```\n\n\nvar a = 9; // Ok\nvar b = 999999999999999; // Ok\nvar c = 999999999999999999999; // Not good\nvar w = 1.12e-4; // Ok\nvar x = 1.12; // Ok\nvar y = 1.1234567890123; // Ok\nvar z = 1.12345678901234567; // Not good\n\n        ```"
      },
      {
        "display_name": "AvoidWithStatement",
        "real_name": "category/ecmascript/bestpractices.xml/AvoidWithStatement",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using with - it's bad news",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using with - it's bad news\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_bestpractices.html#avoidwithstatement\n```\n\n\nwith (object) {\n    property = 3; // Might be on object, might be on window: who knows.\n}\n\n        ```"
      },
      {
        "display_name": "ConsistentReturn",
        "real_name": "category/ecmascript/bestpractices.xml/ConsistentReturn",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "A function should not mix 'return' statements with and without a result.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "ECMAScript does provide for return types on functions, and therefore there is no solid rule as to their usage. However, when a function does use returns they should all have a value, or all with no value. Mixed return usage is likely a bug, or at best poor style.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_bestpractices.html#consistentreturn\n```\n\n\n// Ok\nfunction foo() {\n    if (condition1) {\n        return true;\n    }\n    return false;\n}\n\n// Bad\nfunction bar() {\n    if (condition1) {\n        return;\n    }\n    return false;\n}\n\n        ```"
      },
      {
        "display_name": "GlobalVariable",
        "real_name": "category/ecmascript/bestpractices.xml/GlobalVariable",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using global variables",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule helps to avoid using accidently global variables by simply missing the \"var\" declaration. Global variables can lead to side-effects that are hard to debug.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_bestpractices.html#globalvariable\n```\n\n\nfunction(arg) {\n    notDeclaredVariable = 1;    // this will create a global variable and trigger the rule\n\n    var someVar = 1;            // this is a local variable, that's ok\n\n    window.otherGlobal = 2;     // this will not trigger the rule, although it is a global variable.\n}\n\n        ```"
      },
      {
        "display_name": "ScopeForInVariable",
        "real_name": "category/ecmascript/bestpractices.xml/ScopeForInVariable",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "The for-in loop variable ''{0}'' should be explicitly scoped with 'var' to avoid pollution.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A for-in loop in which the variable name is not explicitly scoped to the enclosing scope with the 'var' keyword can refer to a variable in an enclosing scope outside the nearest enclosing scope. This will overwrite the existing value of the variable in the outer scope when the body of the for-in is evaluated. When the for-in loop has finished, the variable will contain the last value used in the for-in, and the original value from before the for-in loop will be gone. Since the for-in variable name is most likely intended to be a temporary name, it is better to explicitly scope the variable name to the nearest enclosing scope with 'var'.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_bestpractices.html#scopeforinvariable\n```\n\n\n// Ok\nfunction foo() {\n    var p = 'clean';\n    function() {\n        var obj = { dirty: 'dirty' };\n        for (var p in obj) { // Use 'var' here.\n            obj[p] = obj[p];\n        }\n        return x;\n    }();\n\n    // 'p' still has value of 'clean'.\n}\n// Bad\nfunction bar() {\n    var p = 'clean';\n    function() {\n        var obj = { dirty: 'dirty' };\n        for (p in obj) { // Oh no, missing 'var' here!\n            obj[p] = obj[p];\n        }\n        return x;\n    }();\n\n    // 'p' is trashed and has value of 'dirty'!\n}\n\n        ```"
      },
      {
        "display_name": "UseBaseWithParseInt",
        "real_name": "category/ecmascript/bestpractices.xml/UseBaseWithParseInt",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Always provide a base when using parseInt() functions",
        "custom": false,
        "rule_param": null,
        "languages": [
          "js"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule checks for usages of parseInt. While the second parameter is optional and usually defaults to 10 (base/radix is 10 for a decimal number), different implementations may behave differently. It also improves readability, if the base is given. See also: [parseInt()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/parseInt)\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_ecmascript_bestpractices.html#usebasewithparseint\n```\n\n\nparseInt(\"010\");    // unclear, could be interpreted as 10 or 7 (with a base of 7)\n\nparseInt(\"10\", 10); // good\n\n        ```"
      },
      {
        "display_name": "ApexDoc",
        "real_name": "category/apex/documentation.xml/ApexDoc",
        "category": "convention",
        "severity": "warning",
        "rule_title": "ApexDoc comment is missing or incorrect",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule validates that: * ApexDoc comments are present for classes, methods, and properties that are public or global, excluding overrides and test classes (as well as the contents of test classes). * ApexDoc comments are present for classes, methods, and properties that are protected or private, depending on the properties `reportPrivate` and `reportProtected`. * ApexDoc comments should contain @description depending on the property `reportMissingDescription`. * ApexDoc comments on non-void, non-constructor methods should contain @return. * ApexDoc comments on void or constructor methods should not contain @return. * ApexDoc comments on methods with parameters should contain @param for each parameter, in the same order as the method signature. * ApexDoc comments are present on properties is only validated, if the property `reportProperty` is enabled. By setting `reportProperty` to false, you can ignore missing comments on properties. Method overrides and tests are both exempted from having ApexDoc.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_documentation.html#apexdoc\n```\n\n\n/**\n * @description Hello World\n */\npublic class HelloWorld {\n    /**\n     * @description Bar\n     * @return Bar\n     */\n    public Object bar() { return null; }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidDeeplyNestedIfStmts",
        "real_name": "category/apex/design.xml/AvoidDeeplyNestedIfStmts",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Deeply nested if..then statements are hard to read",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#avoiddeeplynestedifstmts\n```\n\n\npublic class Foo {\n    public void bar(Integer x, Integer y, Integer z) {\n        if (x>y) {\n            if (y>z) {\n                if (z==x) {\n                    // !! too deep\n                }\n            }\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnusedMethod",
        "real_name": "category/apex/design.xml/UnusedMethod",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Unused methods make understanding code harder",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid having unused methods since they make understanding and maintaining code harder. This rule finds not only unused private methods, but public methods as well, as long as the class itself is not entirely unused. A class is considered used, if it contains at least one other method/variable declaration that is used, as shown in the [test project file Foo.cls](https://github.com/pmd/pmd/blob/469b2a67ae375bde52bb33ccd4fb69e3c2993948/pmd-apex/src/test/resources/net/sourceforge/pmd/lang/apex/rule/design/UnusedMethod/project1/src/Foo.cls#L6-L8). [ApexLink](https://github.com/nawforce/ApexLink) is used to make this possible and this needs additional configuration. The environment variable `PMD_APEX_ROOT_DIRECTORY` needs to be set prior to executing PMD. With this variable the root directory of the Salesforce metadata, where `sfdx-project.json` resides, is specified. ApexLink can then load all the classes in the project and figure out, whether a method is used or not. For an accurate analysis it is important that the `PMD_APEX_ROOT_DIRECTORY` contains a complete set of metadata that may be referenced from the Apex source code, such as Custom Objects, Visualforce Pages, Flows and Labels. The `PMD_APEX_ROOT_DIRECTORY` directory must contain a `sfdx-project.json`, but metadata may be either in the [SFDX Source format](https://developer.salesforce.com/docs/atlas.en-us.sfdx_dev.meta/sfdx_dev/sfdx_dev_source_file_format.htm) or the older MDAPI format. The `packageDirectories` entries in `sfdx-project.json` are used to determine which directories to search for metadata, if a `.forceignore` file is present it will be respected. If the Apex code references external packages via namespace(s) you should declare these in your `sfdx-project.json` file using the 'plugins' syntax shown in the example below to avoid errors. Here's an example of a well-formed `sfdx-project.json`: ```json { \"packageDirectories\": [ { \"path\": \"src\", \"default\": true } ], \"namespace\": \"my_namespace\", \"sfdcLoginUrl\": \"https://login.salesforce.com\", \"sourceApiVersion\": \"52.0\", \"plugins\": { \"dependencies\": [ {\"namespace\": \"aa\"} ] } } ```\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#unusedmethod\n```\n\n            \npublic class Triangle {\n    private Double side1;\n    private Double side2;\n    private Double side3;\n\n    public Triangle(Double side1, Double side2, Double side3) {\n        this.side1 = side1;\n        this.side2 = side2;\n        this.side3 = side3;\n    }\n\n    // Method is not invoked so can be removed\n    public Double area() {\n        return (side1 + side2 + side3)/2;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "CyclomaticComplexity",
        "real_name": "category/apex/design.xml/CyclomaticComplexity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} ''{1}'' has a{2} cyclomatic complexity of {3}.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The complexity of methods directly affects maintenance costs and readability. Concentrating too much decisional logic in a single method makes its behaviour hard to read and change. Cyclomatic complexity assesses the complexity of a method by counting the number of decision points in a method, plus one for the method entry. Decision points are places where the control flow jumps to another place in the program. As such, they include all control flow statements, such as 'if', 'while', 'for', and 'case'. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity. By default, this rule reports methods with a complexity >= 10. Additionally, classes with many methods of moderate complexity get reported as well once the total of their methods' complexities reaches 40, even if none of the methods was directly reported. Reported methods should be broken down into several smaller methods. Reported classes should probably be broken down into subcomponents.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#cyclomaticcomplexity\n```\n\n\npublic class Complicated {\n  public void example() { // This method has a cyclomatic complexity of 12\n    int x = 0, y = 1, z = 2, t = 2;\n    boolean a = false, b = true, c = false, d = true;\n    if (a && b || b && d) {\n      if (y == z) {\n        x = 2;\n      } else if (y == t && !d) {\n        x = 2;\n      } else {\n        x = 2;\n      }\n    } else if (c && d) {\n      while (z < y) {\n        x = 2;\n      }\n    } else {\n      for (int n = 0; n < t; n++) {\n        x = 2;\n      }\n    }\n  }\n}\n\n        ```"
      },
      {
        "display_name": "CognitiveComplexity",
        "real_name": "category/apex/design.xml/CognitiveComplexity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} ''{1}'' has a{2} cognitive complexity of {3}, current threshold is {4}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Methods that are highly complex are difficult to read and more costly to maintain. If you include too much decisional logic within a single method, you make its behavior hard to understand and more difficult to modify. Cognitive complexity is a measure of how difficult it is for humans to read and understand a method. Code that contains a break in the control flow is more complex, whereas the use of language shorthands doesn't increase the level of complexity. Nested control flows can make a method more difficult to understand, with each additional nesting of the control flow leading to an increase in cognitive complexity. Information about Cognitive complexity can be found in the original paper here: <https://www.sonarsource.com/docs/CognitiveComplexity.pdf> By default, this rule reports methods with a complexity of 15 or more. Reported methods should be broken down into less complex components.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#cognitivecomplexity\n```\n\n            \npublic class Foo {\n    // Has a cognitive complexity of 0\n    public void createAccount() {\n        Account account = new Account(Name = 'PMD');\n        insert account;\n    }\n\n    // Has a cognitive complexity of 1\n    public Boolean setPhoneNumberIfNotExisting(Account a, String phone) {\n        if (a.Phone == null) {                          // +1\n            a.Phone = phone;\n            update a;\n            return true;\n        }\n\n        return false;\n    }\n\n    // Has a cognitive complexity of 4\n    public void updateContacts(List<Contact> contacts) {\n        List<Contact> contactsToUpdate = new List<Contact>();\n\n        for (Contact contact : contacts) {                           // +1\n            if (contact.Department == 'Finance') {                   // +2 (nesting = 1)\n                contact.Title = 'Finance Specialist';\n                contactsToUpdate.add(contact);\n            } else if (contact.Department == 'Sales') {              // +1\n                contact.Title = 'Sales Specialist';\n                contactsToUpdate.add(contact);\n            }\n        }\n\n        update contactsToUpdate;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ExcessiveClassLength",
        "real_name": "category/apex/design.xml/ExcessiveClassLength",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid really long classes.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methods apart the code becomes more managable and ripe for reuse.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#excessiveclasslength\n```\n\n\npublic class Foo {\n    public void bar1() {\n        // 1000 lines of code\n    }\n    public void bar2() {\n        // 1000 lines of code\n    }\n    public void bar3() {\n        // 1000 lines of code\n    }\n    public void barN() {\n        // 1000 lines of code\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ExcessiveParameterList",
        "real_name": "category/apex/design.xml/ExcessiveParameterList",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid long parameter lists.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#excessiveparameterlist\n```\n\n\n// too many arguments liable to be mixed up\npublic void addPerson(Integer birthYear, Integer birthMonth, Integer birthDate, Integer height, Integer weight, Integer ssn) {\n    // ...\n}\n// preferred approach\npublic void addPerson(Date birthdate, BodyMeasurements measurements, int ssn) {\n    // ...\n}\n\n        ```"
      },
      {
        "display_name": "ExcessivePublicCount",
        "real_name": "category/apex/design.xml/ExcessivePublicCount",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The class {0} has {1} public methods, attributes, and properties (limit: {2})",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Classes with large numbers of public methods, attributes, and properties require disproportionate testing efforts since combinatorial side effects grow rapidly and increase risk. Refactoring these classes into smaller ones not only increases testability and reliability but also allows new variations to be developed easily.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#excessivepubliccount\n```\n\n\npublic class Foo {\n    public String value;\n    public Bar something;\n    public Variable var;\n    // [... more more public attributes ...]\n\n    public void doWork() {}\n    public void doMoreWork() {}\n    public void doWorkAgain() {}\n    // [... more more public methods ...]\n\n    public String property1 { get; set; }\n    // [... more more public properties ...]\n}\n\n        ```"
      },
      {
        "display_name": "NcssConstructorCount",
        "real_name": "category/apex/design.xml/NcssConstructorCount",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The constructor has an NCSS line count of {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given constructor. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#ncssconstructorcount\n```\n\n\npublic class Foo extends Bar {\n    //this constructor only has 1 NCSS lines\n    public Foo() {\n        super();\n\n\n\n\n        super.foo();\n}\n}\n\n        ```"
      },
      {
        "display_name": "NcssMethodCount",
        "real_name": "category/apex/design.xml/NcssMethodCount",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The method ''{0}()'' has an NCSS line count of {1} (limit: {2})",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#ncssmethodcount\n```\n\n\npublic class Foo extends Bar {\n    //this method only has 1 NCSS lines\n    public Integer method() {\n        super.method();\n\n\n\n        return 1;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "NcssTypeCount",
        "real_name": "category/apex/design.xml/NcssTypeCount",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The type has an NCSS line count of {0}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given type. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#ncsstypecount\n```\n\n\n//this class only has 6 NCSS lines\npublic class Foo extends Bar {\n    public Foo() {\n        super();\n\n\n\n\n\n        super.foo();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "StdCyclomaticComplexity",
        "real_name": "category/apex/design.xml/StdCyclomaticComplexity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#stdcyclomaticcomplexity\n```\n\n\n// This has a Cyclomatic Complexity = 12\npublic class Foo {\n1   public void example() {\n2   if (a == b || (c == d && e == f)) {\n3       if (a1 == b1) {\n            fiddle();\n4       } else if a2 == b2) {\n            fiddle();\n        }  else {\n            fiddle();\n        }\n5   } else if (c == d) {\n6       while (c == d) {\n            fiddle();\n        }\n7   } else if (e == f) {\n8       for (int n = 0; n < h; n++) {\n            fiddle();\n        }\n    } else {\n        switch (z) {\n9           case 1:\n                fiddle();\n                break;\n10          case 2:\n                fiddle();\n                break;\n11          case 3:\n                fiddle();\n                break;\n12          default:\n                fiddle();\n                break;\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "TooManyFields",
        "real_name": "category/apex/design.xml/TooManyFields",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Too many fields",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields, possibly through grouping related fields in new objects. For example, a class with individual city/state/zip fields could park them within a single Address field.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_design.html#toomanyfields\n```\n\n\npublic class Person {\n    // too many separate fields\n    Integer birthYear;\n    Integer birthMonth;\n    Integer birthDate;\n    Double height;\n    Double weight;\n}\n\npublic class Person {\n    // this is more manageable\n    Date birthDate;\n    BodyMeasurements measurements;\n}\n\n        ```"
      },
      {
        "display_name": "ClassNamingConventions",
        "real_name": "category/apex/codestyle.xml/ClassNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for type declarations. This rule reports type declarations which do not match the regex that applies to their specific kind (e.g. enum or interface). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Pascal case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#classnamingconventions\n```\n\n            \npublic class FooClass { } // This is in pascal case, so it's ok\n\npublic class fooClass { } // This will be reported unless you change the regex\n\n        ```"
      },
      {
        "display_name": "IfElseStmtsMustUseBraces",
        "real_name": "category/apex/codestyle.xml/IfElseStmtsMustUseBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using 'if...else' statements without curly braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using if..else statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#ifelsestmtsmustusebraces\n```\n\n\n// this is OK\nif (foo) x++;\n\n// but this is not\nif (foo)\n    x = x+1;\nelse\n    x = x-1;\n\n        ```"
      },
      {
        "display_name": "IfStmtsMustUseBraces",
        "real_name": "category/apex/codestyle.xml/IfStmtsMustUseBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using if statements without curly braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using if statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#ifstmtsmustusebraces\n```\n\n \nif (foo)    // not recommended\n    x++;\n\nif (foo) {  // preferred approach\n    x++;\n}\n\n        ```"
      },
      {
        "display_name": "FieldDeclarationsShouldBeAtStart",
        "real_name": "category/apex/codestyle.xml/FieldDeclarationsShouldBeAtStart",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Field declaration for ''{0}'' should be before method declarations in its class",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Field declarations should appear before method declarations within a class.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#fielddeclarationsshouldbeatstart\n```\n\n\nclass Foo {\n    public Integer someField; // good\n\n    public void someMethod() {\n    }\n\n    public Integer anotherField; // bad\n}\n\n        ```"
      },
      {
        "display_name": "FieldNamingConventions",
        "real_name": "category/apex/codestyle.xml/FieldNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for field declarations. This rule reports variable declarations which do not match the regex that applies to their specific kind ---e.g. constants (static final), static field, final field. Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#fieldnamingconventions\n```\n\n\npublic class Foo {\n    Integer instanceField; // This is in camel case, so it's ok\n\n    Integer INSTANCE_FIELD; // This will be reported unless you change the regex\n}\n\n        ```"
      },
      {
        "display_name": "ForLoopsMustUseBraces",
        "real_name": "category/apex/codestyle.xml/ForLoopsMustUseBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using 'for' statements without curly braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using 'for' statements without using surrounding braces. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#forloopsmustusebraces\n```\n\n\nfor (int i = 0; i < 42; i++) // not recommended\n    foo();\n\nfor (int i = 0; i < 42; i++) { // preferred approach\n    foo();\n}\n\n        ```"
      },
      {
        "display_name": "FormalParameterNamingConventions",
        "real_name": "category/apex/codestyle.xml/FormalParameterNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for formal parameters of methods. This rule reports formal parameters which do not match the regex that applies to their specific kind (e.g. method parameter, or final method parameter). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#formalparameternamingconventions\n```\n\n\npublic class Foo {\n    public bar(Integer methodParameter) { } // This is in camel case, so it's ok\n\n    public baz(Integer METHOD_PARAMETER) { } // This will be reported unless you change the regex\n}\n\n        ```"
      },
      {
        "display_name": "LocalVariableNamingConventions",
        "real_name": "category/apex/codestyle.xml/LocalVariableNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for local variable declarations. This rule reports variable declarations which do not match the regex that applies to their specific kind (e.g. local variable, or final local variable). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#localvariablenamingconventions\n```\n\n\npublic class Foo {\n    public Foo() {\n        Integer localVariable; // This is in camel case, so it's ok\n\n        Integer LOCAL_VARIABLE; // This will be reported unless you change the regex\n    }\n}\n\n        ```"
      },
      {
        "display_name": "MethodNamingConventions",
        "real_name": "category/apex/codestyle.xml/MethodNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for method declarations. This rule reports method declarations which do not match the regex that applies to their specific kind (e.g. static method, or test method). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#methodnamingconventions\n```\n\n\npublic class Foo {\n    public void instanceMethod() { } // This is in camel case, so it's ok\n\n    public void INSTANCE_METHOD() { } // This will be reported unless you change the regex\n\n        ```"
      },
      {
        "display_name": "OneDeclarationPerLine",
        "real_name": "category/apex/codestyle.xml/OneDeclarationPerLine",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Use one statement for each line, it enhances code readability.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Apex allows the use of several variables declaration of the same type on one line. However, it can lead to quite messy code. This rule looks for several declarations on the same line.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#onedeclarationperline\n```\n\n\nInteger a, b;   // not recommended\n\nInteger a,\n        b;      // ok by default, can be flagged setting the strictMode property\n\nInteger a;      // preferred approach\nInteger b;\n\n        ```"
      },
      {
        "display_name": "PropertyNamingConventions",
        "real_name": "category/apex/codestyle.xml/PropertyNamingConventions",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} name ''{1}'' doesn''t match ''{2}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Configurable naming conventions for property declarations. This rule reports property declarations which do not match the regex that applies to their specific kind (e.g. static property, or instance property). Each regex can be configured through properties. By default this rule uses the standard Apex naming convention (Camel case).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#propertynamingconventions\n```\n\n\npublic class Foo {\n    public Integer instanceProperty { get; set; } // This is in camel case, so it's ok\n\n    public Integer INSTANCE_PROPERTY { get; set; } // This will be reported unless you change the regex\n}\n\n        ```"
      },
      {
        "display_name": "WhileLoopsMustUseBraces",
        "real_name": "category/apex/codestyle.xml/WhileLoopsMustUseBraces",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid using 'while' statements without curly braces",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using 'while' statements without using braces to surround the code block. If the code formatting or indentation is lost then it becomes difficult to separate the code being controlled from the rest.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_codestyle.html#whileloopsmustusebraces\n```\n\n\nwhile (true)    // not recommended\n    x++;\n\nwhile (true) {  // preferred approach\n    x++;\n}\n\n        ```"
      },
      {
        "display_name": "AvoidDebugStatements",
        "real_name": "category/apex/performance.xml/AvoidDebugStatements",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid debug statements since they impact on performance",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Debug statements contribute to longer transactions and consume Apex CPU time even when debug logs are not being captured. When possible make use of other debugging techniques such as the Apex Replay Debugger and Checkpoints that could cover *most* use cases. For other valid use cases that the statement is in fact valid make use of the `@SuppressWarnings` annotation or the `//NOPMD` comment.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_performance.html#avoiddebugstatements\n```\n\n\npublic class Foo {\n    public void bar() {\n        Account acc = [SELECT Name, Owner.Name FROM Account LIMIT 1];\n        System.debug(accs); // will get reported\n    }\n\n    @SuppressWarnings('PMD.AvoidDebugStatements')\n    public void baz() {\n        try {\n            Account myAccount = bar();\n        } catch (Exception e) {\n            System.debug(LoggingLevel.ERROR, e.getMessage()); // good to go\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidNonRestrictiveQueries",
        "real_name": "category/apex/performance.xml/AvoidNonRestrictiveQueries",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid {0} queries without a where or limit statement",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When working with very large amounts of data, unfiltered SOQL or SOSL queries can quickly cause [governor limit](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_gov_limits.htm) exceptions.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_performance.html#avoidnonrestrictivequeries\n```\n\n            \npublic class Something {\n    public static void main( String[] as ) {\n        Account[] accs1 = [ select id from account ];  // Bad\n        Account[] accs2 = [ select id from account limit 10 ];  // better\n\n        List<List<SObject>> searchList = [FIND 'map*' IN ALL FIELDS RETURNING Account (Id, Name), Contact, Opportunity, Lead]; // bad\n    }\n}\n\n        ```"
      },
      {
        "display_name": "EagerlyLoadedDescribeSObjectResult",
        "real_name": "category/apex/performance.xml/EagerlyLoadedDescribeSObjectResult",
        "category": "performance",
        "severity": "warning",
        "rule_title": "DescribeSObjectResult could be being loaded eagerly with all child relationships.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule finds `DescribeSObjectResult`s which could have been loaded eagerly via `SObjectType.getDescribe()`. When using `SObjectType.getDescribe()` or `Schema.describeSObjects()` without supplying a `SObjectDescribeOptions`, implicitly it will be using `SObjectDescribeOptions.DEFAULT` and then all child relationships will be loaded eagerly regardless whether this information is needed or not. This has a potential negative performance impact. Instead [`SObjectType.getDescribe(options)`](https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_class_Schema_SObjectType.htm#unique_346834793) or [`Schema.describeSObjects(SObjectTypes, options)`](https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_methods_system_schema.htm#apex_System_Schema_describeSObjects) should be used and a `SObjectDescribeOptions` should be supplied. By using `SObjectDescribeOptions.DEFERRED` the describe attributes will be lazily initialized at first use. Lazy loading `DescribeSObjectResult` on picklist fields is not always recommended. The lazy loaded describe objects might not be 100% accurate. It might be safer to explicitly use `SObjectDescribeOptions.FULL` in such a case. The same applies when you need the same `DescribeSObjectResult` to be consistent across different contexts and API versions. Properties: * `noDefault`: The behavior of `SObjectDescribeOptions.DEFAULT` changes from API Version 43 to 44: With API Version 43, the attributes are loaded eagerly. With API Version 44, they are loaded lazily. Simply using `SObjectDescribeOptions.DEFAULT` doesn't automatically make use of lazy loading. (unless \"Use Improved Schema Caching\" critical update is applied, `SObjectDescribeOptions.DEFAULT` does fallback to lazy loading) With this property enabled, such usages are found. You might ignore this, if you can make sure, that you don't run a mix of API Versions.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_performance.html#eagerlyloadeddescribesobjectresult\n```\n\n\npublic class Foo {\n    public static void bar(List<Account> accounts) {\n        if (Account.SObjectType.getDescribe(SObjectDescribeOptions.DEFERRED).isCreateable()) {\n            insert accounts;\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "OperationWithHighCostInLoop",
        "real_name": "category/apex/performance.xml/OperationWithHighCostInLoop",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid operations in loops that may impact performances",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule finds method calls inside loops that are known to be likely a performance issue. These methods should be called only once before the loop. Schema class methods like [Schema.getGlobalDescribe()](https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_methods_system_schema.htm#apex_System_Schema_getGlobalDescribe) and [Schema.describeSObjects()](https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_methods_system_schema.htm#apex_System_Schema_describeSObjects) might be slow depending on the size of your organization. Calling these methods repeatedly inside a loop creates a potential performance issue.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_performance.html#operationwithhighcostinloop\n```\n\npublic class GlobalDescribeExample {\n    // incorrect example\n    public void getGlobalDescribeInLoop() {\n        Set<String> fieldNameSet = new Set<String> {'Id'};\n        for (String fieldNameOrDefaultValue : fieldNameOrDefaultValueList) {\n            // Schema.getGlobalDescribe() should be called only once before the for-loop\n            if (Schema.getGlobalDescribe().get(objectName).getDescribe().fields.getMap().containsKey(fieldNameOrDefaultValue.trim())) {\n                fieldNameSet.add(fieldNameOrDefaultValue);\n            }\n        }\n    }\n\n    // corrected example\n    public void getGlobalDescribeInLoopCorrected() {\n        Map<String, Schema.SObjectField> fieldMap = Schema.getGlobalDescribe().get(objectName).getDescribe().fields.getMap();\n        Set<String> fieldNameSet = new Set<String> {'Id'};\n        for (String fieldNameOrDefaultValue : fieldNameOrDefaultValueList) {\n            if (fieldMap.containsKey(fieldNameOrDefaultValue.trim())) {\n                fieldNameSet.add(fieldNameOrDefaultValue);\n            }\n        }\n    }\n}\n        ```"
      },
      {
        "display_name": "OperationWithLimitsInLoop",
        "real_name": "category/apex/performance.xml/OperationWithLimitsInLoop",
        "category": "performance",
        "severity": "warning",
        "rule_title": "Avoid operations in loops that may hit governor limits",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Database class methods, DML operations, SOQL queries, SOSL queries, Approval class methods, Email sending, async scheduling or queueing within loops can cause governor limit exceptions. Instead, try to batch up the data into a list and invoke the operation once on that list of data outside the loop.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_performance.html#operationwithlimitsinloop\n```\n\n            \npublic class Something {\n    public void databaseMethodInsideOfLoop(List<Account> accounts) {\n        for (Account a : accounts) {\n            Database.insert(a);\n        }\n    }\n\n    public void dmlInsideOfLoop() {\n        for (Integer i = 0; i < 151; i++) {\n            Account account;\n            // ...\n            insert account;\n        }\n    }\n\n    public void soqlInsideOfLoop() {\n        for (Integer i = 0; i < 10; i++) {\n            List<Account> accounts = [SELECT Id FROM Account];\n        }\n    }\n\n    public void soslInsideOfLoop() {\n        for (Integer i = 0; i < 10; i++) {\n            List<List<SObject>> searchList = [FIND 'map*' IN ALL FIELDS RETURNING Account (Id, Name), Contact, Opportunity, Lead];\n        }\n    }\n\n    public void messageInsideOfLoop() {\n        for (Integer i = 0; i < 10; i++) {\n            Messaging.SingleEmailMessage email = new Messaging.SingleEmailMessage();\n            Messaging.sendEmail(new Messaging.SingleEmailMessage[]{email});\n        }\n    }\n\n    public void approvalInsideOfLoop(Account[] accs) {\n        for (Integer i = 0; i < 10; i++) {\n            Account acc = accs[i];\n            Approval.ProcessSubmitRequest req = new Approval.ProcessSubmitRequest();\n            req.setObjectId(acc.Id);\n            Approval.process(req);\n            Approval.lock(acc);\n            Approval.unlock(acc);\n        }\n    }\n\n    public void asyncInsideOfLoop() {\n        for (Integer i = 0; i < 10; i++) {\n            System.enqueueJob(new MyQueueable());\n            System.schedule('x', '0 0 0 1 1 ?', new MySchedule());\n            System.scheduleBatch(new MyBatch(), 'x', 1);\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexBadCrypto",
        "real_name": "category/apex/security.xml/ApexBadCrypto",
        "category": "security",
        "severity": "warning",
        "rule_title": "Apex classes should use random IV/key",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The rule makes sure you are using randomly generated IVs and keys for `Crypto` calls. Hard-wiring these values greatly compromises the security of encrypted data.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexbadcrypto\n```\n\n\npublic without sharing class Foo {\n    Blob hardCodedIV = Blob.valueOf('Hardcoded IV 123');\n    Blob hardCodedKey = Blob.valueOf('0000000000000000');\n    Blob data = Blob.valueOf('Data to be encrypted');\n    Blob encrypted = Crypto.encrypt('AES128', hardCodedKey, hardCodedIV, data);\n}\n\n        ```"
      },
      {
        "display_name": "ApexCRUDViolation",
        "real_name": "category/apex/security.xml/ApexCRUDViolation",
        "category": "security",
        "severity": "warning",
        "rule_title": "Validate CRUD permission before SOQL/DML operation or enforce user mode",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The rule validates you are checking for access permissions before a SOQL/SOSL/DML operation. Since Apex runs by default in system mode not having proper permissions checks results in escalation of privilege and may produce runtime errors. This check forces you to handle such scenarios. Since Winter '23 (API Version 56) you can enforce user mode for database operations by using `WITH USER_MODE` in SOQL. This makes Apex to respect Field-level security (FLS) and object permissions of the running user. When using user mode, no violation is reported by this rule. By default, the rule allows access checks can be performed using system Apex provisions such as `DescribeSObjectResult.isAccessible/Createable/etc.`, the SOQL `WITH SECURITY_ENFORCED` clause, or using the open source [Force.com ESAPI](https://github.com/forcedotcom/force-dot-com-esapi) class library. Because it is common to use authorization facades to assist with this task, the rule also allows configuration of regular expression-based patterns for the methods used to authorize each type of CRUD operation. These pattern are configured via the following properties: * `createAuthMethodPattern`/`createAuthMethodTypeParamIndex` - a pattern for the method used for create authorization and an optional 0-based index of the parameter passed to that method that denotes the `SObjectType` being authorized for create. * `readAuthMethodPattern`/`readAuthMethodTypeParamIndex` - a pattern for the method used for read authorization and an optional 0-based index of the parameter passed to that method that denotes the `SObjectType` being authorized for read. * `updateAuthMethodPattern`/`updateAuthMethodTypeParamIndex` - a pattern for the method used for update authorization and an optional 0-based index of the parameter passed to that method that denotes the `SObjectType` being authorized for update. * `deleteAuthMethodPattern`/`deleteAuthMethodTypeParamIndex` - a pattern for the method used for delete authorization and an optional 0-based index of the parameter passed to that method that denotes the `SObjectType` being authorized for delete. * `undeleteAuthMethodPattern`/`undeleteAuthMethodTypeParamIndex` - a pattern for the method used for undelete authorization and an optional 0-based index of the parameter passed to that method that denotes the `SObjectType` being authorized for undelete. * `mergeAuthMethodPattern`/`mergeAuthMethodTypeParamIndex` - a pattern for the method used for merge authorization and an optional 0-based index of the parameter passed to that method that denotes the `SObjectType` being authorized for merge. The following example shows how the rule can be configured for the [sirono-common](https://github.com/SCWells72/sirono-common) [`AuthorizationUtil`](https://github.com/SCWells72/sirono-common#authorization-utilities) class: ```xml <rule ref=\"category/apex/security.xml/ApexCRUDViolation\" message=\"Validate CRUD permission before SOQL/DML operation\"> <priority>3</priority> <properties> <property name=\"createAuthMethodPattern\" value=\"AuthorizationUtil\\.(is|assert)(Createable|Upsertable)\"/> <property name=\"readAuthMethodPattern\" value=\"AuthorizationUtil\\.(is|assert)Accessible\"/> <property name=\"updateAuthMethodPattern\" value=\"AuthorizationUtil\\.(is|assert)(Updateable|Upsertable)\"/> <property name=\"deleteAuthMethodPattern\" value=\"AuthorizationUtil\\.(is|assert)Deletable\"/> <property name=\"undeleteAuthMethodPattern\" value=\"AuthorizationUtil\\.(is|assert)Undeletable\"/> <property name=\"mergeAuthMethodPattern\" value=\"AuthorizationUtil\\.(is|assert)Mergeable\"/> </properties> </rule> ``` Note: This rule will produce false positives for VF getter methods. In VF getters the access permission check happens automatically and is not needed explicitly. However, the rule can't reliably determine whether a getter is a VF getter or not and reports a violation in any case. In such cases, the violation should be [suppressed](pmd_userdocs_suppressing_warnings.html).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexcrudviolation\n```\n\n\npublic class Foo {\n    public Contact foo(String status, String ID) {\n\n        // validate you can actually query what you intend to retrieve\n        Contact c = [SELECT Status__c FROM Contact WHERE Id=:ID WITH SECURITY_ENFORCED];\n\n        // Make sure we can update the database before even trying\n        if (!Schema.sObjectType.Contact.fields.Status__c.isUpdateable()) {\n            return null;\n        }\n\n        c.Status__c = status;\n        update c;\n        return c;\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexDangerousMethods",
        "real_name": "category/apex/security.xml/ApexDangerousMethods",
        "category": "security",
        "severity": "warning",
        "rule_title": "Calling potentially dangerous method",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Checks against calling dangerous methods. For the time being, it reports: * Against `FinancialForce`'s `Configuration.disableTriggerCRUDSecurity()`. Disabling CRUD security opens the door to several attacks and requires manual validation, which is unreliable. * Calling `System.debug` passing sensitive data as parameter, which could lead to exposure of private data.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexdangerousmethods\n```\n\n\npublic class Foo {\n    public Foo() {\n        Configuration.disableTriggerCRUDSecurity();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexInsecureEndpoint",
        "real_name": "category/apex/security.xml/ApexInsecureEndpoint",
        "category": "security",
        "severity": "warning",
        "rule_title": "Apex callouts should use encrypted communication channels",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Checks against accessing endpoints under plain **http**. You should always use **https** for security.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexinsecureendpoint\n```\n\n\npublic without sharing class Foo {\n    void foo() {\n        HttpRequest req = new HttpRequest();\n        req.setEndpoint('http://localhost:com');\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexOpenRedirect",
        "real_name": "category/apex/security.xml/ApexOpenRedirect",
        "category": "security",
        "severity": "warning",
        "rule_title": "Apex classes should safely redirect to a known location",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Checks against redirects to user-controlled locations. This prevents attackers from redirecting users to phishing sites.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexopenredirect\n```\n\n\npublic without sharing class Foo {\n    String unsafeLocation = ApexPage.getCurrentPage().getParameters.get('url_param');\n    PageReference page() {\n       return new PageReference(unsafeLocation);\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexSharingViolations",
        "real_name": "category/apex/security.xml/ApexSharingViolations",
        "category": "security",
        "severity": "warning",
        "rule_title": "Apex classes should declare a sharing model if DML or SOQL/SOSL is used",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detect classes declared without explicit sharing mode if DML methods are used. This forces the developer to take access restrictions into account before modifying objects.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexsharingviolations\n```\n\n\npublic without sharing class Foo {\n    // DML operation here\n}\n\n        ```"
      },
      {
        "display_name": "ApexSOQLInjection",
        "real_name": "category/apex/security.xml/ApexSOQLInjection",
        "category": "security",
        "severity": "warning",
        "rule_title": "Avoid untrusted/unescaped variables in DML query",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects the usage of untrusted / unescaped variables in DML queries.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexsoqlinjection\n```\n\n\npublic class Foo {\n    public void test1(String t1) {\n        Database.query('SELECT Id FROM Account' + t1);\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexSuggestUsingNamedCred",
        "real_name": "category/apex/security.xml/ApexSuggestUsingNamedCred",
        "category": "security",
        "severity": "warning",
        "rule_title": "Suggest named credentials for authentication",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects hardcoded credentials used in requests to an endpoint. You should refrain from hardcoding credentials: * They are hard to mantain by being mixed in application code * Particularly hard to update them when used from different classes * Granting a developer access to the codebase means granting knowledge of credentials, keeping a two-level access is not possible. * Using different credentials for different environments is troublesome and error-prone. Instead, you should use *Named Credentials* and a callout endpoint. For more information, you can check [this](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_callouts_named_credentials.htm)\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexsuggestusingnamedcred\n```\n\n\npublic class Foo {\n    public void foo(String username, String password) {\n        Blob headerValue = Blob.valueOf(username + ':' + password);\n        String authorizationHeader = 'BASIC ' + EncodingUtil.base64Encode(headerValue);\n        req.setHeader('Authorization', authorizationHeader);\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexXSSFromEscapeFalse",
        "real_name": "category/apex/security.xml/ApexXSSFromEscapeFalse",
        "category": "security",
        "severity": "warning",
        "rule_title": "Apex classes should escape Strings in error messages",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reports on calls to `addError` with disabled escaping. The message passed to `addError` will be displayed directly to the user in the UI, making it prime ground for XSS attacks if unescaped.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexxssfromescapefalse\n```\n\n\npublic without sharing class Foo {\n    Trigger.new[0].addError(vulnerableHTMLGoesHere, false);\n}\n\n        ```"
      },
      {
        "display_name": "ApexXSSFromURLParam",
        "real_name": "category/apex/security.xml/ApexXSSFromURLParam",
        "category": "security",
        "severity": "warning",
        "rule_title": "Apex classes should escape/sanitize Strings obtained from URL parameters",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Makes sure that all values obtained from URL parameters are properly escaped / sanitized to avoid XSS attacks.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_security.html#apexxssfromurlparam\n```\n\n\npublic without sharing class Foo {\n    String unescapedstring = ApexPage.getCurrentPage().getParameters.get('url_param');\n    String usedLater = unescapedstring;\n}\n\n        ```"
      },
      {
        "display_name": "ApexCSRF",
        "real_name": "category/apex/errorprone.xml/ApexCSRF",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid making DML operations in Apex class constructor or initializers",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Having DML operations in Apex class constructor or initializers can have unexpected side effects: By just accessing a page, the DML statements would be executed and the database would be modified. Just querying the database is permitted. In addition to constructors and initializers, any method called `init` is checked as well. Salesforce Apex already protects against this scenario and raises a runtime exception. Note: This rule has been moved from category \"Security\" to \"Error Prone\" with PMD 6.21.0, since using DML in constructors is not a security problem, but crashes the application.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#apexcsrf\n```\n\n      \npublic class Foo {\n    // initializer\n    {\n        insert data;\n    }\n\n    // static initializer\n    static {\n        insert data;\n    }\n\n    // constructor\n    public Foo() {\n        insert data;\n    }\n}\n\n    ```"
      },
      {
        "display_name": "AvoidDirectAccessTriggerMap",
        "real_name": "category/apex/errorprone.xml/AvoidDirectAccessTriggerMap",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid directly accessing Trigger.old and Trigger.new",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid directly accessing Trigger.old and Trigger.new as it can lead to a bug. Triggers should be bulkified and iterate through the map to handle the actions for each item separately.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#avoiddirectaccesstriggermap\n```\n\n      \ntrigger AccountTrigger on Account (before insert, before update) {\n   Account a = Trigger.new[0]; //Bad: Accessing the trigger array directly is not recommended.\n\n   for ( Account a : Trigger.new ) {\n        //Good: Iterate through the trigger.new array instead.\n   }\n}\n\n    ```"
      },
      {
        "display_name": "AvoidHardcodingId",
        "real_name": "category/apex/errorprone.xml/AvoidHardcodingId",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Hardcoding Id's is bound to break when changing environments.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When deploying Apex code between sandbox and production environments, or installing Force.com AppExchange packages, it is essential to avoid hardcoding IDs in the Apex code. By doing so, if the record IDs change between environments, the logic can dynamically identify the proper data to operate against and not fail.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#avoidhardcodingid\n```\n\n      \npublic without sharing class Foo {\n    void foo() {\n        //Error - hardcoded the record type id\n        if (a.RecordTypeId == '012500000009WAr') {\n            //do some logic here.....\n        } else if (a.RecordTypeId == '0123000000095Km') {\n            //do some logic here for a different record type...\n        }\n    }\n}\n\n    ```"
      },
      {
        "display_name": "AvoidNonExistentAnnotations",
        "real_name": "category/apex/errorprone.xml/AvoidNonExistentAnnotations",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use of non existent annotations will lead to broken Apex code which will not compile in the future.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Apex supported non existent annotations for legacy reasons. In the future, use of such non-existent annotations could result in broken apex code that will not compile. This will prevent users of garbage annotations from being able to use legitimate annotations added to Apex in the future. A full list of supported annotations can be found at https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_annotation.htm\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#avoidnonexistentannotations\n```\n\n      \n@NonExistentAnnotation public class ClassWithNonexistentAnnotation {\n    @NonExistentAnnotation public void methodWithNonExistentAnnotation() {\n        // ...\n    }\n}\n\n    ```"
      },
      {
        "display_name": "AvoidStatefulDatabaseResult",
        "real_name": "category/apex/errorprone.xml/AvoidStatefulDatabaseResult",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Using stateful `Database.[x]Result` instance variables can cause serialization errors between successive batch iterations.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Using instance variables of the following types (or collections of these types) within a stateful batch class can cause serialization errors between batch iterations: - `Database.DeleteResult` - `Database.EmptyRecycleBinResult` - `Database.MergeResult` - `Database.SaveResult` - `Database.UndeleteResult` - `Database.UpsertResult` This error occurs inconsistently and asynchronously with an obscure error message - making it particularly challenging to troubleshoot. See [this issue](https://issues.salesforce.com/issue/a028c00000qPwlqAAC/stateful-batch-job-that-stores-databasesaveresult-failed-after-validation-errors-throws-error-during-deserialization) for more details. These errors can be avoided by marking the variable as static, transient, or using a different data type that is safe to serialize.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#avoidstatefuldatabaseresult\n```\n\n      // Violating\npublic class Example implements Database.Batchable<SObject>, Database.Stateful {\n  List<Database.SaveResult> results = new List<Database.SaveResult>(); // This can cause failures\n\n  public Database.Querylocator start(Database.BatchableContext context) {\n    return Database.getQueryLocator('SELECT Id FROM Account');\n  }\n\n  public void execute(Database.BatchableContext context, List<SObject> scope) {\n    Database.SaveResult[] saveResults = Database.update(scope, false);\n    results.addAll(saveResults);\n  }\n\n  public void finish(database.BatchableContext context) {\n  }\n}\n\n// Compliant\npublic class Example implements Database.Batchable<SObject>, Database.Stateful {\n  List<StatefulResult> results = new List<StatefulResult>(); // Use a different custom type to persist state\n\n  public Database.Querylocator start(Database.BatchableContext context) {\n    return Database.getQueryLocator('SELECT Id FROM Account');\n  }\n\n  public void execute(Database.BatchableContext context, List<SObject> scope) {\n    Database.SaveResult[] saveResults = Database.update(scope, false);\n    for (Database.SaveResult result : saveResults) {\n      results.add(new StatefulResult(result));\n    }\n  }\n\n  public void finish(database.BatchableContext context) {\n  }\n\n}\n\npublic class StatefulResult {\n  private Boolean isSuccess;\n  private Id id;\n  private Database.Error[] errors;\n\n  public StatefulResult(Database.SaveResult result) {\n    isSuccess = result.isSuccess();\n    id = result.getId();\n    errors = result.getErrors();\n  }\n\n  public Boolean isSuccess() {\n    return isSuccess;\n  }\n\n  public Id getId() {\n    return id;\n  }\n\n  public Database.Error[] getErrors() {\n    return errors;\n  }\n}\n\n    ```"
      },
      {
        "display_name": "EmptyCatchBlock",
        "real_name": "category/apex/errorprone.xml/EmptyCatchBlock",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty catch blocks",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty Catch Block finds instances where an exception is caught, but nothing is done. In most circumstances, this swallows an exception which should either be acted on or reported.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#emptycatchblock\n```\n\n      \npublic void doSomething() {\n    ...\n    try {\n        insert accounts;\n    } catch (DmlException dmle) {\n        // not good\n    }\n}\n\n    ```"
      },
      {
        "display_name": "EmptyIfStmt",
        "real_name": "category/apex/errorprone.xml/EmptyIfStmt",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty 'if' statements",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty If Statement finds instances where a condition is checked but nothing is done about it.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#emptyifstmt\n```\n\n      \npublic class Foo {\n    public void bar(Integer x) {\n        if (x == 0) {\n            // empty!\n        }\n    }\n}\n\n    ```"
      },
      {
        "display_name": "EmptyStatementBlock",
        "real_name": "category/apex/errorprone.xml/EmptyStatementBlock",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty block statements.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty block statements serve no purpose and should be removed.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#emptystatementblock\n```\n\n      \npublic class Foo {\n\n   private Integer _bar;\n\n   public void setBar(Integer bar) {\n        // empty\n   }\n\n}\n\n    ```"
      },
      {
        "display_name": "EmptyTryOrFinallyBlock",
        "real_name": "category/apex/errorprone.xml/EmptyTryOrFinallyBlock",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty try or finally blocks",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid empty try or finally blocks - what's the point?\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#emptytryorfinallyblock\n```\n\n      \npublic class Foo {\n    public void bar() {\n        try {\n          // empty !\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n}\n\npublic class Foo {\n    public void bar() {\n        try {\n            Integer x=2;\n        } finally {\n            // empty!\n        }\n    }\n}\n\n    ```"
      },
      {
        "display_name": "EmptyWhileStmt",
        "real_name": "category/apex/errorprone.xml/EmptyWhileStmt",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty 'while' statements",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty While Statement finds all instances where a while statement does nothing. If it is a timing loop, then you should use Thread.sleep() for it; if it is a while loop that does a lot in the exit expression, rewrite it to make it clearer.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#emptywhilestmt\n```\n\n      \npublic void bar(Integer a, Integer b) {\n  while (a == b) {\n    // empty!\n  }\n}\n\n    ```"
      },
      {
        "display_name": "InaccessibleAuraEnabledGetter",
        "real_name": "category/apex/errorprone.xml/InaccessibleAuraEnabledGetter",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "AuraEnabled getter must be public or global if is referenced in Lightning components",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In the Summer '21 release, a mandatory security update enforces access modifiers on Apex properties in Lightning component markup. The update prevents access to private or protected Apex getters from Aura and Lightning Web Components.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#inaccessibleauraenabledgetter\n```\n\n      \npublic class Foo {\n    @AuraEnabled\n    public Integer counter { private get; set; } // Violating - Private getter is inaccessible to Lightning components\n\n    @AuraEnabled\n    public static Foo bar()\n    {\n        Foo foo = new Foo();\n        foo.counter = 2; \n        return foo;\n    }\n}\n\n    ```"
      },
      {
        "display_name": "MethodWithSameNameAsEnclosingClass",
        "real_name": "category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Classes should not have non-constructor methods with the same name as the class",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Non-constructor methods should not have the same name as the enclosing class.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#methodwithsamenameasenclosingclass\n```\n\n      \npublic class MyClass {\n    // this is OK because it is a constructor\n    public MyClass() {}\n    // this is bad because it is a method\n    public void MyClass() {}\n}\n\n    ```"
      },
      {
        "display_name": "OverrideBothEqualsAndHashcode",
        "real_name": "category/apex/errorprone.xml/OverrideBothEqualsAndHashcode",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Ensure you override both equals() and hashCode()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Override both `public Boolean equals(Object obj)`, and `public Integer hashCode()`, or override neither. Even if you are inheriting a hashCode() from a parent class, consider implementing hashCode and explicitly delegating to your superclass. This is especially important when [Using Custom Types in Map Keys and Sets](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/langCon_apex_collections_maps_keys_userdefined.htm).\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#overridebothequalsandhashcode\n```\n\n      \npublic class Bar {        // poor, missing a hashCode() method\n    public Boolean equals(Object o) {\n      // do some comparison\n    }\n}\npublic class Baz {        // poor, missing an equals() method\n    public Integer hashCode() {\n      // return some hash value\n    }\n}\npublic class Foo {        // perfect, both methods provided\n    public Boolean equals(Object other) {\n      // do some comparison\n    }\n    public Integer hashCode() {\n      // return some hash value\n    }\n}\n\n    ```"
      },
      {
        "display_name": "TestMethodsMustBeInTestClasses",
        "real_name": "category/apex/errorprone.xml/TestMethodsMustBeInTestClasses",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Test methods must be in test classes",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Test methods marked as a testMethod or annotated with @IsTest, but not residing in a test class should be moved to a proper class or have the @IsTest annotation added to the class. Support for tests inside functional classes was removed in Spring-13 (API Version 27.0), making classes that violate this rule fail compile-time. This rule is mostly usable when dealing with legacy code.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#testmethodsmustbeintestclasses\n```\n\n      // Violating\nprivate class TestClass {\n  @IsTest static void myTest() {\n    // Code here\n  }\n}\n\nprivate class TestClass {\n  static testMethod void myTest() {\n    // Code here\n  }\n}\n\n// Compliant\n@IsTest\nprivate class TestClass {\n  @IsTest static void myTest() {\n    // Code here\n  }\n}\n\n@IsTest\nprivate class TestClass {\n  static testMethod void myTest() {\n    // Code here\n  }\n}\n\n       ```"
      },
      {
        "display_name": "TypeShadowsBuiltInNamespace",
        "real_name": "category/apex/errorprone.xml/TypeShadowsBuiltInNamespace",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "This name causes a collision with a class, enum, or interface used in the `{0}` namespace. Please choose a different name.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule finds Apex classes, enums, and interfaces that have the same name as a class, enum, or interface in the `System` or `Schema` namespace. Shadowing these namespaces in this way can lead to confusion and unexpected behavior. Code that intends to reference a `System` or `Schema` class, enum, or interface may inadvertently reference the locally defined type instead. This can result in ambiguous code and unexpected runtime behavior. It is best to avoid naming your types the same as those in the `System` or `Schema` namespace to prevent these issues. Note that the list of classes, enums, and interfaces in the `System` and `Schema` namespaces are determined through [io.github.apex-dev-tools:standard-types](https://github.com/apex-dev-tools/standard-types). It is based on the contents of Salesforce's [Apex Reference Guide / System Namespace](https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_namespace_System.htm) and [Apex Reference Guide / Schema Namespace](https://developer.salesforce.com/docs/atlas.en-us.apexref.meta/apexref/apex_namespace_Schema.htm). As Salesforce introduces new types into the `System` and `Schema` namespaces, the rule might not always recognize the new types and produce false-negatives und the standard types are updated.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_errorprone.html#typeshadowsbuiltinnamespace\n```\n\n            \n// Violation: Causes a collision with the `System.Database` class.\npublic class Database {\n    public static String query() {\n        return 'Hello World';\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexAssertionsShouldIncludeMessage",
        "real_name": "category/apex/bestpractices.xml/ApexAssertionsShouldIncludeMessage",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Apex test assert statement should make use of the message parameter.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The second parameter of System.assert/third parameter of System.assertEquals/System.assertNotEquals is a message. Having a second/third parameter provides more information and makes it easier to debug the test failure and improves the readability of test output.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#apexassertionsshouldincludemessage\n```\n\n            \n@isTest\npublic class Foo {\n    @isTest\n    static void methodATest() {\n        System.assertNotEquals('123', o.StageName); // not good\n        System.assertEquals('123', o.StageName, 'Opportunity stageName is wrong.'); // good\n        System.assert(o.isClosed); // not good\n        System.assert(o.isClosed, 'Opportunity is not closed.'); // good\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexUnitTestClassShouldHaveAsserts",
        "real_name": "category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Apex unit tests should System.assert() or assertEquals() or assertNotEquals()",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Apex unit tests should include at least one assertion. This makes the tests more robust, and using assert with messages provide the developer a clearer idea of what the test does. Custom assert method invocation patterns can be specified using the 'additionalAssertMethodPattern' property if required.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#apexunittestclassshouldhaveasserts\n```\n\n\n@isTest\npublic class Foo {\n    public static testMethod void testSomething() {\n        Account a = null;\n        // This is better than having a NullPointerException\n        // System.assertNotEquals(a, null, 'account not found');\n        a.toString();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexUnitTestClassShouldHaveRunAs",
        "real_name": "category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveRunAs",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Apex unit test classes should have at least one System.runAs() call",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Apex unit tests should include at least one runAs method. This makes the tests more robust, and independent from the user running it.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#apexunittestclassshouldhaverunas\n```\n\n\n@isTest\nprivate class TestRunAs {\n   public static testMethod void testRunAs() {\n        // Setup test data\n        // Create a unique UserName\n        String uniqueUserName = 'standarduser' + DateTime.now().getTime() + '@testorg.com';\n        // This code runs as the system user\n        Profile p = [SELECT Id FROM Profile WHERE Name='Standard User'];\n        User u = new User(Alias = 'standt', Email='standarduser@testorg.com',\n        EmailEncodingKey='UTF-8', LastName='Testing', LanguageLocaleKey='en_US',\n        LocaleSidKey='en_US', ProfileId = p.Id,\n        TimeZoneSidKey='America/Los_Angeles',\n         UserName=uniqueUserName);\n\n        System.runAs(u) {\n              // The following code runs as user 'u'\n              System.debug('Current User: ' + UserInfo.getUserName());\n              System.debug('Current Profile: ' + UserInfo.getProfileId());\n          }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexUnitTestMethodShouldHaveIsTestAnnotation",
        "real_name": "category/apex/bestpractices.xml/ApexUnitTestMethodShouldHaveIsTestAnnotation",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Apex test methods should have @isTest annotation.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Apex test methods should have `@isTest` annotation instead of the `testMethod` keyword, as `testMethod` is deprecated. Salesforce advices to use [@isTest](https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_classes_annotation_isTest.htm) annotation for test classes and methods.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#apexunittestmethodshouldhaveistestannotation\n```\n\n            \n@isTest\nprivate class ATest {\n    @isTest\n    static void methodATest() {\n    }\n    static void methodBTest() {\n    }\n    @isTest static void methodCTest() {\n        System.assert(1==2);\n    }\n    static testmethod void methodCTest() {\n        System.debug('I am a debug statement');\n    }\n    private void fetchData() {\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ApexUnitTestShouldNotUseSeeAllDataTrue",
        "real_name": "category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Apex unit tests should not use @isTest(seeAllData = true)",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Apex unit tests should not use @isTest(seeAllData=true) because it opens up the existing database data for unexpected modification by tests.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#apexunittestshouldnotuseseealldatatrue\n```\n\n\n@isTest(seeAllData = true)\npublic class Foo {\n    public static testMethod void testSomething() {\n        Account a = null;\n        // This is better than having a NullPointerException\n        // System.assertNotEquals(a, null, 'account not found');\n        a.toString();\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidGlobalModifier",
        "real_name": "category/apex/bestpractices.xml/AvoidGlobalModifier",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid using global modifier",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Global classes should be avoided (especially in managed packages) as they can never be deleted or changed in signature. Always check twice if something needs to be global. Many interfaces (e.g. Batch) required global modifiers in the past but don't require this anymore. Don't lock yourself in.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#avoidglobalmodifier\n```\n\n\nglobal class Unchangeable {\n    global UndeletableType unchangable(UndeletableType param) {\n        // ...\n    }\n}\n\n        ```"
      },
      {
        "display_name": "AvoidLogicInTrigger",
        "real_name": "category/apex/bestpractices.xml/AvoidLogicInTrigger",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid logic in triggers",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "As triggers do not allow methods like regular classes they are less flexible and suited to apply good encapsulation style. Therefore delegate the triggers work to a regular class (often called Trigger handler class). See more here: <https://developer.salesforce.com/page/Trigger_Frameworks_and_Apex_Trigger_Best_Practices>\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#avoidlogicintrigger\n```\n\n\ntrigger Accounts on Account (before insert, before update, before delete, after insert, after update, after delete, after undelete) {\n    for(Account acc : Trigger.new) {\n        if(Trigger.isInsert) {\n            // ...\n        }\n\n        // ...\n\n        if(Trigger.isDelete) {\n            // ...\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "DebugsShouldUseLoggingLevel",
        "real_name": "category/apex/bestpractices.xml/DebugsShouldUseLoggingLevel",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Calls to System.debug should specify a logging level.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The first parameter of System.debug, when using the signature with two parameters, is a LoggingLevel enum. Having the Logging Level specified provides a cleaner log, and improves readability of it.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#debugsshoulduselogginglevel\n```\n\n\n@isTest\npublic class Foo {\n    @isTest\n    static void bar() {\n        System.debug('Hey this code executed.'); // not good\n        System.debug(LoggingLevel.WARN, 'Hey, something might be wrong.'); // good\n        System.debug(LoggingLevel.DEBUG, 'Hey, something happened.'); // not good when on strict mode\n    }\n}\n\n        ```"
      },
      {
        "display_name": "UnusedLocalVariable",
        "real_name": "category/apex/bestpractices.xml/UnusedLocalVariable",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Variable ''{0}'' defined but not used",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects when a local variable is declared and/or assigned but not used.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#unusedlocalvariable\n```\n\n\n    public Boolean bar(String z) {\n        String x = 'some string'; // not used\n\n        String y = 'some other string'; // used in the next line\n        return z.equals(y);\n    }\n\n        ```"
      },
      {
        "display_name": "QueueableWithoutFinalizer",
        "real_name": "category/apex/bestpractices.xml/QueueableWithoutFinalizer",
        "category": "correctness",
        "severity": "info",
        "rule_title": "This Queueable doesn't attach a Finalizer",
        "custom": false,
        "rule_param": null,
        "languages": [
          "apex"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Detects when the Queueable interface is used but a Finalizer is not attached. It is best practice to call the `System.attachFinalizer(Finalizer f)` method within the `execute` method of a class which implements the `Queueable` interface. Without attaching a Finalizer, there is no way of designing error recovery actions should the Queueable action fail.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_apex_bestpractices.html#queueablewithoutfinalizer\n```\n\n\n// Incorrect code, does not attach a finalizer.\npublic class UserUpdater implements Queueable {\n    public List<User> usersToUpdate;\n\n    public UserUpdater(List<User> usersToUpdate) {\n        this.usersToUpdate = usersToUpdate;\n    }\n\n    public void execute(QueueableContext context) { // no Finalizer is attached\n        update usersToUpdate;\n    }\n}\n\n// Proper code, attaches a finalizer.\npublic class UserUpdater implements Queueable, Finalizer {\n    public List<User> usersToUpdate;\n\n    public UserUpdater(List<User> usersToUpdate) {\n        this.usersToUpdate = usersToUpdate;\n    }\n\n    public void execute(QueueableContext context) {\n        System.attachFinalizer(this);\n        update usersToUpdate;\n    }\n\n    public void execute(FinalizerContext ctx) {\n        if (ctx.getResult() == ParentJobResult.SUCCESS) {\n            // Handle success\n        } else {\n            // Handle failure\n        }\n    }\n}\n\n        ```"
      },
      {
        "display_name": "ForceCast",
        "real_name": "category/swift/errorprone.xml/ForceCast",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Force casts should be avoided.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "swift"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Force casts should be avoided. This may lead to a crash if it's not used carefully. For example assuming a JSON property has a given type, or your reused Cell has a certain contract. Consider using conditional casting and handling the resulting optional.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_swift_errorprone.html#forcecast\n```\n\n            \nNSNumber() as! Int // violation, force casting\n\nNSNumber() as? Int // no violation\n\n        ```"
      },
      {
        "display_name": "ForceTry",
        "real_name": "category/swift/errorprone.xml/ForceTry",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Force tries should be avoided.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "swift"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Force tries should be avoided. If the code being wrapped happens to raise and exception, our application will crash. Consider using a conditional try and handling the resulting optional, or wrapping the try statement in a do-catch block.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_swift_errorprone.html#forcetry\n```\n\n            \nlet x = try! someThrowingFunction() // violation, force trying\n\nlet x = try? someThrowingFunction() // no violation\n\n        ```"
      },
      {
        "display_name": "ProhibitedInterfaceBuilder",
        "real_name": "category/swift/bestpractices.xml/ProhibitedInterfaceBuilder",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Creating views using Interface Builder should be avoided.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "swift"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Creating views using Interface Builder should be avoided. Defining views by code allows the compiler to detect issues that otherwise will be runtime errors. It's difficult to review the auto-generated code and allow concurrent modifications of those files. Consider building views programmatically.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_swift_bestpractices.html#prohibitedinterfacebuilder\n```\n\n            \nclass ViewController: UIViewController {\n    @IBOutlet var label: UILabel! // violation, referencing a IBOutlet\n}\n\nclass ViewController: UIViewController {\n    var label: UILabel!\n}\n\n        ```"
      },
      {
        "display_name": "UnavailableFunction",
        "real_name": "category/swift/bestpractices.xml/UnavailableFunction",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Unimplemented functions should be marked as unavailable.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "swift"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Due to Objective-C and Swift interoperability some functions are often required to be implemented but aren't really needed. It is extremely common that the sole implementation of the functions consist of throwing a fatal error. Marking these functions as unavailable prevents them from being executed while still making the compiler happy.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_swift_bestpractices.html#unavailablefunction\n```\n\n            \nrequired init?(coder _: NSCoder) { // violation, no unavailable attribute added to the function declaration\n    fatalError(\"init(coder:) has not been implemented\")\n}\n\n@available(*, unavailable)         // no violation\nrequired init?(coder _: NSCoder) {\n    fatalError(\"init(coder:) has not been implemented\")\n\n        ```"
      },
      {
        "display_name": "NoInlineScript",
        "real_name": "category/jsp/design.xml/NoInlineScript",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoiding inlining HTML script content",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid inlining HTML script content. Consider externalizing the HTML script using the 'src' attribute on the \"script\" element. Externalized script could be reused between pages. Browsers can also cache the script, reducing overall download bandwidth.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_design.html#noinlinescript\n```\n```"
      },
      {
        "display_name": "NoInlineStyleInformation",
        "real_name": "category/jsp/design.xml/NoInlineStyleInformation",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid having style information in JSP files.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Style information should be put in CSS files, not in JSPs. Therefore, don't use <B> or <FONT> tags, or attributes like \"align='center'\".\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_design.html#noinlinestyleinformation\n```\n\n\n<html><body><p align='center'><b>text</b></p></body></html>\n\n        ```"
      },
      {
        "display_name": "NoLongScripts",
        "real_name": "category/jsp/design.xml/NoLongScripts",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid having long scripts (e.g. Javascript) inside a JSP file.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Scripts should be part of Tag Libraries, rather than part of JSP pages.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_design.html#nolongscripts\n```\n\n\n<HTML>\n<BODY>\n<!--Java Script-->\n<SCRIPT language=\"JavaScript\" type=\"text/javascript\">\n<!--\nfunction calcDays(){\n  var date1 = document.getElementById('d1').lastChild.data;\n  var date2 = document.getElementById('d2').lastChild.data;\n  date1 = date1.split(\"-\");\n  date2 = date2.split(\"-\");\n  var sDate = new Date(date1[0]+\"/\"+date1[1]+\"/\"+date1[2]);\n  var eDate = new Date(date2[0]+\"/\"+date2[1]+\"/\"+date2[2]);\n  var daysApart = Math.abs(Math.round((sDate-eDate)/86400000));\n  document.getElementById('diffDays').lastChild.data = daysApart;\n}\n\nonload=calcDays;\n//-->\n</SCRIPT>\n</BODY>\n</HTML>\n\n        ```"
      },
      {
        "display_name": "NoScriptlets",
        "real_name": "category/jsp/design.xml/NoScriptlets",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid having scriptlets inside a JSP file.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Scriptlets should be factored into Tag Libraries or JSP declarations, rather than being part of JSP pages.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_design.html#noscriptlets\n```\n\n\n<HTML>\n<HEAD>\n<%\nresponse.setHeader(\"Pragma\", \"No-cache\");\n%>\n</HEAD>\n    <BODY>\n        <jsp:scriptlet>String title = \"Hello world!\";</jsp:scriptlet>\n    </BODY>\n</HTML>\n\n        ```"
      },
      {
        "display_name": "DuplicateJspImports",
        "real_name": "category/jsp/codestyle.xml/DuplicateJspImports",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid duplicate imports such as ''{0}''",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid duplicate import statements inside JSP's.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_codestyle.html#duplicatejspimports\n```\n\n\n<%@ page import=\\\"com.foo.MyClass,com.foo.MyClass\\\"%><html><body><b><img src=\\\"<%=Some.get()%>/foo\\\">xx</img>text</b></body></html>\n\n        ```"
      },
      {
        "display_name": "IframeMissingSrcAttribute",
        "real_name": "category/jsp/security.xml/IframeMissingSrcAttribute",
        "category": "security",
        "severity": "warning",
        "rule_title": "IFrames must have a src attribute.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "IFrames which are missing a src element can cause security information popups in IE if you are accessing the page through SSL. See http://support.microsoft.com/default.aspx?scid=kb;EN-US;Q261188\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_security.html#iframemissingsrcattribute\n```\n\n\n<HTML><title>bad example><BODY>\n<iframe></iframe>\n</BODY> </HTML>\n\n<HTML><title>good example><BODY>\n<iframe src=\"foo\"></iframe>\n</BODY> </HTML>\n\n        ```"
      },
      {
        "display_name": "NoUnsanitizedJSPExpression",
        "real_name": "category/jsp/security.xml/NoUnsanitizedJSPExpression",
        "category": "security",
        "severity": "warning",
        "rule_title": "Using unsanitized JSP expression can lead to Cross Site Scripting (XSS) attacks",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid using expressions without escaping / sanitizing. This could lead to cross site scripting - as the expression would be interpreted by the browser directly (e.g. \"<script>alert('hello');</script>\").\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_security.html#nounsanitizedjspexpression\n```\n\n\n<%@ page contentType=\"text/html; charset=UTF-8\" %>\n<%@ taglib prefix=\"fn\" uri=\"http://java.sun.com/jsp/jstl/functions\" %>\n${expression}                    <!-- don't use this -->\n${fn:escapeXml(expression)}      <!-- instead, escape it -->\n<c:out value=\"${expression}\" />  <!-- or use c:out -->\n\n        ```"
      },
      {
        "display_name": "JspEncoding",
        "real_name": "category/jsp/errorprone.xml/JspEncoding",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "JSP file should use UTF-8 encoding",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A missing 'meta' tag or page directive will trigger this rule, as well as a non-UTF-8 charset.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_errorprone.html#jspencoding\n```\n\n\nMost browsers should be able to interpret the following headers:\n\n<%@ page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\" %>\n\n<meta http-equiv=\"Content-Type\"  content=\"text/html; charset=UTF-8\" />\n\n        ```"
      },
      {
        "display_name": "DontNestJsfInJstlIteration",
        "real_name": "category/jsp/bestpractices.xml/DontNestJsfInJstlIteration",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not nest JSF component custom actions inside a custom action that iterates over its body.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Do not nest JSF component custom actions inside a custom action that iterates over its body.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_bestpractices.html#dontnestjsfinjstliteration\n```\n\n\n<html>\n  <body>\n    <ul>\n      <c:forEach items='${books}' var='b'>\n        <li> <h:outputText value='#{b}' /> </li>\n      </c:forEach>\n    </ul>\n  </body>\n</html>\n\n        ```"
      },
      {
        "display_name": "NoClassAttribute",
        "real_name": "category/jsp/bestpractices.xml/NoClassAttribute",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not use an attribute called 'class'.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Do not use an attribute called 'class'. Use \"styleclass\" for CSS styles.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_bestpractices.html#noclassattribute\n```\n\n\n<HTML> <BODY>\n<P class=\"MajorHeading\">Some text</P>\n</BODY> </HTML>\n\n        ```"
      },
      {
        "display_name": "NoHtmlComments",
        "real_name": "category/jsp/bestpractices.xml/NoHtmlComments",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Use JSP comments instead of HTML comments",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In a production system, HTML comments increase the payload between the application server to the client, and serve little other purpose. Consider switching to JSP comments.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_bestpractices.html#nohtmlcomments\n```\n\n\n<HTML><title>bad example><BODY>\n<!-- HTML comment -->\n</BODY> </HTML>\n\n<HTML><title>good example><BODY>\n<%-- JSP comment --%>\n</BODY> </HTML>\n\n        ```"
      },
      {
        "display_name": "NoJspForward",
        "real_name": "category/jsp/bestpractices.xml/NoJspForward",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Do not do a forward from within a JSP file.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "java"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Do not do a forward from within a JSP file.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_jsp_bestpractices.html#nojspforward\n```\n\n\n<jsp:forward page='UnderConstruction.jsp'/>\n\n        ```"
      },
      {
        "display_name": "VfCsrf",
        "real_name": "category/visualforce/security.xml/VfCsrf",
        "category": "security",
        "severity": "warning",
        "rule_title": "Avoid calling VF action upon page load",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid calling VF action upon page load as the action becomes vulnerable to CSRF.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_visualforce_security.html#vfcsrf\n```\n\n\n<apex:page controller=\"AcRestActionsController\" action=\"{!csrfInitMethod}\" >\n\n        ```"
      },
      {
        "display_name": "VfHtmlStyleTagXss",
        "real_name": "category/visualforce/security.xml/VfHtmlStyleTagXss",
        "category": "security",
        "severity": "warning",
        "rule_title": "Use correct encoding for expressions within Style tag",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Checks for the correct encoding in `<style/>` tags in Visualforce pages. The rule is based on Salesforce Security's recommendation to prevent XSS in Visualforce as mentioned on [Secure Coding Cross Site Scripting](https://developer.salesforce.com/docs/atlas.en-us.secure_coding_guide.meta/secure_coding_guide/secure_coding_cross_site_scripting.htm). In order to avoid cross site scripting, the relevant encoding must be used in HTML tags. The rule expects `URLENCODING` or `JSINHTMLENCODING` for URL-based style values and any kind of encoding (e.g. `HTMLENCODING`) for non-url style values. See also {% rule \"VfUnescapeEl\" %} to check escaping in other places on Visualforce pages.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_visualforce_security.html#vfhtmlstyletagxss\n```\n\n\n<apex:page>\n    <style>\n        div {\n            background: url('{!XSSHere}'); // Potential XSS\n        }\n        div {\n            background: url('{!URLENCODE(XSSHere)}'); // correct encoding\n        }\n    </style>\n</apex:page>\n\n        ```"
      },
      {
        "display_name": "VfUnescapeEl",
        "real_name": "category/visualforce/security.xml/VfUnescapeEl",
        "category": "security",
        "severity": "warning",
        "rule_title": "Avoid unescaped user controlled content in EL",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid unescaped user controlled content in EL as it results in XSS.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_visualforce_security.html#vfunescapeel\n```\n\n\n<apex:outputText value=\"Potential XSS is {! here }\" escape=\"false\" />\n\n        ```"
      },
      {
        "display_name": "AvoidDeeplyNestedIfStmts",
        "real_name": "category/velocity/design.xml/AvoidDeeplyNestedIfStmts",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Deeply nested if..then statements are hard to read",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid creating deeply nested if-then statements since they are harder to read and error-prone to maintain.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_design.html#avoiddeeplynestedifstmts\n```\n```"
      },
      {
        "display_name": "CollapsibleIfStatements",
        "real_name": "category/velocity/design.xml/CollapsibleIfStatements",
        "category": "convention",
        "severity": "warning",
        "rule_title": "These nested if statements could be combined",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Sometimes two consecutive 'if' statements can be consolidated by separating their conditions with a boolean short-circuit operator.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_design.html#collapsibleifstatements\n```\n```"
      },
      {
        "display_name": "ExcessiveTemplateLength",
        "real_name": "category/velocity/design.xml/ExcessiveTemplateLength",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Template is too long",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The template is too long. It should be broken up into smaller pieces.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_design.html#excessivetemplatelength\n```\n```"
      },
      {
        "display_name": "NoInlineJavaScript",
        "real_name": "category/velocity/design.xml/NoInlineJavaScript",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid inline JavaScript",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid inline JavaScript. Import .js files instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_design.html#noinlinejavascript\n```\n```"
      },
      {
        "display_name": "NoInlineStyles",
        "real_name": "category/velocity/design.xml/NoInlineStyles",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid inline styles",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid inline styles. Use css classes instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_design.html#noinlinestyles\n```\n```"
      },
      {
        "display_name": "EmptyForeachStmt",
        "real_name": "category/velocity/errorprone.xml/EmptyForeachStmt",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty foreach loops",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty foreach statements should be deleted.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_errorprone.html#emptyforeachstmt\n```\n```"
      },
      {
        "display_name": "EmptyIfStmt",
        "real_name": "category/velocity/errorprone.xml/EmptyIfStmt",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid empty if statements",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Empty if statements should be deleted.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_errorprone.html#emptyifstmt\n```\n```"
      },
      {
        "display_name": "AvoidReassigningParameters",
        "real_name": "category/velocity/bestpractices.xml/AvoidReassigningParameters",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid reassigning macro parameters such as ''{0}''",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Reassigning values to incoming parameters is not recommended. Use temporary local variables instead.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_bestpractices.html#avoidreassigningparameters\n```\n```"
      },
      {
        "display_name": "UnusedMacroParameter",
        "real_name": "category/velocity/bestpractices.xml/UnusedMacroParameter",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "Avoid unused macro parameters such as ''{0}''",
        "custom": false,
        "rule_param": null,
        "languages": [],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Avoid unused macro parameters. They should be deleted.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_velocity_bestpractices.html#unusedmacroparameter\n```\n```"
      },
      {
        "display_name": "CyclomaticComplexity",
        "real_name": "category/plsql/design.xml/CyclomaticComplexity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The {0} ''{1}'' has a Cyclomatic Complexity of {2}.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Complexity directly affects maintenance costs is determined by the number of decision points in a method plus one for the method entry. The decision points include 'if', 'while', 'for', and 'case labels' calls. Generally, numbers ranging from 1-4 denote low complexity, 5-7 denote moderate complexity, 8-10 denote high complexity, and 11+ is very high complexity.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#cyclomaticcomplexity\n```\n\n\n-- Cyclomatic Complexity of 25\nCREATE OR REPLACE PACKAGE BODY pkg_pmd_working_sequence  AS\n1 PROCEDURE ty_logger  IS BEGIN\n2        IF true\n         THEN\n              DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n3        IF true\n         THEN\n              DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n4            IF true\n             THEN\n                  DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n5            ELSIF false\n             THEN\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             ELSE\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             END IF;\n6        ELSIF false\n         THEN\n            DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n7            IF true\n             THEN\n                  DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n8            ELSIF false\n             THEN\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             ELSE\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             END IF;\n         ELSE\n            DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n9            IF true\n             THEN\n                  DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n10           ELSIF false\n             THEN\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             ELSE\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             END IF;\n         END IF;\n11         ELSIF false\n         THEN\n            DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n12       IF true\n         THEN\n              DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n13           IF true\n             THEN\n                  DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n14           ELSIF false\n             THEN\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             ELSE\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             END IF;\n15       ELSIF false\n         THEN\n16           IF true\n             THEN\n                  DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n17           ELSIF false\n             THEN\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             ELSE\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             END IF;\n             DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n         ELSE\n             DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n         END IF;\n     ELSE\n        DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n18       IF true\n         THEN\n              DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n19           IF true\n             THEN\n                  DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n20           ELSIF false\n             THEN\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             ELSE\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             END IF;\n21       ELSIF false\n         THEN\n            DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n22           IF true\n             THEN\n                DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n23           ELSIF false\n             THEN\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             ELSE\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             END IF;\n             ELSE\n             DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n24           IF true\n             THEN\n                  DBMS_OUTPUT.PUT_LINE('IF/THEN l_Integer='||l_integer);\n25           ELSIF false\n             THEN\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             ELSE\n                DBMS_OUTPUT.PUT_LINE('ELSIF l_Integer='||l_integer);\n             END IF;\n         END IF;\n     END IF;\nEND;\n\nEND;\n\n        ```"
      },
      {
        "display_name": "ExcessiveMethodLength",
        "real_name": "category/plsql/design.xml/ExcessiveMethodLength",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid really long methods ({0} lines found).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "When methods are excessively long this usually indicates that the method is doing more than its name/signature might suggest. They also become challenging for others to digest since excessive scrolling causes readers to lose focus. Try to reduce the method length by creating helper methods and removing any copy/pasted code.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#excessivemethodlength\n```\n\n\nCREATE OR REPLACE\nPROCEDURE doSomething BEGIN\n    DBMS_OUTPUT.PUT_LINE(\"Hello world!\");\n    DBMS_OUTPUT.PUT_LINE(\"Hello world!\");\n        -- 98 copies omitted for brevity.\nEND;\n\n        ```"
      },
      {
        "display_name": "ExcessiveObjectLength",
        "real_name": "category/plsql/design.xml/ExcessiveObjectLength",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid really long Oracle object specifications and bodies ({0} lines found).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Excessive object line lengths are usually indications that the object may be burdened with excessive responsibilities that could be provided by other objects. In breaking these methods apart the code becomes more managable and ripe for reuse.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#excessiveobjectlength\n```\n\n\nCREATE OR REPLACE\nPACKAGE BODY Foo AS\n    PROCEDURE bar1 IS BEGIN\n    -- 1000 lines of code\n    END bar1;\n    PROCEDURE bar2 IS BEGIN\n    -- 1000 lines of code\n    END bar2;\n    PROCEDURE bar3 IS BEGIN\n    -- 1000 lines of code\n    END bar3;\n\n\n    PROCEDURE barN IS BEGIN\n    -- 1000 lines of code\n    END barn;\nEND;\n\n        ```"
      },
      {
        "display_name": "ExcessivePackageBodyLength",
        "real_name": "category/plsql/design.xml/ExcessivePackageBodyLength",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid really long Object Type and Package bodies ({0} lines found).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methods apart the code becomes more managable and ripe for reuse.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#excessivepackagebodylength\n```\n\n\nCREATE OR REPLACE\nPACKAGE BODY Foo AS\n    PROCEDURE bar1 IS BEGIN\n    -- 1000 lines of code\n    END bar1;\n    PROCEDURE bar2 IS BEGIN\n    -- 1000 lines of code\n    END bar2;\n    PROCEDURE bar3 IS BEGIN\n    -- 1000 lines of code\n    END bar3;\n\n\n    PROCEDURE barN IS BEGIN\n    -- 1000 lines of code\n    END barn;\nEND;\n\n        ```"
      },
      {
        "display_name": "ExcessivePackageSpecificationLength",
        "real_name": "category/plsql/design.xml/ExcessivePackageSpecificationLength",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid really long Package Specifications ({0} lines found).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methods apart the code becomes more managable and ripe for reuse.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#excessivepackagespecificationlength\n```\n\n\nCREATE OR REPLACE\nPACKAGE Foo AS\n    PROCEDURE bar1;\n    PROCEDURE bar2;\n    PROCEDURE bar3;\n\n    ...\n\n    PROCEDURE barN;\nEND;\n\n        ```"
      },
      {
        "display_name": "ExcessiveParameterList",
        "real_name": "category/plsql/design.xml/ExcessiveParameterList",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid long parameter lists.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Methods with numerous parameters are a challenge to maintain, especially if most of them share the same datatype. These situations usually denote the need for new objects to wrap the numerous parameters.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#excessiveparameterlist\n```\n\n\nCREATE OR REPLACE\nPROCEDURE addPerson(        -- too many arguments liable to be mixed up\n    birthYear pls_integer, birthMonth pls_integer, birthDate pls_integer, height pls_integer, weight pls_integer, ssn pls_integer) {\n\n    . . . .\nEND ADDPERSON;\n\nCREATE OR REPLACE\nPROCEDURE addPerson(        -- preferred approach\n    birthdate DATE, measurements BodyMeasurements , ssn INTEGER) BEGIN\n\n    . . . .\nEND;\n\n        ```"
      },
      {
        "display_name": "ExcessiveTypeLength",
        "real_name": "category/plsql/design.xml/ExcessiveTypeLength",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid really long Object Type specifications ({0} lines found).",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Excessive class file lengths are usually indications that the class may be burdened with excessive responsibilities that could be provided by external classes or functions. In breaking these methods apart the code becomes more managable and ripe for reuse.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#excessivetypelength\n```\n\n\nCREATE OR REPLACE\nTYPE BODY Foo AS\n    MEMBER PROCEDURE bar1 IS BEGIN\n    -- 1000 lines of code\n    END bar1;\n    MEMBER PROCEDURE bar2 IS BEGIN\n    -- 1000 lines of code\n    END bar2;\n    MEMBER PROCEDURE bar3 IS BEGIN\n    -- 1000 lines of code\n    END bar3;\n\n\n    MEMBER PROCEDURE barN IS BEGIN\n    -- 1000 lines of code\n    END barn;\nEND;\n\n        ```"
      },
      {
        "display_name": "NcssMethodCount",
        "real_name": "category/plsql/design.xml/NcssMethodCount",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The method {0}() has an NCSS line count of {1}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given method. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#ncssmethodcount\n```\n\n\nCREATE OR REPLACE PACKAGE BODY AS\n FUNCTION methd RETURN INTEGER IS\n BEGIN\n   RETURN 1;;\n END;\nEND;\n\n        ```"
      },
      {
        "display_name": "NcssObjectCount",
        "real_name": "category/plsql/design.xml/NcssObjectCount",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The Oracle object {0} has a NCSS line count of {1}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule uses the NCSS (Non-Commenting Source Statements) algorithm to determine the number of lines of code for a given Oracle object. NCSS ignores comments, and counts actual statements. Using this algorithm, lines of code that are split are counted as one.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#ncssobjectcount\n```\n\n\nCREATE OR REPLACE PACKAGE pkg_\n PROCEDURE Foo IS\n BEGIN\n --this class only has 6 NCSS lines\n     super();\n     super();\n END;\n}\n\n        ```"
      },
      {
        "display_name": "NPathComplexity",
        "real_name": "category/plsql/design.xml/NPathComplexity",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The method {0}() has an NPath complexity of {1}",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "The NPath complexity of a method is the number of acyclic execution paths through that method. A threshold of 200 is generally considered the point where measures should be taken to reduce complexity and increase readability.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#npathcomplexity\n```\n\n\nCREATE OR REPLACE\nPROCEDURE bar AS BEGIN  -- this is something more complex than it needs to be,\n    if (y) THEN -- it should be broken down into smaller methods or functions\n        for j IN 0 .. j-1 LOOP\n            if (j > r) THEN\n                doSomething;\n                while (f < 5 ) LOOP\n                    anotherThing;\n                    f := f - 27;\n                    END LOOP;\n            else\n                tryThis();\n            END IF;\n        END LOOP;\n    END IF;\n    if ( r - n > 45) THEN\n        while (doMagic) LOOP\n            findRabbits;\n        END LOOP;\n    END IF;\n    BEGIN\n        doSomethingDangerous();\n    EXCEPTION WHEN FooException THEN\n        makeAmends;\n        BEGIN\n            dontDoItAgain;\n        EXCEPTION\n        WHEN OTHERS THEN\n            log_problem;\n        END;\n    END;\nEND;\n\n        ```"
      },
      {
        "display_name": "TooManyFields",
        "real_name": "category/plsql/design.xml/TooManyFields",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Too many fields",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Classes that have too many fields can become unwieldy and could be redesigned to have fewer fields, possibly through grouping related fields in new objects. For example, a class with individual city/state/zip fields could park them within a single Address field.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#toomanyfields\n```\n\n\nCREATE OR REPLACE PACKAGE pkg_too_many_fields AS\n    C_CHAR_A CONSTANT CHAR(1 CHAR) := 'A';\n    C_CHAR_B CONSTANT CHAR(1 CHAR) := 'B';\n    ...\n    C_CHAR_Z CONSTANT CHAR(1 CHAR) := 'Z';\nEND pkg_too_many_fields;\n\n        ```"
      },
      {
        "display_name": "TooManyMethods",
        "real_name": "category/plsql/design.xml/TooManyMethods",
        "category": "convention",
        "severity": "warning",
        "rule_title": "This object has too many methods, consider refactoring it.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "A package or type with too many methods is probably a good suspect for refactoring, in order to reduce its complexity and find a way to have more fine grained objects.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_design.html#toomanymethods\n```\n```"
      },
      {
        "display_name": "AvoidTabCharacter",
        "real_name": "category/plsql/codestyle.xml/AvoidTabCharacter",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Avoid tab characters for indentation. Use spaces instead.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule checks, that there are no tab characters (`\\t`) in the source file. It reports only the first occurrence per file. Using tab characters for indentation is not recommended, since this requires that every developer uses the same tab with in their editor. This rule is the PMD equivalent of checkstyle's [FileTabCharacter](http://checkstyle.sourceforge.net/config_whitespace.html#FileTabCharacter) check.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_codestyle.html#avoidtabcharacter\n```\n```"
      },
      {
        "display_name": "CodeFormat",
        "real_name": "category/plsql/codestyle.xml/CodeFormat",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Please check the formatting/indentation",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule verifies that the PLSQL code is properly formatted. The following checks are executed: SQL Queries: * The selected columns must be each on a new line * The keywords (BULK COLLECT INTO, FROM) start on a new line and are indented by one level * UNION should be on the same indentation level as SELECT * Each JOIN is on a new line. If there are more than one JOIN conditions, then each condition should be on a separate line. Parameter definitions for procedures: * Each parameter should be on a new line * Variable names as well as their types should be aligned Variable declarations: * Each variable should be on a new line * Variable names as well as their types should be aligned Calling a procedure: * If there are more than 3 parameters * then named parameters should be used * and each parameter should be on a new line\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_codestyle.html#codeformat\n```\n\nBEGIN\n  -- select columns each on a separate line\n  SELECT cmer_id\n        ,version\n        ,cmp_id\n    BULK COLLECT INTO v_cmer_ids\n        ,v_versions\n        ,v_cmp_ids\n    FROM cmer;\n\n  -- each parameter on a new line\n  PROCEDURE create_prospect(\n    company_info_in      IN    prospects.company_info%TYPE -- Organization\n   ,firstname_in         IN    persons.firstname%TYPE      -- FirstName\n   ,lastname_in          IN    persons.lastname%TYPE       -- LastName\n  );\n\n  -- more than three parameters, each parameter on a separate line\n  webcrm_marketing.prospect_ins(\n    cmp_id_in            => NULL\n   ,company_info_in      => company_info_in\n   ,firstname_in         => firstname_in\n   ,lastname_in          => lastname_in\n   ,slt_code_in          => NULL\n  );\n\nEND;\n        ```"
      },
      {
        "display_name": "MisplacedPragma",
        "real_name": "category/plsql/codestyle.xml/MisplacedPragma",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Pragma should be used only inside the declaration block before 'BEGIN'.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "Oracle states that the PRAQMA AUTONOMOUS_TRANSACTION must be in the declaration block, but the code does not complain, when being compiled on the 11g DB. https://docs.oracle.com/cd/B28359_01/appdev.111/b28370/static.htm#BABIIHBJ\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_codestyle.html#misplacedpragma\n```\n\n\ncreate or replace package inline_pragma_error is\n\nend;\n/\n\ncreate or replace package body inline_pragma_error is\n  procedure do_transaction(p_input_token        in varchar(200)) is\n  PRAGMA AUTONOMOUS_TRANSACTION; /* this is correct place for PRAGMA */\n  begin\n    PRAGMA AUTONOMOUS_TRANSACTION; /* this is the wrong place for PRAGMA -> violation */\n    /* do something */\n    COMMIT;\n   end do_transaction;\n\nend inline_pragma_error;\n/\n\n        ```"
      },
      {
        "display_name": "ForLoopNaming",
        "real_name": "category/plsql/codestyle.xml/ForLoopNaming",
        "category": "convention",
        "severity": "warning",
        "rule_title": "Use meaningful names for loop variables",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "In case you have loops please name the loop variables more meaningful.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_codestyle.html#forloopnaming\n```\n\n\n-- good example\nBEGIN\nFOR company IN (SELECT * FROM companies) LOOP\n  FOR contact IN (SELECT * FROM contacts) LOOP\n    FOR party IN (SELECT * FROM parties) LOOP\n      NULL;\n    END LOOP;\n  END LOOP;\nEND LOOP;\nEND;\n/\n\n-- bad example\nBEGIN\nFOR c1 IN (SELECT * FROM companies) LOOP\n  FOR c2 IN (SELECT * FROM contacts) LOOP\n    FOR c3 IN (SELECT * FROM parties) LOOP\n      NULL;\n    END LOOP;\n  END LOOP;\nEND LOOP;\nEND;\n/\n\n        ```"
      },
      {
        "display_name": "LineLength",
        "real_name": "category/plsql/codestyle.xml/LineLength",
        "category": "convention",
        "severity": "warning",
        "rule_title": "The line is too long.",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "This rule checks for long lines. Please note that comments are not ignored. This rule is the PMD equivalent of checkstyle's [LineLength](http://checkstyle.sourceforge.net/config_sizes.html#LineLength) check.\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_codestyle.html#linelength\n```\n```"
      },
      {
        "display_name": "TO_DATE_TO_CHAR",
        "real_name": "category/plsql/errorprone.xml/TO_DATE_TO_CHAR",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "TO_DATE(TO_CHAR(variable)) instead of TRUNC(variable)",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "TO_DATE(TO_CHAR(date-variable)) used to remove time component - use TRUNC(date-variable)\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_errorprone.html#to_date_to_char\n```\n\n\nCREATE OR REPLACE PACKAGE BODY date_utilities\nIS\n\n-- Take single parameter, relying on current default NLS date format\nFUNCTION strip_time (p_date IN DATE) RETURN DATE\nIS\nBEGIN\n   RETURN TO_DATE(TO_CHAR(p_date));\nEND strip_time;\n\n\nEND date_utilities;\n/\n\n        ```"
      },
      {
        "display_name": "TO_DATEWithoutDateFormat",
        "real_name": "category/plsql/errorprone.xml/TO_DATEWithoutDateFormat",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "TO_DATE without date format",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "TO_DATE without date format- use TO_DATE(expression, date-format)\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_errorprone.html#to_datewithoutdateformat\n```\n\n\nCREATE OR REPLACE PACKAGE BODY date_utilities\nIS\n\n-- Take single parameter, relying on current default NLS date format\nFUNCTION to_date_single_parameter (p_date_string IN VARCHAR2) RETURN DATE\nIS\nBEGIN\n   RETURN TO_DATE(p_date_string);\nEND to_date_single_parameter ;\n\n-- Take 2 parameters, using an explicit date format string\nFUNCTION to_date_two_parameters (p_date_string IN VARCHAR2, p_format_mask IN VARCHAR2) RETURN DATE\nIS\nBEGIN\n   TO_DATE(p_date_string, p_date_format);\nEND to_date_two_parameters;\n\n-- Take 3 parameters, using an explicit date format string and an explicit language\nFUNCTION to_date_three_parameters (p_date_string IN VARCHAR2, p_format_mask IN VARCHAR2, p_nls_language VARCHAR2 ) RETURN DATE\nIS\nBEGIN\n   TO_DATE(p_date_string, p_format_mask, p_nls_language);\nEND to_date_three_parameters;\n\nEND date_utilities;\n/\n\n        ```"
      },
      {
        "display_name": "TO_TIMESTAMPWithoutDateFormat",
        "real_name": "category/plsql/errorprone.xml/TO_TIMESTAMPWithoutDateFormat",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "TO_TIMESTAMP without date format",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "TO_TIMESTAMP without date format- use TO_TIMESTAMP(expression, date-format)\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_errorprone.html#to_timestampwithoutdateformat\n```\n\n\nCREATE OR REPLACE PACKAGE BODY date_utilities\nIS\n\n-- Take single parameter, relying on current default NLS date format\nFUNCTION to_timestamp_single_parameter (p_date_string IN VARCHAR2) RETURN DATE\nIS\nBEGIN\n   RETURN TO_TIMESTAMP(p_date_string);\nEND to_timestamp_single_parameter;\n\n-- Take 2 parameters, using an explicit date format string\nFUNCTION to_timestamp_two_parameters (p_date_string IN VARCHAR2, p_format_mask IN VARCHAR2) RETURN DATE\nIS\nBEGIN\n   TO_TIMESTAMP(p_date_string, p_date_format);\nEND to_timestamp_two_parameters;\n\n-- Take 3 parameters, using an explicit date format string and an explicit language\nFUNCTION to_timestamp_three_parameters (p_date_string IN VARCHAR2, p_format_mask IN VARCHAR2, p_nls_language VARCHAR2 ) RETURN DATE\nIS\nBEGIN\n   TO_TIMESTAMP(p_date_string, p_format_mask, p_nls_language);\nEND to_timestamp_three_parameters;\n\nEND date_utilities;\n/\n\n        ```"
      },
      {
        "display_name": "TomKytesDespair",
        "real_name": "category/plsql/bestpractices.xml/TomKytesDespair",
        "category": "correctness",
        "severity": "warning",
        "rule_title": "WHEN OTHERS THEN NULL - when you do this, Tom Kyte cries",
        "custom": false,
        "rule_param": null,
        "languages": [
          "plsql"
        ],
        "solution": null,
        "owner": null,
        "labels": [],
        "disable": false,
        "description": "\"WHEN OTHERS THEN NULL\" hides all errors - (Re)RAISE an exception or call RAISE_APPLICATION_ERROR\nhttps://docs.pmd-code.org/pmd-doc-7.13.0/pmd_rules_plsql_bestpractices.html#tomkytesdespair\n```\n\n\nCREATE OR REPLACE PACKAGE BODY update_planned_hrs\nIS\n\nPROCEDURE set_new_planned (p_emp_id IN NUMBER, p_project_id IN NUMBER, p_hours IN NUMBER)\nIS\nBEGIN\n   UPDATE employee_on_activity ea\n   SET ea.ea_planned_hours = p_hours\n   WHERE\n            ea.ea_emp_id = p_emp_id\n            AND ea.ea_proj_id = p_project_id;\n\nEXCEPTION\n          WHEN NO_DATA_FOUND THEN\n          RAISE_APPLICATION_ERROR (-20100, 'No such employee or project');\n\nEND set_new_planned;\n\nFUNCTION existing_planned (p_emp_id IN NUMBER, p_project_id IN NUMBER) RETURN NUMBER\n\nIS\n\nexisting_hours NUMBER(4);\n\nBEGIN\n   SELECT ea.ea_planned_hours INTO existing_hours\n   FROM employee_on_activity ea\n   WHERE\n            ea.ea_emp_id = p_emp_id\n            AND ea.ea_proj_id = p_project_id;\n\n   RETURN (existing_hours);\n\n   EXCEPTION\n          WHEN OTHERS THEN NULL;\n\n   END existing_planned;\n\nEND update_planned_hrs;\n/\n\n        ```"
      }
    ]
  }
]